"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.getFilterSections = exports.excludeSelfFilterFromAggsData = exports.checkIsArrayField = void 0;var _flat = _interopRequireDefault(require("flat"));
var _queries = require("../Utils/queries");function _interopRequireDefault(e) {return e && e.__esModule ? e : { "default": e };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(e, r, t) {return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}

var getSingleFilterOption = function getSingleFilterOption(histogramResult, initHistogramRes, filterValuesToHide) {
  if (!histogramResult || !histogramResult.histogram) {
    throw new Error("Error parsing field options ".concat(JSON.stringify(histogramResult)));
  }
  // if this is for range slider
  if (histogramResult.histogram.length === 1 && typeof histogramResult.histogram[0].key !== 'string') {
    var rangeOptions = histogramResult.histogram.map(function (item) {
      var minValue = initHistogramRes ? initHistogramRes.histogram[0].key[0] : item.key[0];
      var maxValue = initHistogramRes ? initHistogramRes.histogram[0].key[1] : item.key[1];
      return {
        filterType: 'range',
        min: Math.floor(minValue),
        max: Math.ceil(maxValue),
        lowerBound: item.key[0],
        upperBound: item.key[1],
        count: item.count
      };
    });
    return rangeOptions;
  }
  var rawTextOptions = histogramResult.histogram;
  // hide filterValuesToHide from filters
  // filterValuesToHide added to guppyConfig in data-portal
  if (filterValuesToHide.length > 0) {
    rawTextOptions = histogramResult.histogram.
    filter(function (item) {return filterValuesToHide.indexOf(item.key) < 0;});
  }
  var textOptions = rawTextOptions.map(function (item) {return {
      text: item.key,
      filterType: 'singleSelect',
      count: item.count,
      accessible: item.accessible
    };});
  return textOptions;
};

var capitalizeFirstLetter = function capitalizeFirstLetter(str) {
  var res = str.replace(/_|\./gi, ' ');
  return res.replace(/\w\S*/g, function (txt) {return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
};

// createSearchFilterLoadOptionsFn creates a handler function that loads the search filter's
// autosuggest options as the user types in the search filter.
var createSearchFilterLoadOptionsFn = function createSearchFilterLoadOptionsFn(field, guppyConfig) {return function (searchString, offset) {
    var NUM_SEARCH_OPTIONS = 20;
    return new Promise(function (resolve, reject) {
      // If searchString is empty return just the first NUM_SEARCH_OPTIONS options.
      // This allows the client to show default options in the search filter before
      // the user has started searching.
      var filter = {};
      if (searchString) {
        filter = {
          search: {
            keyword: searchString,
            fields: [field]
          }
        };
      }
      (0, _queries.queryGuppyForRawDataAndTotalCounts)(
        guppyConfig.path,
        guppyConfig.type,
        [field],
        filter,
        undefined,
        undefined,
        offset,
        NUM_SEARCH_OPTIONS,
        'accessible'
      ).
      then(function (res) {
        if (!res.data || !res.data[guppyConfig.type]) {
          resolve({
            options: [],
            hasMore: false
          });
        } else {
          var results = res.data[guppyConfig.type];
          var totalCount = res.data._aggregation[guppyConfig.type]._totalCount;
          resolve({
            options: results.map(function (result) {return { value: result[field], label: result[field] };}),
            hasMore: totalCount > offset + results.length
          });
        }
      })["catch"](function (err) {
        reject(err);
      });
    });
  };};

var checkIsArrayField = exports.checkIsArrayField = function checkIsArrayField(field, arrayFields) {
  var isArrayField = false;
  var keys = Object.keys(arrayFields);
  for (var i = 0; i < keys.length; i += 1) {
    if (arrayFields[keys[i]].includes(field)) {
      isArrayField = true;
    }
  }
  return isArrayField;
};

var getFilterSections = exports.getFilterSections = function getFilterSections(
aggFields,
searchFields,
fieldMapping,
tabsOptions,
initialTabsOptions,
adminAppliedPreFilters,
guppyConfig,
arrayFields,
filterValuesToHide,
csrfToken)
{
  var searchFieldSections = [];

  if (searchFields) {
    // Process searchFields first -- searchFields are special filters that allow the user
    // to search over all options, instead of displaying all options in a list. This allows
    // guppy/portal to support filters that have too many options to be displayed in a list.
    searchFieldSections = searchFields.map(function (field) {
      var overrideName = fieldMapping.find(function (entry) {return entry.field === field;});
      var label = overrideName ? overrideName.name : capitalizeFirstLetter(field);

      var tabsOptionsFiltered = _objectSpread({}, tabsOptions[field]);
      if (Object.keys(adminAppliedPreFilters).includes(field)) {
        tabsOptionsFiltered.histogram = tabsOptionsFiltered.histogram.filter(
          function (x) {return adminAppliedPreFilters[field].selectedValues.includes(x.key);}
        );
      }

      // For searchFields, don't pass all options to the component, only the selected ones.
      // This allows selected options to appear below the search box once they are selected.
      var selectedOptions = [];
      if (tabsOptionsFiltered && tabsOptionsFiltered.histogram) {
        selectedOptions = getSingleFilterOption(
          tabsOptionsFiltered,
          initialTabsOptions ? initialTabsOptions[field] : undefined,
          filterValuesToHide
        );
      }

      return {
        title: label,
        options: selectedOptions,
        isSearchFilter: true,
        onSearchFilterLoadOptions: createSearchFilterLoadOptionsFn(field, guppyConfig, csrfToken)
      };
    });
  }

  var sections = aggFields.map(function (field) {
    var overrideName = fieldMapping.find(function (entry) {return entry.field === field;});
    var label = overrideName ? overrideName.name : capitalizeFirstLetter(field);

    var tabsOptionsFiltered = _objectSpread({}, tabsOptions[field]);
    if (Object.keys(adminAppliedPreFilters).includes(field)) {
      tabsOptionsFiltered.histogram = tabsOptionsFiltered.histogram.filter(
        function (x) {return adminAppliedPreFilters[field].selectedValues.includes(x.key);}
      );
    }

    var defaultOptions = getSingleFilterOption(
      tabsOptionsFiltered,
      initialTabsOptions ? initialTabsOptions[field] : undefined,
      filterValuesToHide
    );

    var fieldIsArrayField = checkIsArrayField(field, arrayFields);

    return {
      title: label,
      options: defaultOptions,
      isArrayField: fieldIsArrayField
    };
  });
  return searchFieldSections.concat(sections);
};

var excludeSelfFilterFromAggsData = exports.excludeSelfFilterFromAggsData = function excludeSelfFilterFromAggsData(receivedAggsData, filterResults) {
  if (!filterResults) return receivedAggsData;
  var resultAggsData = {};
  var flattenAggsData = (0, _flat["default"])(receivedAggsData, { safe: true });
  Object.keys(flattenAggsData).forEach(function (field) {
    var actualFieldName = field.replace('.histogram', '').replace('.asTextHistogram', '');
    var histogram = flattenAggsData["".concat(field)];
    if (!histogram) return;
    if (actualFieldName in filterResults) {
      var resultHistogram = [];
      if (typeof filterResults["".concat(actualFieldName)].selectedValues !== 'undefined') {
        var selectedValues = filterResults["".concat(actualFieldName)].selectedValues;
        resultHistogram = histogram.filter(function (bucket) {return selectedValues.includes(bucket.key);});
      }
      resultAggsData["".concat(actualFieldName)] = { histogram: resultHistogram };
    } else {
      resultAggsData["".concat(actualFieldName)] = { histogram: flattenAggsData["".concat(field)] };
    }
  });
  return resultAggsData;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxhdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX3F1ZXJpZXMiLCJlIiwiX19lc01vZHVsZSIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJyIiwidCIsIk9iamVjdCIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJmaWx0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImZvckVhY2giLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiX3RvUHJvcGVydHlLZXkiLCJ2YWx1ZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiaSIsIl90b1ByaW1pdGl2ZSIsInRvUHJpbWl0aXZlIiwiY2FsbCIsIlR5cGVFcnJvciIsIlN0cmluZyIsIk51bWJlciIsImdldFNpbmdsZUZpbHRlck9wdGlvbiIsImhpc3RvZ3JhbVJlc3VsdCIsImluaXRIaXN0b2dyYW1SZXMiLCJmaWx0ZXJWYWx1ZXNUb0hpZGUiLCJoaXN0b2dyYW0iLCJFcnJvciIsImNvbmNhdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJrZXkiLCJyYW5nZU9wdGlvbnMiLCJtYXAiLCJpdGVtIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImZpbHRlclR5cGUiLCJtaW4iLCJNYXRoIiwiZmxvb3IiLCJtYXgiLCJjZWlsIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJjb3VudCIsInJhd1RleHRPcHRpb25zIiwiaW5kZXhPZiIsInRleHRPcHRpb25zIiwidGV4dCIsImFjY2Vzc2libGUiLCJjYXBpdGFsaXplRmlyc3RMZXR0ZXIiLCJzdHIiLCJyZXMiLCJyZXBsYWNlIiwidHh0IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSIsImNyZWF0ZVNlYXJjaEZpbHRlckxvYWRPcHRpb25zRm4iLCJmaWVsZCIsImd1cHB5Q29uZmlnIiwic2VhcmNoU3RyaW5nIiwib2Zmc2V0IiwiTlVNX1NFQVJDSF9PUFRJT05TIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZWFyY2giLCJrZXl3b3JkIiwiZmllbGRzIiwicXVlcnlHdXBweUZvclJhd0RhdGFBbmRUb3RhbENvdW50cyIsInBhdGgiLCJ0eXBlIiwidW5kZWZpbmVkIiwidGhlbiIsImRhdGEiLCJvcHRpb25zIiwiaGFzTW9yZSIsInJlc3VsdHMiLCJ0b3RhbENvdW50IiwiX2FnZ3JlZ2F0aW9uIiwiX3RvdGFsQ291bnQiLCJyZXN1bHQiLCJsYWJlbCIsImVyciIsImNoZWNrSXNBcnJheUZpZWxkIiwiZXhwb3J0cyIsImFycmF5RmllbGRzIiwiaXNBcnJheUZpZWxkIiwiaW5jbHVkZXMiLCJnZXRGaWx0ZXJTZWN0aW9ucyIsImFnZ0ZpZWxkcyIsInNlYXJjaEZpZWxkcyIsImZpZWxkTWFwcGluZyIsInRhYnNPcHRpb25zIiwiaW5pdGlhbFRhYnNPcHRpb25zIiwiYWRtaW5BcHBsaWVkUHJlRmlsdGVycyIsImNzcmZUb2tlbiIsInNlYXJjaEZpZWxkU2VjdGlvbnMiLCJvdmVycmlkZU5hbWUiLCJmaW5kIiwiZW50cnkiLCJuYW1lIiwidGFic09wdGlvbnNGaWx0ZXJlZCIsIngiLCJzZWxlY3RlZFZhbHVlcyIsInNlbGVjdGVkT3B0aW9ucyIsInRpdGxlIiwiaXNTZWFyY2hGaWx0ZXIiLCJvblNlYXJjaEZpbHRlckxvYWRPcHRpb25zIiwic2VjdGlvbnMiLCJkZWZhdWx0T3B0aW9ucyIsImZpZWxkSXNBcnJheUZpZWxkIiwiZXhjbHVkZVNlbGZGaWx0ZXJGcm9tQWdnc0RhdGEiLCJyZWNlaXZlZEFnZ3NEYXRhIiwiZmlsdGVyUmVzdWx0cyIsInJlc3VsdEFnZ3NEYXRhIiwiZmxhdHRlbkFnZ3NEYXRhIiwiZmxhdCIsInNhZmUiLCJhY3R1YWxGaWVsZE5hbWUiLCJyZXN1bHRIaXN0b2dyYW0iLCJidWNrZXQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db25uZWN0ZWRGaWx0ZXIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZsYXQgZnJvbSAnZmxhdCc7XG5pbXBvcnQgeyBxdWVyeUd1cHB5Rm9yUmF3RGF0YUFuZFRvdGFsQ291bnRzIH0gZnJvbSAnLi4vVXRpbHMvcXVlcmllcyc7XG5cbmNvbnN0IGdldFNpbmdsZUZpbHRlck9wdGlvbiA9IChoaXN0b2dyYW1SZXN1bHQsIGluaXRIaXN0b2dyYW1SZXMsIGZpbHRlclZhbHVlc1RvSGlkZSkgPT4ge1xuICBpZiAoIWhpc3RvZ3JhbVJlc3VsdCB8fCAhaGlzdG9ncmFtUmVzdWx0Lmhpc3RvZ3JhbSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IgcGFyc2luZyBmaWVsZCBvcHRpb25zICR7SlNPTi5zdHJpbmdpZnkoaGlzdG9ncmFtUmVzdWx0KX1gKTtcbiAgfVxuICAvLyBpZiB0aGlzIGlzIGZvciByYW5nZSBzbGlkZXJcbiAgaWYgKGhpc3RvZ3JhbVJlc3VsdC5oaXN0b2dyYW0ubGVuZ3RoID09PSAxICYmICh0eXBlb2YgaGlzdG9ncmFtUmVzdWx0Lmhpc3RvZ3JhbVswXS5rZXkpICE9PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IHJhbmdlT3B0aW9ucyA9IGhpc3RvZ3JhbVJlc3VsdC5oaXN0b2dyYW0ubWFwKChpdGVtKSA9PiB7XG4gICAgICBjb25zdCBtaW5WYWx1ZSA9IGluaXRIaXN0b2dyYW1SZXMgPyBpbml0SGlzdG9ncmFtUmVzLmhpc3RvZ3JhbVswXS5rZXlbMF0gOiBpdGVtLmtleVswXTtcbiAgICAgIGNvbnN0IG1heFZhbHVlID0gaW5pdEhpc3RvZ3JhbVJlcyA/IGluaXRIaXN0b2dyYW1SZXMuaGlzdG9ncmFtWzBdLmtleVsxXSA6IGl0ZW0ua2V5WzFdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsdGVyVHlwZTogJ3JhbmdlJyxcbiAgICAgICAgbWluOiBNYXRoLmZsb29yKG1pblZhbHVlKSxcbiAgICAgICAgbWF4OiBNYXRoLmNlaWwobWF4VmFsdWUpLFxuICAgICAgICBsb3dlckJvdW5kOiBpdGVtLmtleVswXSxcbiAgICAgICAgdXBwZXJCb3VuZDogaXRlbS5rZXlbMV0sXG4gICAgICAgIGNvdW50OiBpdGVtLmNvdW50LFxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmFuZ2VPcHRpb25zO1xuICB9XG4gIGxldCByYXdUZXh0T3B0aW9ucyA9IGhpc3RvZ3JhbVJlc3VsdC5oaXN0b2dyYW07XG4gIC8vIGhpZGUgZmlsdGVyVmFsdWVzVG9IaWRlIGZyb20gZmlsdGVyc1xuICAvLyBmaWx0ZXJWYWx1ZXNUb0hpZGUgYWRkZWQgdG8gZ3VwcHlDb25maWcgaW4gZGF0YS1wb3J0YWxcbiAgaWYgKGZpbHRlclZhbHVlc1RvSGlkZS5sZW5ndGggPiAwKSB7XG4gICAgcmF3VGV4dE9wdGlvbnMgPSBoaXN0b2dyYW1SZXN1bHQuaGlzdG9ncmFtXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiBmaWx0ZXJWYWx1ZXNUb0hpZGUuaW5kZXhPZihpdGVtLmtleSkgPCAwKTtcbiAgfVxuICBjb25zdCB0ZXh0T3B0aW9ucyA9IHJhd1RleHRPcHRpb25zLm1hcCgoaXRlbSkgPT4gKHtcbiAgICB0ZXh0OiBpdGVtLmtleSxcbiAgICBmaWx0ZXJUeXBlOiAnc2luZ2xlU2VsZWN0JyxcbiAgICBjb3VudDogaXRlbS5jb3VudCxcbiAgICBhY2Nlc3NpYmxlOiBpdGVtLmFjY2Vzc2libGUsXG4gIH0pKTtcbiAgcmV0dXJuIHRleHRPcHRpb25zO1xufTtcblxuY29uc3QgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyID0gKHN0cikgPT4ge1xuICBjb25zdCByZXMgPSBzdHIucmVwbGFjZSgvX3xcXC4vZ2ksICcgJyk7XG4gIHJldHVybiByZXMucmVwbGFjZSgvXFx3XFxTKi9nLCAodHh0KSA9PiB0eHQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eHQuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCkpO1xufTtcblxuLy8gY3JlYXRlU2VhcmNoRmlsdGVyTG9hZE9wdGlvbnNGbiBjcmVhdGVzIGEgaGFuZGxlciBmdW5jdGlvbiB0aGF0IGxvYWRzIHRoZSBzZWFyY2ggZmlsdGVyJ3Ncbi8vIGF1dG9zdWdnZXN0IG9wdGlvbnMgYXMgdGhlIHVzZXIgdHlwZXMgaW4gdGhlIHNlYXJjaCBmaWx0ZXIuXG5jb25zdCBjcmVhdGVTZWFyY2hGaWx0ZXJMb2FkT3B0aW9uc0ZuID0gKGZpZWxkLCBndXBweUNvbmZpZykgPT4gKHNlYXJjaFN0cmluZywgb2Zmc2V0KSA9PiB7XG4gIGNvbnN0IE5VTV9TRUFSQ0hfT1BUSU9OUyA9IDIwO1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIC8vIElmIHNlYXJjaFN0cmluZyBpcyBlbXB0eSByZXR1cm4ganVzdCB0aGUgZmlyc3QgTlVNX1NFQVJDSF9PUFRJT05TIG9wdGlvbnMuXG4gICAgLy8gVGhpcyBhbGxvd3MgdGhlIGNsaWVudCB0byBzaG93IGRlZmF1bHQgb3B0aW9ucyBpbiB0aGUgc2VhcmNoIGZpbHRlciBiZWZvcmVcbiAgICAvLyB0aGUgdXNlciBoYXMgc3RhcnRlZCBzZWFyY2hpbmcuXG4gICAgbGV0IGZpbHRlciA9IHt9O1xuICAgIGlmIChzZWFyY2hTdHJpbmcpIHtcbiAgICAgIGZpbHRlciA9IHtcbiAgICAgICAgc2VhcmNoOiB7XG4gICAgICAgICAga2V5d29yZDogc2VhcmNoU3RyaW5nLFxuICAgICAgICAgIGZpZWxkczogW2ZpZWxkXSxcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIHF1ZXJ5R3VwcHlGb3JSYXdEYXRhQW5kVG90YWxDb3VudHMoXG4gICAgICBndXBweUNvbmZpZy5wYXRoLFxuICAgICAgZ3VwcHlDb25maWcudHlwZSxcbiAgICAgIFtmaWVsZF0sXG4gICAgICBmaWx0ZXIsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICBvZmZzZXQsXG4gICAgICBOVU1fU0VBUkNIX09QVElPTlMsXG4gICAgICAnYWNjZXNzaWJsZScsXG4gICAgKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBpZiAoIXJlcy5kYXRhIHx8ICFyZXMuZGF0YVtndXBweUNvbmZpZy50eXBlXSkge1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgb3B0aW9uczogW10sXG4gICAgICAgICAgICBoYXNNb3JlOiBmYWxzZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXN1bHRzID0gcmVzLmRhdGFbZ3VwcHlDb25maWcudHlwZV07XG4gICAgICAgICAgY29uc3QgdG90YWxDb3VudCA9IHJlcy5kYXRhLl9hZ2dyZWdhdGlvbltndXBweUNvbmZpZy50eXBlXS5fdG90YWxDb3VudDtcbiAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHJlc3VsdHMubWFwKChyZXN1bHQpID0+ICh7IHZhbHVlOiByZXN1bHRbZmllbGRdLCBsYWJlbDogcmVzdWx0W2ZpZWxkXSB9KSksXG4gICAgICAgICAgICBoYXNNb3JlOiB0b3RhbENvdW50ID4gb2Zmc2V0ICsgcmVzdWx0cy5sZW5ndGgsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgY2hlY2tJc0FycmF5RmllbGQgPSAoZmllbGQsIGFycmF5RmllbGRzKSA9PiB7XG4gIGxldCBpc0FycmF5RmllbGQgPSBmYWxzZTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycmF5RmllbGRzKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFycmF5RmllbGRzW2tleXNbaV1dLmluY2x1ZGVzKGZpZWxkKSkge1xuICAgICAgaXNBcnJheUZpZWxkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGlzQXJyYXlGaWVsZDtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRGaWx0ZXJTZWN0aW9ucyA9IChcbiAgYWdnRmllbGRzLFxuICBzZWFyY2hGaWVsZHMsXG4gIGZpZWxkTWFwcGluZyxcbiAgdGFic09wdGlvbnMsXG4gIGluaXRpYWxUYWJzT3B0aW9ucyxcbiAgYWRtaW5BcHBsaWVkUHJlRmlsdGVycyxcbiAgZ3VwcHlDb25maWcsXG4gIGFycmF5RmllbGRzLFxuICBmaWx0ZXJWYWx1ZXNUb0hpZGUsXG4gIGNzcmZUb2tlbixcbikgPT4ge1xuICBsZXQgc2VhcmNoRmllbGRTZWN0aW9ucyA9IFtdO1xuXG4gIGlmIChzZWFyY2hGaWVsZHMpIHtcbiAgICAvLyBQcm9jZXNzIHNlYXJjaEZpZWxkcyBmaXJzdCAtLSBzZWFyY2hGaWVsZHMgYXJlIHNwZWNpYWwgZmlsdGVycyB0aGF0IGFsbG93IHRoZSB1c2VyXG4gICAgLy8gdG8gc2VhcmNoIG92ZXIgYWxsIG9wdGlvbnMsIGluc3RlYWQgb2YgZGlzcGxheWluZyBhbGwgb3B0aW9ucyBpbiBhIGxpc3QuIFRoaXMgYWxsb3dzXG4gICAgLy8gZ3VwcHkvcG9ydGFsIHRvIHN1cHBvcnQgZmlsdGVycyB0aGF0IGhhdmUgdG9vIG1hbnkgb3B0aW9ucyB0byBiZSBkaXNwbGF5ZWQgaW4gYSBsaXN0LlxuICAgIHNlYXJjaEZpZWxkU2VjdGlvbnMgPSBzZWFyY2hGaWVsZHMubWFwKChmaWVsZCkgPT4ge1xuICAgICAgY29uc3Qgb3ZlcnJpZGVOYW1lID0gZmllbGRNYXBwaW5nLmZpbmQoKGVudHJ5KSA9PiAoZW50cnkuZmllbGQgPT09IGZpZWxkKSk7XG4gICAgICBjb25zdCBsYWJlbCA9IG92ZXJyaWRlTmFtZSA/IG92ZXJyaWRlTmFtZS5uYW1lIDogY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGZpZWxkKTtcblxuICAgICAgY29uc3QgdGFic09wdGlvbnNGaWx0ZXJlZCA9IHsgLi4udGFic09wdGlvbnNbZmllbGRdIH07XG4gICAgICBpZiAoT2JqZWN0LmtleXMoYWRtaW5BcHBsaWVkUHJlRmlsdGVycykuaW5jbHVkZXMoZmllbGQpKSB7XG4gICAgICAgIHRhYnNPcHRpb25zRmlsdGVyZWQuaGlzdG9ncmFtID0gdGFic09wdGlvbnNGaWx0ZXJlZC5oaXN0b2dyYW0uZmlsdGVyKFxuICAgICAgICAgICh4KSA9PiBhZG1pbkFwcGxpZWRQcmVGaWx0ZXJzW2ZpZWxkXS5zZWxlY3RlZFZhbHVlcy5pbmNsdWRlcyh4LmtleSksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvciBzZWFyY2hGaWVsZHMsIGRvbid0IHBhc3MgYWxsIG9wdGlvbnMgdG8gdGhlIGNvbXBvbmVudCwgb25seSB0aGUgc2VsZWN0ZWQgb25lcy5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHNlbGVjdGVkIG9wdGlvbnMgdG8gYXBwZWFyIGJlbG93IHRoZSBzZWFyY2ggYm94IG9uY2UgdGhleSBhcmUgc2VsZWN0ZWQuXG4gICAgICBsZXQgc2VsZWN0ZWRPcHRpb25zID0gW107XG4gICAgICBpZiAodGFic09wdGlvbnNGaWx0ZXJlZCAmJiB0YWJzT3B0aW9uc0ZpbHRlcmVkLmhpc3RvZ3JhbSkge1xuICAgICAgICBzZWxlY3RlZE9wdGlvbnMgPSBnZXRTaW5nbGVGaWx0ZXJPcHRpb24oXG4gICAgICAgICAgdGFic09wdGlvbnNGaWx0ZXJlZCxcbiAgICAgICAgICBpbml0aWFsVGFic09wdGlvbnMgPyBpbml0aWFsVGFic09wdGlvbnNbZmllbGRdIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZpbHRlclZhbHVlc1RvSGlkZSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGU6IGxhYmVsLFxuICAgICAgICBvcHRpb25zOiBzZWxlY3RlZE9wdGlvbnMsXG4gICAgICAgIGlzU2VhcmNoRmlsdGVyOiB0cnVlLFxuICAgICAgICBvblNlYXJjaEZpbHRlckxvYWRPcHRpb25zOiBjcmVhdGVTZWFyY2hGaWx0ZXJMb2FkT3B0aW9uc0ZuKGZpZWxkLCBndXBweUNvbmZpZywgY3NyZlRva2VuKSxcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBzZWN0aW9ucyA9IGFnZ0ZpZWxkcy5tYXAoKGZpZWxkKSA9PiB7XG4gICAgY29uc3Qgb3ZlcnJpZGVOYW1lID0gZmllbGRNYXBwaW5nLmZpbmQoKGVudHJ5KSA9PiAoZW50cnkuZmllbGQgPT09IGZpZWxkKSk7XG4gICAgY29uc3QgbGFiZWwgPSBvdmVycmlkZU5hbWUgPyBvdmVycmlkZU5hbWUubmFtZSA6IGNhcGl0YWxpemVGaXJzdExldHRlcihmaWVsZCk7XG5cbiAgICBjb25zdCB0YWJzT3B0aW9uc0ZpbHRlcmVkID0geyAuLi50YWJzT3B0aW9uc1tmaWVsZF0gfTtcbiAgICBpZiAoT2JqZWN0LmtleXMoYWRtaW5BcHBsaWVkUHJlRmlsdGVycykuaW5jbHVkZXMoZmllbGQpKSB7XG4gICAgICB0YWJzT3B0aW9uc0ZpbHRlcmVkLmhpc3RvZ3JhbSA9IHRhYnNPcHRpb25zRmlsdGVyZWQuaGlzdG9ncmFtLmZpbHRlcihcbiAgICAgICAgKHgpID0+IGFkbWluQXBwbGllZFByZUZpbHRlcnNbZmllbGRdLnNlbGVjdGVkVmFsdWVzLmluY2x1ZGVzKHgua2V5KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSBnZXRTaW5nbGVGaWx0ZXJPcHRpb24oXG4gICAgICB0YWJzT3B0aW9uc0ZpbHRlcmVkLFxuICAgICAgaW5pdGlhbFRhYnNPcHRpb25zID8gaW5pdGlhbFRhYnNPcHRpb25zW2ZpZWxkXSA6IHVuZGVmaW5lZCxcbiAgICAgIGZpbHRlclZhbHVlc1RvSGlkZSxcbiAgICApO1xuXG4gICAgY29uc3QgZmllbGRJc0FycmF5RmllbGQgPSBjaGVja0lzQXJyYXlGaWVsZChmaWVsZCwgYXJyYXlGaWVsZHMpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlOiBsYWJlbCxcbiAgICAgIG9wdGlvbnM6IGRlZmF1bHRPcHRpb25zLFxuICAgICAgaXNBcnJheUZpZWxkOiBmaWVsZElzQXJyYXlGaWVsZCxcbiAgICB9O1xuICB9KTtcbiAgcmV0dXJuIHNlYXJjaEZpZWxkU2VjdGlvbnMuY29uY2F0KHNlY3Rpb25zKTtcbn07XG5cbmV4cG9ydCBjb25zdCBleGNsdWRlU2VsZkZpbHRlckZyb21BZ2dzRGF0YSA9IChyZWNlaXZlZEFnZ3NEYXRhLCBmaWx0ZXJSZXN1bHRzKSA9PiB7XG4gIGlmICghZmlsdGVyUmVzdWx0cykgcmV0dXJuIHJlY2VpdmVkQWdnc0RhdGE7XG4gIGNvbnN0IHJlc3VsdEFnZ3NEYXRhID0ge307XG4gIGNvbnN0IGZsYXR0ZW5BZ2dzRGF0YSA9IGZsYXQocmVjZWl2ZWRBZ2dzRGF0YSwgeyBzYWZlOiB0cnVlIH0pO1xuICBPYmplY3Qua2V5cyhmbGF0dGVuQWdnc0RhdGEpLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgY29uc3QgYWN0dWFsRmllbGROYW1lID0gZmllbGQucmVwbGFjZSgnLmhpc3RvZ3JhbScsICcnKS5yZXBsYWNlKCcuYXNUZXh0SGlzdG9ncmFtJywgJycpO1xuICAgIGNvbnN0IGhpc3RvZ3JhbSA9IGZsYXR0ZW5BZ2dzRGF0YVtgJHtmaWVsZH1gXTtcbiAgICBpZiAoIWhpc3RvZ3JhbSkgcmV0dXJuO1xuICAgIGlmIChhY3R1YWxGaWVsZE5hbWUgaW4gZmlsdGVyUmVzdWx0cykge1xuICAgICAgbGV0IHJlc3VsdEhpc3RvZ3JhbSA9IFtdO1xuICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJSZXN1bHRzW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5zZWxlY3RlZFZhbHVlcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgeyBzZWxlY3RlZFZhbHVlcyB9ID0gZmlsdGVyUmVzdWx0c1tgJHthY3R1YWxGaWVsZE5hbWV9YF07XG4gICAgICAgIHJlc3VsdEhpc3RvZ3JhbSA9IGhpc3RvZ3JhbS5maWx0ZXIoKGJ1Y2tldCkgPT4gc2VsZWN0ZWRWYWx1ZXMuaW5jbHVkZXMoYnVja2V0LmtleSkpO1xuICAgICAgfVxuICAgICAgcmVzdWx0QWdnc0RhdGFbYCR7YWN0dWFsRmllbGROYW1lfWBdID0geyBoaXN0b2dyYW06IHJlc3VsdEhpc3RvZ3JhbSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRBZ2dzRGF0YVtgJHthY3R1YWxGaWVsZE5hbWV9YF0gPSB7IGhpc3RvZ3JhbTogZmxhdHRlbkFnZ3NEYXRhW2Ake2ZpZWxkfWBdIH07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdEFnZ3NEYXRhO1xufTtcbiJdLCJtYXBwaW5ncyI6ImtMQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLFFBQUEsR0FBQUQsT0FBQSxxQkFBc0UsU0FBQUQsdUJBQUFHLENBQUEsVUFBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxnQkFBQUEsQ0FBQSxhQUFBRSxRQUFBQyxDQUFBLG9DQUFBRCxPQUFBLHdCQUFBRSxNQUFBLHVCQUFBQSxNQUFBLENBQUFDLFFBQUEsYUFBQUYsQ0FBQSxpQkFBQUEsQ0FBQSxlQUFBQSxDQUFBLFVBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsSUFBQUQsT0FBQSxDQUFBQyxDQUFBLFlBQUFLLFFBQUFSLENBQUEsRUFBQVMsQ0FBQSxPQUFBQyxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsSUFBQSxDQUFBWixDQUFBLE1BQUFXLE1BQUEsQ0FBQUUscUJBQUEsT0FBQVYsQ0FBQSxHQUFBUSxNQUFBLENBQUFFLHFCQUFBLENBQUFiLENBQUEsRUFBQVMsQ0FBQSxLQUFBTixDQUFBLEdBQUFBLENBQUEsQ0FBQVcsTUFBQSxXQUFBTCxDQUFBLFVBQUFFLE1BQUEsQ0FBQUks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