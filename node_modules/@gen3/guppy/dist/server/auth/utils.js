"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.resourcePathsWithServiceMethodCombination = exports.getRequestResourceListFromFilter = exports.getAccessibleResourcesFromArboristasync = exports.checkIfUserCanRefreshServer = exports.buildFilterWithResourceList = void 0;var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("../logger"));
var _aggs = require("../es/aggs");
var _index = _interopRequireDefault(require("../es/index"));
var _arboristClient = _interopRequireDefault(require("./arboristClient"));
var _error = _interopRequireDefault(require("../utils/error"));
var _config = _interopRequireDefault(require("../config"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const resourcePathsWithServiceMethodCombination = (userAuthMapping, services, methods = {}) => {
  const data = {
    resources: []
  };
  Object.keys(userAuthMapping).forEach((key) => {
    // logic: you have access to a project if you have
    // access to any of the combinations made by the method and service lists
    if (userAuthMapping[key] && userAuthMapping[key].some((x) =>
    methods.includes(x.method) &&
    services.includes(x.service)
    )) {
      data.resources.push(key);
    }
  });
  return data;
};exports.resourcePathsWithServiceMethodCombination = resourcePathsWithServiceMethodCombination;

const getAccessibleResourcesFromArboristasync = async (jwt) => {
  let data;
  if (_config.default.internalLocalTest) {
    data = {
      resources: [// these are just for testing
      '/programs/DEV/projects/test',
      '/programs/jnkns/projects/jenkins']

    };
  } else {
    data = await _arboristClient.default.listAuthMapping(jwt);
  }

  _logger.default.debug('[authMiddleware] list resources: ', JSON.stringify(data, null, 4));
  if (data && data.error) {
    // if user is not in arborist db, assume has no access to any
    if (data.error.code === 404) {
      return [];
    }
    throw new _error.default(data.error.code, data.error.message);
  }

  const read = resourcePathsWithServiceMethodCombination(data, ['guppy', '*'], ['read', '*']);
  const readResources = read.resources ? _lodash.default.uniq(read.resources) : [];
  return [readResources, data];
};exports.getAccessibleResourcesFromArboristasync = getAccessibleResourcesFromArboristasync;

const checkIfUserCanRefreshServer = async (passedData) => {
  let data = passedData;
  if (_config.default.internalLocalTest) {
    data = {
      resources: [// these are just for testing
      '/programs/DEV/projects/test',
      '/programs/jnkns/projects/jenkins']

    };
  }

  _logger.default.debug('[authMiddleware] list resources: ', JSON.stringify(data, null, 4));
  if (data && data.error) {
    // if user is not in arborist db, assume has no access to any
    if (data.error.code === 404) {
      return false;
    }
    throw new _error.default(data.error.code, data.error.message);
  }
  const adminAccess = resourcePathsWithServiceMethodCombination(data, ['guppy'], ['admin_access', '*']);

  // Only guppy_admin resource path can control guppy admin access
  return adminAccess.resources ? adminAccess.resources.includes('/guppy_admin') : false;
};exports.checkIfUserCanRefreshServer = checkIfUserCanRefreshServer;

const getRequestResourceListFromFilter = async (
esIndex,
esType,
filter,
filterSelf) =>
(0, _aggs.textAggregation)(
  { esInstance: _index.default, esIndex, esType },
  { field: _config.default.esConfig.authFilterField, filter, filterSelf }
).then((res) => res.map((item) => item.key));exports.getRequestResourceListFromFilter = getRequestResourceListFromFilter;

const buildFilterWithResourceList = (resourceList = []) => {
  const filter = {
    IN: {
      [_config.default.esConfig.authFilterField]: [...resourceList]
    }
  };
  return filter;
};exports.buildFilterWithResourceList = buildFilterWithResourceList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,