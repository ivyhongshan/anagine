"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _nodeFetch = _interopRequireDefault(require("node-fetch"));
var _config = _interopRequireDefault(require("../config"));
var _logger = _interopRequireDefault(require("../logger"));
var _error = _interopRequireDefault(require("../utils/error"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

class ArboristClient {
  constructor(arboristEndpoint) {
    this.baseEndpoint = arboristEndpoint;
  }

  listAuthMapping(jwt) {
    // Make request to arborist for list of resources with access
    const resourcesEndpoint = `${this.baseEndpoint}/auth/mapping`;
    _logger.default.debug('[ArboristClient] listAuthMapping jwt: ', jwt);

    const headers = jwt ? { Authorization: `bearer ${jwt}` } : {};
    return (0, _nodeFetch.default)(
      resourcesEndpoint,
      {
        method: 'POST',
        headers
      }
    ).then(
      (response) => {
        if (response.status === 400) {
          // Retry with GET instead of POST. Older version of Arborist POST auth/mapping
          // didn't support token authentication.
          // This catch block can be removed in a little while, when it will likely not cause issues
          return (0, _nodeFetch.default)(
            resourcesEndpoint,
            {
              method: 'GET',
              headers
            }
          ).then((res) => res.json());
        }
        return response.json();
      },
      (err) => {
        _logger.default.error(err);
        throw new _error.default(500, err);
      }
    );
  }
}var _default = exports.default =

new ArboristClient(_config.default.arboristEndpoint);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZUZldGNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uZmlnIiwiX2xvZ2dlciIsIl9lcnJvciIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIkFyYm9yaXN0Q2xpZW50IiwiY29uc3RydWN0b3IiLCJhcmJvcmlzdEVuZHBvaW50IiwiYmFzZUVuZHBvaW50IiwibGlzdEF1dGhNYXBwaW5nIiwiand0IiwicmVzb3VyY2VzRW5kcG9pbnQiLCJsb2ciLCJkZWJ1ZyIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiZmV0Y2giLCJtZXRob2QiLCJ0aGVuIiwicmVzcG9uc2UiLCJzdGF0dXMiLCJyZXMiLCJqc29uIiwiZXJyIiwiZXJyb3IiLCJDb2RlZEVycm9yIiwiX2RlZmF1bHQiLCJleHBvcnRzIiwiY29uZmlnIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZlci9hdXRoL2FyYm9yaXN0Q2xpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlnJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBDb2RlZEVycm9yIGZyb20gJy4uL3V0aWxzL2Vycm9yJztcblxuY2xhc3MgQXJib3Jpc3RDbGllbnQge1xuICBjb25zdHJ1Y3RvcihhcmJvcmlzdEVuZHBvaW50KSB7XG4gICAgdGhpcy5iYXNlRW5kcG9pbnQgPSBhcmJvcmlzdEVuZHBvaW50O1xuICB9XG5cbiAgbGlzdEF1dGhNYXBwaW5nKGp3dCkge1xuICAgIC8vIE1ha2UgcmVxdWVzdCB0byBhcmJvcmlzdCBmb3IgbGlzdCBvZiByZXNvdXJjZXMgd2l0aCBhY2Nlc3NcbiAgICBjb25zdCByZXNvdXJjZXNFbmRwb2ludCA9IGAke3RoaXMuYmFzZUVuZHBvaW50fS9hdXRoL21hcHBpbmdgO1xuICAgIGxvZy5kZWJ1ZygnW0FyYm9yaXN0Q2xpZW50XSBsaXN0QXV0aE1hcHBpbmcgand0OiAnLCBqd3QpO1xuXG4gICAgY29uc3QgaGVhZGVycyA9IChqd3QpID8geyBBdXRob3JpemF0aW9uOiBgYmVhcmVyICR7and0fWAgfSA6IHt9O1xuICAgIHJldHVybiBmZXRjaChcbiAgICAgIHJlc291cmNlc0VuZHBvaW50LFxuICAgICAge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVycyxcbiAgICAgIH0sXG4gICAgKS50aGVuKFxuICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgIC8vIFJldHJ5IHdpdGggR0VUIGluc3RlYWQgb2YgUE9TVC4gT2xkZXIgdmVyc2lvbiBvZiBBcmJvcmlzdCBQT1NUIGF1dGgvbWFwcGluZ1xuICAgICAgICAgIC8vIGRpZG4ndCBzdXBwb3J0IHRva2VuIGF1dGhlbnRpY2F0aW9uLlxuICAgICAgICAgIC8vIFRoaXMgY2F0Y2ggYmxvY2sgY2FuIGJlIHJlbW92ZWQgaW4gYSBsaXR0bGUgd2hpbGUsIHdoZW4gaXQgd2lsbCBsaWtlbHkgbm90IGNhdXNlIGlzc3Vlc1xuICAgICAgICAgIHJldHVybiBmZXRjaChcbiAgICAgICAgICAgIHJlc291cmNlc0VuZHBvaW50LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIH0sXG4gICAgICAoZXJyKSA9PiB7XG4gICAgICAgIGxvZy5lcnJvcihlcnIpO1xuICAgICAgICB0aHJvdyBuZXcgQ29kZWRFcnJvcig1MDAsIGVycik7XG4gICAgICB9LFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IEFyYm9yaXN0Q2xpZW50KGNvbmZpZy5hcmJvcmlzdEVuZHBvaW50KTtcbiJdLCJtYXBwaW5ncyI6Im9HQUFBLElBQUFBLFVBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFHLE1BQUEsR0FBQUosc0JBQUEsQ0FBQUMsT0FBQSxvQkFBd0MsU0FBQUQsdUJBQUFLLENBQUEsVUFBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7O0FBRXhDLE1BQU1HLGNBQWMsQ0FBQztFQUNuQkMsV0FBV0EsQ0FBQ0MsZ0JBQWdCLEVBQUU7SUFDNUIsSUFBSSxDQUFDQyxZQUFZLEdBQUdELGdCQUFnQjtFQUN0Qzs7RUFFQUUsZUFBZUEsQ0FBQ0MsR0FBRyxFQUFFO0lBQ25CO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsR0FBRyxJQUFJLENBQUNILFlBQVksZUFBZTtJQUM3REksZUFBRyxDQUFDQyxLQUFLLENBQUMsd0NBQXdDLEVBQUVILEdBQUcsQ0FBQzs7SUFFeEQsTUFBTUksT0FBTyxHQUFJSixHQUFHLEdBQUksRUFBRUssYUFBYSxFQUFFLFVBQVVMLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0QsT0FBTyxJQUFBTSxrQkFBSztNQUNWTCxpQkFBaUI7TUFDakI7UUFDRU0sTUFBTSxFQUFFLE1BQU07UUFDZEg7TUFDRjtJQUNGLENBQUMsQ0FBQ0ksSUFBSTtNQUNKLENBQUNDLFFBQVEsS0FBSztRQUNaLElBQUlBLFFBQVEsQ0FBQ0MsTUFBTSxLQUFLLEdBQUcsRUFBRTtVQUMzQjtVQUNBO1VBQ0E7VUFDQSxPQUFPLElBQUFKLGtCQUFLO1lBQ1ZMLGlCQUFpQjtZQUNqQjtjQUNFTSxNQUFNLEVBQUUsS0FBSztjQUNiSDtZQUNGO1VBQ0YsQ0FBQyxDQUFDSSxJQUFJLENBQUMsQ0FBQ0csR0FBRyxLQUFLQSxHQUFHLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0I7UUFDQSxPQUFPSCxRQUFRLENBQUNHLElBQUksQ0FBQyxDQUFDO01BQ3hCLENBQUM7TUFDRCxDQUFDQyxHQUFHLEtBQUs7UUFDUFgsZUFBRyxDQUFDWSxLQUFLLENBQUNELEdBQUcsQ0FBQztRQUNkLE1BQU0sSUFBSUUsY0FBVSxDQUFDLEdBQUcsRUFBRUYsR0FBRyxDQUFDO01BQ2hDO0lBQ0YsQ0FBQztFQUNIO0FBQ0YsQ0FBQyxJQUFBRyxRQUFBLEdBQUFDLE9BQUEsQ0FBQXZCLE9BQUE7O0FBRWMsSUFBSUMsY0FBYyxDQUFDdUIsZUFBTSxDQUFDckIsZ0JBQWdCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=