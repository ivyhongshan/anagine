"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _loglevel = _interopRequireDefault(require("loglevel"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const originalFactory = _loglevel.default.methodFactory;
_loglevel.default.methodFactory = (methodName, logLevel, loggerName) => {
  const rawMethod = originalFactory(methodName, logLevel, loggerName);

  return (message, ...args) => {
    let timeStr = new Date().toTimeString();
    timeStr = timeStr.substring(0, timeStr.indexOf(' '));
    const combinedMsg = args.reduce((acc, cur) => {
      if (typeof cur === 'string') {
        return `${acc} ${cur}`;
      }
      return `${acc} ${JSON.stringify(cur, null, 4)}`;
    }, message);
    rawMethod(`[${timeStr}] ${methodName.toUpperCase()}: ${combinedMsg}`);
  };
};

const numLevels = {
  0: 'TRACE',
  1: 'DEBUG',
  2: 'INFO',
  3: 'WARN',
  4: 'ERROR',
  5: 'SILENT'
};
_loglevel.default.levelEnums = {
  TRACE: 0,
  DEBUG: 1,
  INFO: 2,
  WARN: 3,
  ERROR: 4,
  SILENT: 5
};

_loglevel.default.setLevel('INFO');
_loglevel.default.setLogLevel = (level) => {
  if (!Object.keys(numLevels).includes(level) && !Object.keys(_loglevel.default.levelEnums).includes(level)) {
    throw new Error(`Invalid log level ${level}`);
  }
  _loglevel.default.setLevel(level);
  _loglevel.default.info('log level set to', numLevels[_loglevel.default.getLevel()]);
};

_loglevel.default.rawOutput = (level, msg) => {
  let parsedLevel = level;
  if (typeof level === 'string') {
    if (!Object.keys(_loglevel.default.levelEnums).includes(level)) {
      throw new Error(`Invalid log level ${level}`);
    }
    parsedLevel = _loglevel.default.levelEnums[level];
  }
  if (parsedLevel >= _loglevel.default.getLevel()) {
    console.log(msg); // eslint-disable-line no-console
  }
};var _default = exports.default =

_loglevel.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9nbGV2ZWwiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm9yaWdpbmFsRmFjdG9yeSIsImxvZyIsIm1ldGhvZEZhY3RvcnkiLCJtZXRob2ROYW1lIiwibG9nTGV2ZWwiLCJsb2dnZXJOYW1lIiwicmF3TWV0aG9kIiwibWVzc2FnZSIsImFyZ3MiLCJ0aW1lU3RyIiwiRGF0ZSIsInRvVGltZVN0cmluZyIsInN1YnN0cmluZyIsImluZGV4T2YiLCJjb21iaW5lZE1zZyIsInJlZHVjZSIsImFjYyIsImN1ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b1VwcGVyQ2FzZSIsIm51bUxldmVscyIsImxldmVsRW51bXMiLCJUUkFDRSIsIkRFQlVHIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIlNJTEVOVCIsInNldExldmVsIiwic2V0TG9nTGV2ZWwiLCJsZXZlbCIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsIkVycm9yIiwiaW5mbyIsImdldExldmVsIiwicmF3T3V0cHV0IiwibXNnIiwicGFyc2VkTGV2ZWwiLCJjb25zb2xlIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZlci9sb2dnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICdsb2dsZXZlbCc7XG5cbmNvbnN0IG9yaWdpbmFsRmFjdG9yeSA9IGxvZy5tZXRob2RGYWN0b3J5O1xubG9nLm1ldGhvZEZhY3RvcnkgPSAobWV0aG9kTmFtZSwgbG9nTGV2ZWwsIGxvZ2dlck5hbWUpID0+IHtcbiAgY29uc3QgcmF3TWV0aG9kID0gb3JpZ2luYWxGYWN0b3J5KG1ldGhvZE5hbWUsIGxvZ0xldmVsLCBsb2dnZXJOYW1lKTtcblxuICByZXR1cm4gKG1lc3NhZ2UsIC4uLmFyZ3MpID0+IHtcbiAgICBsZXQgdGltZVN0ciA9IChuZXcgRGF0ZSgpKS50b1RpbWVTdHJpbmcoKTtcbiAgICB0aW1lU3RyID0gdGltZVN0ci5zdWJzdHJpbmcoMCwgdGltZVN0ci5pbmRleE9mKCcgJykpO1xuICAgIGNvbnN0IGNvbWJpbmVkTXNnID0gYXJncy5yZWR1Y2UoKGFjYywgY3VyKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGN1ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIGAke2FjY30gJHtjdXJ9YDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHthY2N9ICR7SlNPTi5zdHJpbmdpZnkoY3VyLCBudWxsLCA0KX1gO1xuICAgIH0sIG1lc3NhZ2UpO1xuICAgIHJhd01ldGhvZChgWyR7dGltZVN0cn1dICR7bWV0aG9kTmFtZS50b1VwcGVyQ2FzZSgpfTogJHtjb21iaW5lZE1zZ31gKTtcbiAgfTtcbn07XG5cbmNvbnN0IG51bUxldmVscyA9IHtcbiAgMDogJ1RSQUNFJyxcbiAgMTogJ0RFQlVHJyxcbiAgMjogJ0lORk8nLFxuICAzOiAnV0FSTicsXG4gIDQ6ICdFUlJPUicsXG4gIDU6ICdTSUxFTlQnLFxufTtcbmxvZy5sZXZlbEVudW1zID0ge1xuICBUUkFDRTogMCxcbiAgREVCVUc6IDEsXG4gIElORk86IDIsXG4gIFdBUk46IDMsXG4gIEVSUk9SOiA0LFxuICBTSUxFTlQ6IDUsXG59O1xuXG5sb2cuc2V0TGV2ZWwoJ0lORk8nKTtcbmxvZy5zZXRMb2dMZXZlbCA9IChsZXZlbCkgPT4ge1xuICBpZiAoIU9iamVjdC5rZXlzKG51bUxldmVscykuaW5jbHVkZXMobGV2ZWwpICYmICFPYmplY3Qua2V5cyhsb2cubGV2ZWxFbnVtcykuaW5jbHVkZXMobGV2ZWwpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxvZyBsZXZlbCAke2xldmVsfWApO1xuICB9XG4gIGxvZy5zZXRMZXZlbChsZXZlbCk7XG4gIGxvZy5pbmZvKCdsb2cgbGV2ZWwgc2V0IHRvJywgbnVtTGV2ZWxzW2xvZy5nZXRMZXZlbCgpXSk7XG59O1xuXG5sb2cucmF3T3V0cHV0ID0gKGxldmVsLCBtc2cpID0+IHtcbiAgbGV0IHBhcnNlZExldmVsID0gbGV2ZWw7XG4gIGlmICh0eXBlb2YgbGV2ZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKCFPYmplY3Qua2V5cyhsb2cubGV2ZWxFbnVtcykuaW5jbHVkZXMobGV2ZWwpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbG9nIGxldmVsICR7bGV2ZWx9YCk7XG4gICAgfVxuICAgIHBhcnNlZExldmVsID0gbG9nLmxldmVsRW51bXNbbGV2ZWxdO1xuICB9XG4gIGlmIChwYXJzZWRMZXZlbCA+PSBsb2cuZ2V0TGV2ZWwoKSkge1xuICAgIGNvbnNvbGUubG9nKG1zZyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBsb2c7XG4iXSwibWFwcGluZ3MiOiJvR0FBQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUEsY0FBMkIsU0FBQUQsdUJBQUFFLENBQUEsVUFBQUEsQ0FBQSxJQUFBQSxDQUFBLENBQUFDLFVBQUEsR0FBQUQsQ0FBQSxLQUFBRSxPQUFBLEVBQUFGLENBQUE7O0FBRTNCLE1BQU1HLGVBQWUsR0FBR0MsaUJBQUcsQ0FBQ0MsYUFBYTtBQUN6Q0QsaUJBQUcsQ0FBQ0MsYUFBYSxHQUFHLENBQUNDLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxVQUFVLEtBQUs7RUFDeEQsTUFBTUMsU0FBUyxHQUFHTixlQUFlLENBQUNHLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxVQUFVLENBQUM7O0VBRW5FLE9BQU8sQ0FBQ0UsT0FBTyxFQUFFLEdBQUdDLElBQUksS0FBSztJQUMzQixJQUFJQyxPQUFPLEdBQUksSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBRUMsWUFBWSxDQUFDLENBQUM7SUFDekNGLE9BQU8sR0FBR0EsT0FBTyxDQUFDRyxTQUFTLENBQUMsQ0FBQyxFQUFFSCxPQUFPLENBQUNJLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxNQUFNQyxXQUFXLEdBQUdOLElB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