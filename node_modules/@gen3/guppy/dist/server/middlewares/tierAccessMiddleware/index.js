"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _config = _interopRequireDefault(require("../../config"));
var _utils = require("../../utils/utils");
var _resolvers = require("./resolvers");function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

// apply this middleware to all es types' data/aggregation resolvers
const queryTypeMapping = {};
const aggsTypeMapping = {};
const totalCountTypeMapping = {};
_config.default.esConfig.indices.forEach((item) => {
  queryTypeMapping[item.type] = (0, _resolvers.tierAccessResolver)({
    isRawDataQuery: true,
    esType: item.type,
    esIndex: item.index
  });
  aggsTypeMapping[item.type] = (0, _resolvers.tierAccessResolver)({ esType: item.type, esIndex: item.index });
  const aggregationName = `${(0, _utils.firstLetterUpperCase)(item.type)}Aggregation`;
  totalCountTypeMapping[aggregationName] = {
    _totalCount: (0, _resolvers.hideNumberResolver)(true)
  };
});
const tierAccessMiddleware = {
  Query: {
    ...queryTypeMapping
  },
  Aggregation: {
    ...aggsTypeMapping
  },
  ...totalCountTypeMapping,
  HistogramForNumber: {
    histogram: (0, _resolvers.hideNumberResolver)(false),
    asTextHistogram: (0, _resolvers.hideNumberResolver)(false)
  },
  HistogramForString: {
    histogram: (0, _resolvers.hideNumberResolver)(false),
    asTextHistogram: (0, _resolvers.hideNumberResolver)(false)
  }
};var _default = exports.default =

tierAccessMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfcmVzb2x2ZXJzIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicXVlcnlUeXBlTWFwcGluZyIsImFnZ3NUeXBlTWFwcGluZyIsInRvdGFsQ291bnRUeXBlTWFwcGluZyIsImNvbmZpZyIsImVzQ29uZmlnIiwiaW5kaWNlcyIsImZvckVhY2giLCJpdGVtIiwidHlwZSIsInRpZXJBY2Nlc3NSZXNvbHZlciIsImlzUmF3RGF0YVF1ZXJ5IiwiZXNUeXBlIiwiZXNJbmRleCIsImluZGV4IiwiYWdncmVnYXRpb25OYW1lIiwiZmlyc3RMZXR0ZXJVcHBlckNhc2UiLCJfdG90YWxDb3VudCIsImhpZGVOdW1iZXJSZXNvbHZlciIsInRpZXJBY2Nlc3NNaWRkbGV3YXJlIiwiUXVlcnkiLCJBZ2dyZWdhdGlvbiIsIkhpc3RvZ3JhbUZvck51bWJlciIsImhpc3RvZ3JhbSIsImFzVGV4dEhpc3RvZ3JhbSIsIkhpc3RvZ3JhbUZvclN0cmluZyIsIl9kZWZhdWx0IiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvbWlkZGxld2FyZXMvdGllckFjY2Vzc01pZGRsZXdhcmUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgZmlyc3RMZXR0ZXJVcHBlckNhc2UgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyB0aWVyQWNjZXNzUmVzb2x2ZXIsIGhpZGVOdW1iZXJSZXNvbHZlciB9IGZyb20gJy4vcmVzb2x2ZXJzJztcblxuLy8gYXBwbHkgdGhpcyBtaWRkbGV3YXJlIHRvIGFsbCBlcyB0eXBlcycgZGF0YS9hZ2dyZWdhdGlvbiByZXNvbHZlcnNcbmNvbnN0IHF1ZXJ5VHlwZU1hcHBpbmcgPSB7fTtcbmNvbnN0IGFnZ3NUeXBlTWFwcGluZyA9IHt9O1xuY29uc3QgdG90YWxDb3VudFR5cGVNYXBwaW5nID0ge307XG5jb25maWcuZXNDb25maWcuaW5kaWNlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gIHF1ZXJ5VHlwZU1hcHBpbmdbaXRlbS50eXBlXSA9IHRpZXJBY2Nlc3NSZXNvbHZlcih7XG4gICAgaXNSYXdEYXRhUXVlcnk6IHRydWUsXG4gICAgZXNUeXBlOiBpdGVtLnR5cGUsXG4gICAgZXNJbmRleDogaXRlbS5pbmRleCxcbiAgfSk7XG4gIGFnZ3NUeXBlTWFwcGluZ1tpdGVtLnR5cGVdID0gdGllckFjY2Vzc1Jlc29sdmVyKHsgZXNUeXBlOiBpdGVtLnR5cGUsIGVzSW5kZXg6IGl0ZW0uaW5kZXggfSk7XG4gIGNvbnN0IGFnZ3JlZ2F0aW9uTmFtZSA9IGAke2ZpcnN0TGV0dGVyVXBwZXJDYXNlKGl0ZW0udHlwZSl9QWdncmVnYXRpb25gO1xuICB0b3RhbENvdW50VHlwZU1hcHBpbmdbYWdncmVnYXRpb25OYW1lXSA9IHtcbiAgICBfdG90YWxDb3VudDogaGlkZU51bWJlclJlc29sdmVyKHRydWUpLFxuICB9O1xufSk7XG5jb25zdCB0aWVyQWNjZXNzTWlkZGxld2FyZSA9IHtcbiAgUXVlcnk6IHtcbiAgICAuLi5xdWVyeVR5cGVNYXBwaW5nLFxuICB9LFxuICBBZ2dyZWdhdGlvbjoge1xuICAgIC4uLmFnZ3NUeXBlTWFwcGluZyxcbiAgfSxcbiAgLi4udG90YWxDb3VudFR5cGVNYXBwaW5nLFxuICBIaXN0b2dyYW1Gb3JOdW1iZXI6IHtcbiAgICBoaXN0b2dyYW06IGhpZGVOdW1iZXJSZXNvbHZlcihmYWxzZSksXG4gICAgYXNUZXh0SGlzdG9ncmFtOiBoaWRlTnVtYmVyUmVzb2x2ZXIoZmFsc2UpLFxuICB9LFxuICBIaXN0b2dyYW1Gb3JTdHJpbmc6IHtcbiAgICBoaXN0b2dyYW06IGhpZGVOdW1iZXJSZXNvbHZlcihmYWxzZSksXG4gICAgYXNUZXh0SGlzdG9ncmFtOiBoaWRlTnVtYmVyUmVzb2x2ZXIoZmFsc2UpLFxuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGllckFjY2Vzc01pZGRsZXdhcmU7XG4iXSwibWFwcGluZ3MiOiJvR0FBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxNQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxVQUFBLEdBQUFGLE9BQUEsZ0JBQXFFLFNBQUFELHVCQUFBSSxDQUFBLFVBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBOztBQUVyRTtBQUNBLE1BQU1HLGdCQUFnQixHQUFHLENBQUMsQ0FBQztBQUMzQixNQUFNQyxlQUFlLEdBQUcsQ0FBQyxDQUFDO0FBQzFCLE1BQU1DLHFCQUFxQixHQUFHLENBQUMsQ0FBQztBQUNoQ0MsZUFBTSxDQUFDQyxRQUFRLENBQUNDLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLENBQUNDLElBQUksS0FBSztFQUN4Q1AsZ0JBQWdCLENBQUNPLElBQUksQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsSUFBQUMsNkJBQWtCLEVBQUM7SUFDL0NDLGNBQWMsRUFBRSxJQUFJO0lBQ3BCQyxNQUFNLEVBQUVKLElBQUksQ0FBQ0MsSUFBSTtJQUNqQkksT0FBTyxFQUFFTCxJQUFJLENBQUNNO0VBQ2hCLENBQUMsQ0FBQztFQUNGWixlQUFlLENBQUNNLElBQUksQ0FBQ0MsSUFBSSxDQUFDLEdBQUcsSUFBQUMsNkJBQWtCLEVBQUMsRUFBRUUsTUFBTSxFQUFFSixJQUFJLENBQUNDLElBQUksRUFBRUksT0FBTyxFQUFFTCxJQUFJLENBQUNNLEtBQUssQ0FBQyxDQUFDLENBQUM7RUFDM0YsTUFBTUMsZUFBZSxHQUFHLEdBQUcsSUFBQUMsMkJBQW9CLEVBQUNSLElBQUksQ0FBQ0MsSUFBSSxDQUFDLGFBQWE7RUFDdkVOLHFCQUFxQixDQUFDWSxlQUFlLENBQUMsR0FBRztJQUN2Q0UsV0FBVyxFQUFFLElBQUFDLDZCQUFrQixFQUFDLElBQUk7RUFDdEMsQ0FBQztBQUNILENBQUMsQ0FBQztBQUNGLE1BQU1DLG9CQUFvQixHQUFHO0VBQzNCQyxLQUFLLEVBQUU7SUFDTCxHQUFHbkI7RUFDTCxDQUFDO0VBQ0RvQixXQUFXLEVBQUU7SUFDWCxHQUFHbkI7RUFDTCxDQUFDO0VBQ0QsR0FBR0MscUJBQXFCO0VBQ3hCbUIsa0JBQWtCLEVBQUU7SUFDbEJDLFNBQVMsRUFBRSxJQUFBTCw2QkFBa0IsRUFBQyxLQUFLLENBQUM7SUFDcENNLGVBQWUsRUFBRSxJQUFBTiw2QkFBa0IsRUFBQyxLQUFLO0VBQzNDLENBQUM7RUFDRE8sa0JBQWtCLEVBQUU7SUFDbEJGLFNBQVMsRUFBRSxJQUFBTCw2QkFBa0IsRUFBQyxLQUFLLENBQUM7SUFDcENNLGVBQWUsRUFBRSxJQUFBTiw2QkFBa0IsRUFBQyxLQUFLO0VBQzNDO0FBQ0YsQ0FBQyxDQUFDLElBQUFRLFFBQUEsR0FBQUMsT0FBQSxDQUFBM0IsT0FBQTs7QUFFYW1CLG9CQUFvQiIsImlnbm9yZUxpc3QiOltdfQ==