"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.tierAccessResolver = exports.hideNumberResolver = void 0;var _lodash = _interopRequireDefault(require("lodash"));
var _assert = _interopRequireDefault(require("assert"));
var _graphql = require("graphql");
var _errors = require("@apollo/server/errors");
var _logger = _interopRequireDefault(require("../../logger"));
var _config = _interopRequireDefault(require("../../config"));
var _index = _interopRequireDefault(require("../../es/index"));
var _error = _interopRequireDefault(require("../../utils/error"));
var _utils = require("../../utils/utils");function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const ENCRYPT_COUNT = -1;

const resolverWithAccessibleFilterApplied = (
resolve,
root,
args,
context,
info,
authHelper,
filter) =>
{
  const appliedFilter = authHelper.applyAccessibleFilter(filter);
  const newArgs = {
    ...args,
    filter: appliedFilter,
    needEncryptAgg: false
  };
  return resolve(root, newArgs, context, info);
};

const resolverWithUnaccessibleFilterApplied = (
resolve,
root,
args,
context,
info,
authHelper,
filter) =>
{
  const appliedFilter = authHelper.applyUnaccessibleFilter(filter);
  const newArgs = {
    ...args,
    filter: appliedFilter,
    needEncryptAgg: true
  };
  return resolve(root, newArgs, context, info);
};

const tierAccessResolver = (
{
  isRawDataQuery,
  esType,
  esIndex
}) =>
async (resolve, root, args, context, info) => {
  try {
    // Assert that either this index is "regular" access or
    // that the index has no setting and site-wide config is "regular".
    const indexConfig = _index.default.getESIndexConfigByName(esIndex);
    const indexIsRegularAccess = indexConfig.tier_access_level === 'regular';
    const siteIsRegularAccess = _config.default.tierAccessLevel === 'regular';
    (0, _assert.default)(indexIsRegularAccess || siteIsRegularAccess, 'Tier access middleware layer only for "regular" tier access level');

    const { authHelper } = context;
    const { filter, filterSelf, accessibility } = args;

    const outOfScopeResourceList = await authHelper.getOutOfScopeResourceList(
      esIndex,
      esType,
      filter,
      filterSelf
    );
    // if requesting resources is within allowed resources, return result
    if (outOfScopeResourceList.length === 0) {
      // unless it's requesting for `unaccessible` data, just resolve this
      switch (accessibility) {
        case 'accessible':
          return resolve(root, { ...args, needEncryptAgg: false }, context, info);
        case 'unaccessible':
          return resolverWithUnaccessibleFilterApplied(
            resolve,
            root,
            args,
            context,
            info,
            authHelper,
            filter
          );
        default:
          return resolve(root, { ...args, needEncryptAgg: true }, context, info);
      }
    }
    // else, check if it's raw data query or aggs query
    if (isRawDataQuery) {// raw data query for out-of-scope resources are forbidden
      if (accessibility === 'accessible') {
        return resolverWithAccessibleFilterApplied(
          resolve,
          root,
          args,
          context,
          info,
          authHelper,
          filter
        );
      }
      _logger.default.info('[tierAccessResolver] requesting out-of-scope resources, return 401');
      _logger.default.info(`[tierAccessResolver] the following resources are out-of-scope: [${outOfScopeResourceList.join(', ')}]`);
      throw new _graphql.GraphQLError('You don\'t have access to all the data you are querying. Try using \'accessibility: accessible\' in your query', {
        extensions: {
          code: 401
        }
      });
    }

    /**
     * Here we have a bypass for `regular`-tier-access-leveled commons:
     * `accessibility` has 3 options: `all`, `accessible`, and `unaccessible`.
     * For `all`, behavior is the same as usual
     * For `accessible`, we will apply auth filter on top of filter argument
     * For `unaccessible`, we apply unaccessible filters on top of filter argument
     */
    const sensitiveRecordExclusionEnabled = !!_config.default.tierAccessSensitiveRecordExclusionField;
    if (accessibility === 'all') {
      if (sensitiveRecordExclusionEnabled) {
        // Sensitive study exclusion is enabled: For all of the projects user does
        // not have access to, hide the studies marked 'sensitive' from the aggregation.
        // (See doc/queries.md#Tiered_Access_sensitive_record_exclusion)
        const projectsUserHasAccessTo = authHelper.getAccessibleResources();
        const sensitiveStudiesFilter = {
          OR: [
          {
            IN: {
              [_config.default.esConfig.authFilterField]: projectsUserHasAccessTo
            }
          },
          {
            '!=': {
              [_config.default.tierAccessSensitiveRecordExclusionField]: 'true'
            }
          }]

        };
        return resolve(
          root,
          {
            ...args,
            filter: (0, _utils.addTwoFilters)(filter, sensitiveStudiesFilter),
            needEncryptAgg: true
          },
          context,
          info
        );
      }

      return resolve(
        root,
        {
          ...args,
          filter,
          needEncryptAgg: true
        },
        context,
        info
      );
    }
    if (accessibility === 'accessible') {
      // We do not need to apply sensitive studies filter here, because
      // user has access to all of these projects.
      _logger.default.debug('[tierAccessResolver] applying "accessible" to resolver');
      return resolverWithAccessibleFilterApplied(
        resolve,
        root,
        args,
        context,
        info,
        authHelper,
        filter
      );
    }
    // The below code executes if accessibility === 'unaccessible'.
    if (sensitiveRecordExclusionEnabled) {
      // Apply sensitive studies filter. Hide the studies marked 'sensitive' from
      // the aggregation.
      const sensitiveStudiesFilter = {
        '!=': {
          [_config.default.tierAccessSensitiveRecordExclusionField]: 'true'
        }
      };
      return resolverWithUnaccessibleFilterApplied(
        resolve,
        root,
        args,
        context,
        info,
        authHelper,
        (0, _utils.addTwoFilters)(filter, sensitiveStudiesFilter)
      );
    }
    return resolverWithUnaccessibleFilterApplied(
      resolve,
      root,
      args,
      context,
      info,
      authHelper,
      filter
    );
  } catch (err) {
    if (err instanceof _graphql.GraphQLError) {
      if (_errors.ApolloServerErrorCode[err.extensions.code]) {
        console.trace(err); // eslint-disable-line no-console
      }
    } else if (err instanceof _error.default) {
      if (err.code >= 500) {
        console.trace(err); // eslint-disable-line no-console
      }
    }
    throw err;
  }
};

/**
 * This resolver middleware is appended after aggregation resolvers,
 * it hide number that is less than allowed visible number for regular tier access
 * @param {bool} isGettingTotalCount
 */exports.tierAccessResolver = tierAccessResolver;
const hideNumberResolver = (isGettingTotalCount) => async (
resolve,
root,
args,
context,
info) =>
{
  // for aggregations, hide all counts that are greater than limited number
  const { needEncryptAgg } = root;
  const result = await resolve(root, args, context, info);
  _logger.default.debug('[hideNumberResolver] result: ', result);
  if (!needEncryptAgg) return result;

  const newRoot = root;
  newRoot.accessibility = 'unaccessible';
  const { authHelper } = context;
  newRoot.filter = authHelper.applyUnaccessibleFilter(newRoot.filter);
  const unaccessibleResult = await resolve(newRoot, args, context, info);
  _logger.default.debug('[hideNumberResolver] unaccessibleResult: ', unaccessibleResult);

  // if getting total count, only encrypt if unaccessibleResult is between (0, tierAccessLimit)
  if (isGettingTotalCount) {
    return unaccessibleResult > 0 &&
    unaccessibleResult < _config.default.tierAccessLimit ? ENCRYPT_COUNT : result;
  }

  const encryptedResult = result.map((item) => {
    // we don't encrypt whitelisted results or if result is not found in unaccessibleResult
    if ((0, _utils.isWhitelisted)(item.key) || !unaccessibleResult.some((e) => e.key === item.key)) {
      return item;
    }
    // we only encrypt if count from no-access item is small
    const unaccessibleResultItem = _lodash.default.find(unaccessibleResult, (e) => e.key === item.key);
    if (unaccessibleResultItem.count < _config.default.tierAccessLimit) {
      return {
        key: item.key,
        count: ENCRYPT_COUNT
      };
    }
    return item;
  });
  return encryptedResult;
};exports.hideNumberResolver = hideNumberResolver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,