"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _config = _interopRequireDefault(require("../../config"));
var _utils = require("../../utils/utils");
var _resolvers = _interopRequireDefault(require("../authMiddleware/resolvers"));
var _resolvers2 = require("../tierAccessMiddleware/resolvers");function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const queryTypeMapping = {};
const aggsTypeMapping = {};
const totalCountTypeMapping = {};
let atLeastOneIndexIsRegularAccess = false;

_config.default.esConfig.indices.forEach((item) => {
  if (item.tier_access_level === 'private') {
    queryTypeMapping[item.type] = _resolvers.default;
    aggsTypeMapping[item.type] = _resolvers.default;
  } else if (item.tier_access_level === 'regular') {
    atLeastOneIndexIsRegularAccess = true;
    queryTypeMapping[item.type] = (0, _resolvers2.tierAccessResolver)({
      isRawDataQuery: true,
      esType: item.type,
      esIndex: item.index
    });
    aggsTypeMapping[item.type] = (0, _resolvers2.tierAccessResolver)({ esType: item.type, esIndex: item.index });
    const aggregationName = `${(0, _utils.firstLetterUpperCase)(item.type)}Aggregation`;
    totalCountTypeMapping[aggregationName] = {
      _totalCount: (0, _resolvers2.hideNumberResolver)(true)
    };
  }
  // No additional resolvers necessary for tier_access_level == 'libre'
}, {});

const perIndexTierAccessMiddleware = {
  Query: {
    ...queryTypeMapping
  },
  Aggregation: {
    ...aggsTypeMapping
  },
  ...totalCountTypeMapping
};

if (atLeastOneIndexIsRegularAccess) {
  perIndexTierAccessMiddleware.RegularAccessHistogramForNumber = {
    histogram: (0, _resolvers2.hideNumberResolver)(false),
    asTextHistogram: (0, _resolvers2.hideNumberResolver)(false)
  };

  perIndexTierAccessMiddleware.RegularAccessHistogramForString = {
    histogram: (0, _resolvers2.hideNumberResolver)(false),
    asTextHistogram: (0, _resolvers2.hideNumberResolver)(false)
  };
}var _default = exports.default =

perIndexTierAccessMiddleware;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfcmVzb2x2ZXJzIiwiX3Jlc29sdmVyczIiLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJxdWVyeVR5cGVNYXBwaW5nIiwiYWdnc1R5cGVNYXBwaW5nIiwidG90YWxDb3VudFR5cGVNYXBwaW5nIiwiYXRMZWFzdE9uZUluZGV4SXNSZWd1bGFyQWNjZXNzIiwiY29uZmlnIiwiZXNDb25maWciLCJpbmRpY2VzIiwiZm9yRWFjaCIsIml0ZW0iLCJ0aWVyX2FjY2Vzc19sZXZlbCIsInR5cGUiLCJhdXRoTVdSZXNvbHZlciIsInRpZXJBY2Nlc3NSZXNvbHZlciIsImlzUmF3RGF0YVF1ZXJ5IiwiZXNUeXBlIiwiZXNJbmRleCIsImluZGV4IiwiYWdncmVnYXRpb25OYW1lIiwiZmlyc3RMZXR0ZXJVcHBlckNhc2UiLCJfdG90YWxDb3VudCIsImhpZGVOdW1iZXJSZXNvbHZlciIsInBlckluZGV4VGllckFjY2Vzc01pZGRsZXdhcmUiLCJRdWVyeSIsIkFnZ3JlZ2F0aW9uIiwiUmVndWxhckFjY2Vzc0hpc3RvZ3JhbUZvck51bWJlciIsImhpc3RvZ3JhbSIsImFzVGV4dEhpc3RvZ3JhbSIsIlJlZ3VsYXJBY2Nlc3NIaXN0b2dyYW1Gb3JTdHJpbmciLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2VydmVyL21pZGRsZXdhcmVzL3BlckluZGV4VGllckFjY2Vzc01pZGRsZXdhcmUvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbmZpZyBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgZmlyc3RMZXR0ZXJVcHBlckNhc2UgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgYXV0aE1XUmVzb2x2ZXIgZnJvbSAnLi4vYXV0aE1pZGRsZXdhcmUvcmVzb2x2ZXJzJztcbmltcG9ydCB7IHRpZXJBY2Nlc3NSZXNvbHZlciwgaGlkZU51bWJlclJlc29sdmVyIH0gZnJvbSAnLi4vdGllckFjY2Vzc01pZGRsZXdhcmUvcmVzb2x2ZXJzJztcblxuY29uc3QgcXVlcnlUeXBlTWFwcGluZyA9IHt9O1xuY29uc3QgYWdnc1R5cGVNYXBwaW5nID0ge307XG5jb25zdCB0b3RhbENvdW50VHlwZU1hcHBpbmcgPSB7fTtcbmxldCBhdExlYXN0T25lSW5kZXhJc1JlZ3VsYXJBY2Nlc3MgPSBmYWxzZTtcblxuY29uZmlnLmVzQ29uZmlnLmluZGljZXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICBpZiAoaXRlbS50aWVyX2FjY2Vzc19sZXZlbCA9PT0gJ3ByaXZhdGUnKSB7XG4gICAgcXVlcnlUeXBlTWFwcGluZ1tpdGVtLnR5cGVdID0gYXV0aE1XUmVzb2x2ZXI7XG4gICAgYWdnc1R5cGVNYXBwaW5nW2l0ZW0udHlwZV0gPSBhdXRoTVdSZXNvbHZlcjtcbiAgfSBlbHNlIGlmIChpdGVtLnRpZXJfYWNjZXNzX2xldmVsID09PSAncmVndWxhcicpIHtcbiAgICBhdExlYXN0T25lSW5kZXhJc1JlZ3VsYXJBY2Nlc3MgPSB0cnVlO1xuICAgIHF1ZXJ5VHlwZU1hcHBpbmdbaXRlbS50eXBlXSA9IHRpZXJBY2Nlc3NSZXNvbHZlcih7XG4gICAgICBpc1Jhd0RhdGFRdWVyeTogdHJ1ZSxcbiAgICAgIGVzVHlwZTogaXRlbS50eXBlLFxuICAgICAgZXNJbmRleDogaXRlbS5pbmRleCxcbiAgICB9KTtcbiAgICBhZ2dzVHlwZU1hcHBpbmdbaXRlbS50eXBlXSA9IHRpZXJBY2Nlc3NSZXNvbHZlcih7IGVzVHlwZTogaXRlbS50eXBlLCBlc0luZGV4OiBpdGVtLmluZGV4IH0pO1xuICAgIGNvbnN0IGFnZ3JlZ2F0aW9uTmFtZSA9IGAke2ZpcnN0TGV0dGVyVXBwZXJDYXNlKGl0ZW0udHlwZSl9QWdncmVnYXRpb25gO1xuICAgIHRvdGFsQ291bnRUeXBlTWFwcGluZ1thZ2dyZWdhdGlvbk5hbWVdID0ge1xuICAgICAgX3RvdGFsQ291bnQ6IGhpZGVOdW1iZXJSZXNvbHZlcih0cnVlKSxcbiAgICB9O1xuICB9XG4gIC8vIE5vIGFkZGl0aW9uYWwgcmVzb2x2ZXJzIG5lY2Vzc2FyeSBmb3IgdGllcl9hY2Nlc3NfbGV2ZWwgPT0gJ2xpYnJlJ1xufSwge30pO1xuXG5jb25zdCBwZXJJbmRleFRpZXJBY2Nlc3NNaWRkbGV3YXJlID0ge1xuICBRdWVyeToge1xuICAgIC4uLnF1ZXJ5VHlwZU1hcHBpbmcsXG4gIH0sXG4gIEFnZ3JlZ2F0aW9uOiB7XG4gICAgLi4uYWdnc1R5cGVNYXBwaW5nLFxuICB9LFxuICAuLi50b3RhbENvdW50VHlwZU1hcHBpbmcsXG59O1xuXG5pZiAoYXRMZWFzdE9uZUluZGV4SXNSZWd1bGFyQWNjZXNzKSB7XG4gIHBlckluZGV4VGllckFjY2Vzc01pZGRsZXdhcmUuUmVndWxhckFjY2Vzc0hpc3RvZ3JhbUZvck51bWJlciA9IHtcbiAgICBoaXN0b2dyYW06IGhpZGVOdW1iZXJSZXNvbHZlcihmYWxzZSksXG4gICAgYXNUZXh0SGlzdG9ncmFtOiBoaWRlTnVtYmVyUmVzb2x2ZXIoZmFsc2UpLFxuICB9O1xuXG4gIHBlckluZGV4VGllckFjY2Vzc01pZGRsZXdhcmUuUmVndWxhckFjY2Vzc0hpc3RvZ3JhbUZvclN0cmluZyA9IHtcbiAgICBoaXN0b2dyYW06IGhpZGVOdW1iZXJSZXNvbHZlcihmYWxzZSksXG4gICAgYXNUZXh0SGlzdG9ncmFtOiBoaWRlTnVtYmVyUmVzb2x2ZXIoZmFsc2UpLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBwZXJJbmRleFRpZXJBY2Nlc3NNaWRkbGV3YXJlO1xuIl0sIm1hcHBpbmdzIjoib0dBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsVUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBLHNDQUEyRixTQUFBRCx1QkFBQUssQ0FBQSxVQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLEtBQUFFLE9BQUEsRUFBQUYsQ0FBQTs7QUFFM0YsTUFBTUcsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLE1BQU1DLGVBQWUsR0FBRyxDQUFDLENBQUM7QUFDMUIsTUFBTUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBQ2hDLElBQUlDLDhCQUE4QixHQUFHLEtBQUs7O0FBRTFDQyxlQUFNLENBQUNDLFFBQVEsQ0FBQ0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsQ0FBQ0MsSUFBSSxLQUFLO0VBQ3hDLElBQUlBLElBQUksQ0FBQ0MsaUJBQWlCLEtBQUssU0FBUyxFQUFFO0lBQ3hDVCxnQkFBZ0IsQ0FBQ1EsSUFBSSxDQUFDRSxJQUFJLENBQUMsR0FBR0Msa0JBQWM7SUFDNUNWLGVBQWUsQ0FBQ08sSUFBSSxDQUFDRSxJQUFJLENBQUMsR0FBR0Msa0JBQWM7RUFDN0MsQ0FBQyxNQUFNLElBQUlILElBQUksQ0FBQ0MsaUJBQWlCLEtBQUssU0FBUyxFQUFFO0lBQy9DTiw4QkFBOEIsR0FBRyxJQUFJO0lBQ3JDSCxnQkFBZ0IsQ0FBQ1EsSUFBSSxDQUFDRSxJQUFJLENBQUMsR0FBRyxJQUFBRSw4QkFBa0IsRUFBQztNQUMvQ0MsY0FBYyxFQUFFLElBQUk7TUFDcEJDLE1BQU0sRUFBRU4sSUFBSSxDQUFDRSxJQUFJO01BQ2pCSyxPQUFPLEVBQUVQLElBQUksQ0FBQ1E7SUFDaEIsQ0FBQyxDQUFDO0lBQ0ZmLGVBQWUsQ0FBQ08sSUFBSSxDQUFDRSxJQUFJLENBQUMsR0FBRyxJQUFBRSw4QkFBa0IsRUFBQyxFQUFFRSxNQUFNLEVBQUVOLElBQUksQ0FBQ0UsSUFBSSxFQUFFSyxPQUFPLEVBQUVQLElBQUksQ0FBQ1EsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzRixNQUFNQyxlQUFlLEdBQUcsR0FBRyxJQUFBQywyQkFBb0IsRUFBQ1YsSUFBSSxDQUFDRSxJQUFJLENBQUMsYUFBYTtJQUN2RVIscUJBQXFCLENBQUNlLGVBQWUsQ0FBQyxHQUFHO01BQ3ZDRSxXQUFXLEVBQUUsSUFBQUMsOEJBQWtCLEVBQUMsSUFBSTtJQUN0QyxDQUFDO0VBQ0g7RUFDQTtBQUNGLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFTixNQUFNQyw0QkFBNEIsR0FBRztFQUNuQ0MsS0FBSyxFQUFFO0lBQ0wsR0FBR3RCO0VBQ0wsQ0FBQztFQUNEdUIsV0FBVyxFQUFFO0lBQ1gsR0FBR3RCO0VBQ0wsQ0FBQztFQUNELEdBQUdDO0FBQ0wsQ0FBQzs7QUFFRCxJQUFJQyw4QkFBOEIsRUFBRTtFQUNsQ2tCLDRCQUE0QixDQUFDRywrQkFBK0IsR0FBRztJQUM3REMsU0FBUyxFQUFFLElBQUFMLDhCQUFrQixFQUFDLEtBQUssQ0FBQztJQUNwQ00sZUFBZSxFQUFFLElBQUFOLDhCQUFrQixFQUFDLEtBQUs7RUFDM0MsQ0FBQzs7RUFFREMsNEJBQTRCLENBQUNNLCtCQUErQixHQUFHO0lBQzdERixTQUFTLEVBQUUsSUFBQUwsOEJBQWtCLEVBQUMsS0FBSyxDQUFDO0lBQ3BDTSxlQUFlLEVBQUUsSUFBQU4sOEJBQWtCLEVBQUMsS0FBSztFQUMzQyxDQUFDO0FBQ0gsQ0FBQyxJQUFBUSxRQUFBLEdBQUFDLE9BQUEsQ0FBQTlCLE9BQUE7O0FBRWNzQiw0QkFBNEIiLCJpZ25vcmVMaXN0IjpbXX0=