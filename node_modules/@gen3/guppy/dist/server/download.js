"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _authHelper = _interopRequireDefault(require("./auth/authHelper"));
var _headerParser = _interopRequireDefault(require("./utils/headerParser"));
var _index = _interopRequireDefault(require("./es/index"));
var _logger = _interopRequireDefault(require("./logger"));
var _config = _interopRequireDefault(require("./config"));
var _error = _interopRequireDefault(require("./utils/error"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const downloadRouter = async (req, res, next) => {
  const {
    type, filter, sort, fields, accessibility
  } = req.body;

  _logger.default.debug('[download] ', JSON.stringify(req.body, null, 4));
  const esIndexConfig = _index.default.getESIndexConfigByType(type);
  const tierAccessLevel = _config.default.tierAccessLevel ?
  _config.default.tierAccessLevel : esIndexConfig.tier_access_level;
  const jwt = _headerParser.default.parseJWT(req);
  const authHelper = await (0, _authHelper.default)(jwt);

  try {
    let appliedFilter;
    /**
     * Tier access strategy for download endpoint:
     * 1. if the data commons or the index is private, add auth filter layer onto filter
     * 2. if the data commons or the index is regular:
     *   a. if request contains out-of-access resource, return 401
     *   b. if request contains only accessible resouces, return response
     * 3. if the data commons or the index is libre, always return reponse without any auth check
     */
    switch (tierAccessLevel) {
      case 'private':{
          appliedFilter = authHelper.applyAccessibleFilter(filter);
          break;
        }
      case 'regular':{
          _logger.default.debug('[download] regular commons');
          if (accessibility === 'accessible') {
            appliedFilter = authHelper.applyAccessibleFilter(filter);
          } else {
            const outOfScopeResourceList = await authHelper.getOutOfScopeResourceList(
              esIndexConfig.index,
              type,
              filter
            );
            // if requesting resources > allowed resources, return 401,
            if (outOfScopeResourceList.length > 0) {
              _logger.default.info('[download] requesting out-of-scope resources, return 401');
              _logger.default.info(`[download] the following resources are out-of-scope: [${outOfScopeResourceList.join(', ')}]`);
              throw new _error.default(401, 'You don\'t have access to all the data you are querying. Try using \'accessibility: accessible\' in your query');
            } else {// else, go ahead download
              appliedFilter = filter;
            }
          }
          break;
        }
      case 'libre':{
          appliedFilter = filter;
          break;
        }
      default:
        throw new Error(`Invalid TIER_ACCESS_LEVEL "${tierAccessLevel}"`);
    }
    const data = await _index.default.downloadData({
      esIndex: esIndexConfig.index, esType: type, filter: appliedFilter, sort, fields
    });
    res.setHeader('Content-Type', 'application/json; charset=utf-8');
    res.send(data);
  } catch (err) {
    _logger.default.error(err);
    next(err);
  }
  return 0;
};var _default = exports.default =

downloadRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYXV0aEhlbHBlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2hlYWRlclBhcnNlciIsIl9pbmRleCIsIl9sb2dnZXIiLCJfY29uZmlnIiwiX2Vycm9yIiwiZSIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiZG93bmxvYWRSb3V0ZXIiLCJyZXEiLCJyZXMiLCJuZXh0IiwidHlwZSIsImZpbHRlciIsInNvcnQiLCJmaWVsZHMiLCJhY2Nlc3NpYmlsaXR5IiwiYm9keSIsImxvZyIsImRlYnVnIiwiSlNPTiIsInN0cmluZ2lmeSIsImVzSW5kZXhDb25maWciLCJlc0luc3RhbmNlIiwiZ2V0RVNJbmRleENvbmZpZ0J5VHlwZSIsInRpZXJBY2Nlc3NMZXZlbCIsImNvbmZpZyIsInRpZXJfYWNjZXNzX2xldmVsIiwiand0IiwiaGVhZGVyUGFyc2VyIiwicGFyc2VKV1QiLCJhdXRoSGVscGVyIiwiZ2V0QXV0aEhlbHBlckluc3RhbmNlIiwiYXBwbGllZEZpbHRlciIsImFwcGx5QWNjZXNzaWJsZUZpbHRlciIsIm91dE9mU2NvcGVSZXNvdXJjZUxpc3QiLCJnZXRPdXRPZlNjb3BlUmVzb3VyY2VMaXN0IiwiaW5kZXgiLCJsZW5ndGgiLCJpbmZvIiwiam9pbiIsIkNvZGVkRXJyb3IiLCJFcnJvciIsImRhdGEiLCJkb3dubG9hZERhdGEiLCJlc0luZGV4IiwiZXNUeXBlIiwic2V0SGVhZGVyIiwic2VuZCIsImVyciIsImVycm9yIiwiX2RlZmF1bHQiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL3NlcnZlci9kb3dubG9hZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0QXV0aEhlbHBlckluc3RhbmNlIGZyb20gJy4vYXV0aC9hdXRoSGVscGVyJztcbmltcG9ydCBoZWFkZXJQYXJzZXIgZnJvbSAnLi91dGlscy9oZWFkZXJQYXJzZXInO1xuaW1wb3J0IGVzSW5zdGFuY2UgZnJvbSAnLi9lcy9pbmRleCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IENvZGVkRXJyb3IgZnJvbSAnLi91dGlscy9lcnJvcic7XG5cbmNvbnN0IGRvd25sb2FkUm91dGVyID0gYXN5bmMgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG4gIGNvbnN0IHtcbiAgICB0eXBlLCBmaWx0ZXIsIHNvcnQsIGZpZWxkcywgYWNjZXNzaWJpbGl0eSxcbiAgfSA9IHJlcS5ib2R5O1xuXG4gIGxvZy5kZWJ1ZygnW2Rvd25sb2FkXSAnLCBKU09OLnN0cmluZ2lmeShyZXEuYm9keSwgbnVsbCwgNCkpO1xuICBjb25zdCBlc0luZGV4Q29uZmlnID0gZXNJbnN0YW5jZS5nZXRFU0luZGV4Q29uZmlnQnlUeXBlKHR5cGUpO1xuICBjb25zdCB0aWVyQWNjZXNzTGV2ZWwgPSAoY29uZmlnLnRpZXJBY2Nlc3NMZXZlbFxuICAgID8gY29uZmlnLnRpZXJBY2Nlc3NMZXZlbCA6IGVzSW5kZXhDb25maWcudGllcl9hY2Nlc3NfbGV2ZWwpO1xuICBjb25zdCBqd3QgPSBoZWFkZXJQYXJzZXIucGFyc2VKV1QocmVxKTtcbiAgY29uc3QgYXV0aEhlbHBlciA9IGF3YWl0IGdldEF1dGhIZWxwZXJJbnN0YW5jZShqd3QpO1xuXG4gIHRyeSB7XG4gICAgbGV0IGFwcGxpZWRGaWx0ZXI7XG4gICAgLyoqXG4gICAgICogVGllciBhY2Nlc3Mgc3RyYXRlZ3kgZm9yIGRvd25sb2FkIGVuZHBvaW50OlxuICAgICAqIDEuIGlmIHRoZSBkYXRhIGNvbW1vbnMgb3IgdGhlIGluZGV4IGlzIHByaXZhdGUsIGFkZCBhdXRoIGZpbHRlciBsYXllciBvbnRvIGZpbHRlclxuICAgICAqIDIuIGlmIHRoZSBkYXRhIGNvbW1vbnMgb3IgdGhlIGluZGV4IGlzIHJlZ3VsYXI6XG4gICAgICogICBhLiBpZiByZXF1ZXN0IGNvbnRhaW5zIG91dC1vZi1hY2Nlc3MgcmVzb3VyY2UsIHJldHVybiA0MDFcbiAgICAgKiAgIGIuIGlmIHJlcXVlc3QgY29udGFpbnMgb25seSBhY2Nlc3NpYmxlIHJlc291Y2VzLCByZXR1cm4gcmVzcG9uc2VcbiAgICAgKiAzLiBpZiB0aGUgZGF0YSBjb21tb25zIG9yIHRoZSBpbmRleCBpcyBsaWJyZSwgYWx3YXlzIHJldHVybiByZXBvbnNlIHdpdGhvdXQgYW55IGF1dGggY2hlY2tcbiAgICAgKi9cbiAgICBzd2l0Y2ggKHRpZXJBY2Nlc3NMZXZlbCkge1xuICAgICAgY2FzZSAncHJpdmF0ZSc6IHtcbiAgICAgICAgYXBwbGllZEZpbHRlciA9IGF1dGhIZWxwZXIuYXBwbHlBY2Nlc3NpYmxlRmlsdGVyKGZpbHRlcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAncmVndWxhcic6IHtcbiAgICAgICAgbG9nLmRlYnVnKCdbZG93bmxvYWRdIHJlZ3VsYXIgY29tbW9ucycpO1xuICAgICAgICBpZiAoYWNjZXNzaWJpbGl0eSA9PT0gJ2FjY2Vzc2libGUnKSB7XG4gICAgICAgICAgYXBwbGllZEZpbHRlciA9IGF1dGhIZWxwZXIuYXBwbHlBY2Nlc3NpYmxlRmlsdGVyKGZpbHRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qgb3V0T2ZTY29wZVJlc291cmNlTGlzdCA9IGF3YWl0IGF1dGhIZWxwZXIuZ2V0T3V0T2ZTY29wZVJlc291cmNlTGlzdChcbiAgICAgICAgICAgIGVzSW5kZXhDb25maWcuaW5kZXgsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgZmlsdGVyLFxuICAgICAgICAgICk7XG4gICAgICAgICAgLy8gaWYgcmVxdWVzdGluZyByZXNvdXJjZXMgPiBhbGxvd2VkIHJlc291cmNlcywgcmV0dXJuIDQwMSxcbiAgICAgICAgICBpZiAob3V0T2ZTY29wZVJlc291cmNlTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBsb2cuaW5mbygnW2Rvd25sb2FkXSByZXF1ZXN0aW5nIG91dC1vZi1zY29wZSByZXNvdXJjZXMsIHJldHVybiA0MDEnKTtcbiAgICAgICAgICAgIGxvZy5pbmZvKGBbZG93bmxvYWRdIHRoZSBmb2xsb3dpbmcgcmVzb3VyY2VzIGFyZSBvdXQtb2Ytc2NvcGU6IFske291dE9mU2NvcGVSZXNvdXJjZUxpc3Quam9pbignLCAnKX1dYCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29kZWRFcnJvcig0MDEsICdZb3UgZG9uXFwndCBoYXZlIGFjY2VzcyB0byBhbGwgdGhlIGRhdGEgeW91IGFyZSBxdWVyeWluZy4gVHJ5IHVzaW5nIFxcJ2FjY2Vzc2liaWxpdHk6IGFjY2Vzc2libGVcXCcgaW4geW91ciBxdWVyeScpO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIGVsc2UsIGdvIGFoZWFkIGRvd25sb2FkXG4gICAgICAgICAgICBhcHBsaWVkRmlsdGVyID0gZmlsdGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2xpYnJlJzoge1xuICAgICAgICBhcHBsaWVkRmlsdGVyID0gZmlsdGVyO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBUSUVSX0FDQ0VTU19MRVZFTCBcIiR7dGllckFjY2Vzc0xldmVsfVwiYCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBlc0luc3RhbmNlLmRvd25sb2FkRGF0YSh7XG4gICAgICBlc0luZGV4OiBlc0luZGV4Q29uZmlnLmluZGV4LCBlc1R5cGU6IHR5cGUsIGZpbHRlcjogYXBwbGllZEZpbHRlciwgc29ydCwgZmllbGRzLFxuICAgIH0pO1xuICAgIHJlcy5zZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04Jyk7XG4gICAgcmVzLnNlbmQoZGF0YSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvcihlcnIpO1xuICAgIG5leHQoZXJyKTtcbiAgfVxuICByZXR1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