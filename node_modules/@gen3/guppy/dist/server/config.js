"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _fs = require("fs");
var _logger = _interopRequireDefault(require("./logger"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

let inputConfig = {};
if (process.env.GUPPY_CONFIG_FILEPATH) {
  const configFilepath = process.env.GUPPY_CONFIG_FILEPATH;
  inputConfig = JSON.parse((0, _fs.readFileSync)(configFilepath).toString());
  _logger.default.info(
    '[config] read guppy config from',
    configFilepath,
    JSON.stringify(inputConfig, null, 4)
  );
}

const config = {
  esConfig: {
    host: 'localhost:9200',
    indices: inputConfig.indices || [
    {
      index: 'gen3-dev-subject',
      type: 'subject'
    },
    {
      index: 'gen3-dev-file',
      type: 'file'
    }],

    configIndex: inputConfig.indices ?
    inputConfig.config_index :
    'gen3-dev-config',
    authFilterField: inputConfig.auth_filter_field || 'auth_resource_path',
    aggregationIncludeMissingData:
    typeof inputConfig.aggs_include_missing_data === 'undefined' ?
    true :
    inputConfig.aggs_include_missing_data,
    missingDataAlias: inputConfig.missing_data_alias || 'no data'
  },
  port: 80,
  path: '/graphql',
  arboristEndpoint: 'http://arborist-service',
  tierAccessLevel: 'private',
  tierAccessLimit: 1000,
  tierAccessSensitiveRecordExclusionField:
  inputConfig.tier_access_sensitive_record_exclusion_field,
  logLevel: inputConfig.log_level || 'INFO',
  enableEncryptWhiteList:
  typeof inputConfig.enable_encrypt_whitelist === 'undefined' ?
  false :
  inputConfig.enable_encrypt_whitelist,
  encryptWhitelist: inputConfig.encrypt_whitelist || [
  '__missing__',
  'unknown',
  'not reported',
  'no data'],

  analyzedTextFieldSuffix: '.analyzed',
  matchedTextHighlightTagName: 'em',
  allowedMinimumSearchLen: 2,
  allowRefresh: inputConfig.allowRefresh || false
};

if (process.env.GEN3_ES_ENDPOINT) {
  config.esConfig.host = process.env.GEN3_ES_ENDPOINT;
}
if (!config.esConfig.host.startsWith('http')) {
  config.esConfig.host = `http://${config.esConfig.host}`;
}

if (process.env.GEN3_ARBORIST_ENDPOINT) {
  config.arboristEndpoint = process.env.GEN3_ARBORIST_ENDPOINT;
}

if (process.env.GUPPY_PORT) {
  config.port = process.env.GUPPY_PORT;
}

const allowedTierAccessLevels = ['private', 'regular', 'libre'];

if (process.env.TIER_ACCESS_LEVEL) {
  if (!allowedTierAccessLevels.includes(process.env.TIER_ACCESS_LEVEL)) {
    throw new Error(
      `Invalid TIER_ACCESS_LEVEL "${process.env.TIER_ACCESS_LEVEL}"`
    );
  }
  config.tierAccessLevel = process.env.TIER_ACCESS_LEVEL;
}

if (process.env.TIER_ACCESS_LIMIT) {
  config.tierAccessLimit = process.env.TIER_ACCESS_LIMIT;
}

if (process.env.INTERNAL_LOCAL_TEST) {
  config.internalLocalTest = process.env.INTERNAL_LOCAL_TEST;
}

if (process.env.LOG_LEVEL) {
  config.logLevel = process.env.LOG_LEVEL;
}

if (process.env.ANALYZED_TEXT_FIELD_SUFFIX) {
  config.analyzedTextFieldSuffix = process.env.ANALYZED_TEXT_FIELD_SUFFIX;
}

// Either all indices should have explicit index-scoped tiered-access values or
// the manifest should have a site-wide TIER_ACCESS_LEVEL value.
// This approach is backwards-compatible with commons configured for past versions of tiered-access.
let allIndicesHaveTierAccessSettings = true;
config.esConfig.indices.forEach((item) => {
  if (!item.tier_access_level && !config.tierAccessLevel) {
    throw new Error(
      'Either set all index-scoped tiered-access levels or a site-wide tiered-access level.'
    );
  }
  if (
  item.tier_access_level &&
  !allowedTierAccessLevels.includes(item.tier_access_level))
  {
    throw new Error(`tier_access_level invalid for index ${item.type}.`);
  }
  if (!item.tier_access_level) {
    allIndicesHaveTierAccessSettings = false;
  }
});

// If the indices all have settings, empty out the default
// site-wide TIER_ACCESS_LEVEL from the config.
if (allIndicesHaveTierAccessSettings) {
  delete config.tierAccessLevel;
}

// check whitelist is enabled
if (config.enableEncryptWhiteList) {
  if (typeof config.encryptWhitelist !== 'object') {
    config.encryptWhitelist = [config.encryptWhitelist];
  }
} else {
  config.encryptWhitelist = [];
}

_logger.default.setLogLevel(config.logLevel);
_logger.default.info(
  '[config] starting server using config',
  JSON.stringify(config, null, 4)
);var _default = exports.default =

config;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,