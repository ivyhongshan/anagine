"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _lodash = _interopRequireDefault(require("lodash"));
var _graphql = require("graphql");
var _const = require("./const");
var _config = _interopRequireDefault(require("../config"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const fromPathToNode = (esInstance, esIndex, path) => {
  let node = esInstance.fieldTypes[esIndex];
  if (path !== null && path !== undefined) {
    const nodes = path.split('.');
    nodes.forEach((n) => {
      if (n in node) {
        node = node[n].properties;
      } else {
        throw new _graphql.GraphQLError(`Field ${n} does not exist in ES index`, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }
    });
  }
  return node;
};

const mergeRangeOperations = (a, b) => {
  const merged = { ...a, ...b };

  Object.keys(merged).forEach((key) => {
    if (typeof merged[key] === 'object' && merged[key] !== null) {
      merged[key] = mergeRangeOperations(a[key], b[key]);
    }
  });

  return merged;
};

const getNumericTextType = (
esInstance,
esIndex,
field,
path) =>
{
  const node = fromPathToNode(esInstance, esIndex, path);
  if (!esInstance.fieldTypes[esIndex] || !node[field]) {
    throw new _graphql.GraphQLError('Please check your syntax for input "filter" argument', {
      extensions: {
        code: 'BAD_USER_INPUT'
      }
    });
  }
  const numericTextType = _const.esFieldNumericTextTypeMapping[node[field].type];
  if (typeof numericTextType === 'undefined') {
    throw new _graphql.GraphQLError(`ES type ${node[field].type} not supported.`, {
      extensions: {
        code: 'INTERNAL_SERVER_ERROR'
      }
    });
  }
  return numericTextType;
};

const getFilterItemForString = (op, pField, value, path) => {
  const field = path !== null && path !== undefined ? `${path}.${pField}` : pField;
  switch (op) {
    case '=':
    case 'eq':
    case 'EQ':
      // special case when missingDataAlias is in using
      if (_config.default.esConfig.aggregationIncludeMissingData &&
      value === _config.default.esConfig.missingDataAlias) {
        return {
          bool: {
            must_not: [
            {
              exists: {
                field
              }
            }]

          }
        };
      }
      return {
        term: {
          [field]: value
        }
      };
    case 'in':
    case 'IN':
      // if using missingDataAlias, we need to remove the missingDataAlias from filter values
      // and then add a must_not exists bool func to compensate missingDataAlias
      if (_config.default.esConfig.aggregationIncludeMissingData &&
      value.includes(_config.default.esConfig.missingDataAlias)) {
        const newValue = value.filter((element) => element !== _config.default.esConfig.missingDataAlias);
        return {
          bool: {
            should: [
            {
              bool: {
                must_not: [
                {
                  exists: {
                    field
                  }
                }]

              }
            },
            {
              terms: {
                [field]: newValue
              }
            }]

          }
        };
      }
      // if not using missingDataAlias or filter doesn't contain missingDataAlias
      return {
        terms: {
          [field]: value
        }
      };
    case '!=':
      return {
        bool: {
          must_not: [
          {
            term: {
              [field]: value
            }
          }]

        }
      };
    default:
      throw new _graphql.GraphQLError(`Invalid operation "${op}" in filter argument.`, {
        extensions: {
          code: 'BAD_USER_INPUT'
        }
      });
  }
};

const getFilterItemForNumbers = (op, pField, value, path) => {
  const field = path !== null && path !== undefined ? `${path}.${pField}` : pField;
  const rangeOperator = {
    '>': 'gt',
    gt: 'gt',
    GT: 'gt',
    '>=': 'gte',
    gte: 'gte',
    GTE: 'gte',
    '<': 'lt',
    lt: 'lt',
    LT: 'lt',
    '<=': 'lte',
    lte: 'lte',
    LTE: 'lte'
  };
  if (op in rangeOperator) {
    return {
      range: {
        [field]: { [rangeOperator[op]]: value }
      }
    };
  }
  if (op === '=' || op === 'eq' || op === 'EQ') {
    return {
      term: {
        [field]: value
      }
    };
  }
  if (op === 'IN' || op === 'in') {
    return {
      terms: {
        [field]: value
      }
    };
  }
  if (op === '!=') {
    return {
      bool: {
        should: [
        {
          range: {
            [field]: { gt: value }
          }
        },
        {
          range: {
            [field]: { lt: value }
          }
        }]

      }
    };
  }
  throw new _graphql.GraphQLError(`Invalid numeric operation "${op}" for field "${field}" in filter argument`, {
    extensions: {
      code: 'BAD_USER_INPUT'
    }
  });
};

const getESSearchFilterFragment = (esInstance, esIndex, fields, keyword) => {
  let analyzedFields = [`*${_config.default.analyzedTextFieldSuffix}`]; // search all fields by default
  if (typeof fields !== 'undefined') {
    if (typeof fields === 'string') {
      fields = [fields]; // eslint-disable-line no-param-reassign
    }
    // Check fields are valid
    fields.forEach((f) => {
      if (!esInstance.fieldTypes[esIndex]) {
        throw new _graphql.GraphQLError(`es index ${esIndex} doesn't exist`, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      } else if (!esInstance.fieldTypes[esIndex][f]) {
        throw new _graphql.GraphQLError(`invalid field ${f} in "filter" variable`, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }
    });
    analyzedFields = fields.map((f) => `${f}${_config.default.analyzedTextFieldSuffix}`);
  }
  return {
    multi_match: {
      query: keyword,
      fields: analyzedFields
    }
  };
};

/**
 * This function transfer graphql filter arg to ES filter object
 * It first parse graphql filter object recursively from top to down,
 * until reach the bottom level, it translate gql filter unit to ES filter unit.
 * And finally combines all filter units from down to top.
 * @param {ES} esInstance
 * @param {string} esIndex
 * @param {object} graphqlFilterObj
 * @param {string} aggsField - target agg field, only need for agg queries
 * @param {boolean} filterSelf - whether we want to filter this field or not,
 *                               only need for agg queries
 * @param {object} defaultAuthFilter - once graphqlFilterObj is empty,
 *                this function transfers and returns this auth filter as default
 * @param objPath: path to object
 */
const getFilterObj = (
esInstance,
esIndex,
graphqlFilterObj,
aggsField = null,
filterSelf = true,
defaultAuthFilter = null,
objPath = null) =>
{
  if (!graphqlFilterObj ||
  typeof Object.keys(graphqlFilterObj)[0] === 'undefined') {
    if (!defaultAuthFilter) {
      return null;
    }
    return getFilterObj(esInstance, esIndex, defaultAuthFilter);
  }
  const topLevelOp = Object.keys(graphqlFilterObj)[0];
  let resultFilterObj = {};
  const topLevelOpLowerCase = topLevelOp.toLowerCase();
  if (topLevelOpLowerCase === 'and' || topLevelOpLowerCase === 'or') {
    const boolConnectOp = topLevelOpLowerCase === 'and' ? 'must' : 'should';
    const boolItemsList = [];

    const filterRange = [];
    graphqlFilterObj[topLevelOp].forEach((filterItem) => {
      const filterObj = getFilterObj(
        esInstance,
        esIndex,
        filterItem,
        aggsField,
        filterSelf,
        defaultAuthFilter,
        objPath
      );
      if (filterObj) {
        if ('range' in filterObj) {
          filterRange.push(filterObj);
        } else {
          boolItemsList.push(filterObj);
        }
      }
    });

    if (filterRange.length === 1) {
      boolItemsList.push(filterRange[0]);
    }

    if (filterRange.length === 2) {
      boolItemsList.push(mergeRangeOperations(filterRange[0], filterRange[1]));
    }

    if (boolItemsList.length === 0) {
      resultFilterObj = null;
    } else {
      resultFilterObj = {
        bool: {
          [boolConnectOp]: boolItemsList
        }
      };
    }
  } else if (topLevelOpLowerCase === 'search') {
    if (!('keyword' in graphqlFilterObj[topLevelOp])) {// "keyword" required
      throw new _graphql.GraphQLError('Invalid search filter syntax: missing \'keyword\' field', {
        extensions: {
          code: 'BAD_USER_INPUT'
        }
      });
    }
    Object.keys(graphqlFilterObj[topLevelOp]).forEach((o) => {// check filter syntax
      if (o !== 'keyword' && o !== 'fields') {
        throw new _graphql.GraphQLError(`Invalid search filter syntax: unrecognized field '${o}'`, {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }
    });
    const targetSearchKeyword = graphqlFilterObj[topLevelOp].keyword;
    if (targetSearchKeyword.length < _config.default.allowedMinimumSearchLen) {
      throw new _graphql.GraphQLError(`Keyword too short (length < ${_config.default.allowedMinimumSearchLen}`, {
        extensions: {
          code: 'BAD_USER_INPUT'
        }
      });
    }
    const targetSearchFields = graphqlFilterObj[topLevelOp].fields;
    resultFilterObj = getESSearchFilterFragment(
      esInstance,
      esIndex,
      targetSearchFields,
      targetSearchKeyword
    );
  } else if (topLevelOpLowerCase === 'nested') {
    const { path } = graphqlFilterObj[topLevelOp];
    const filterOpObj = Object.keys(graphqlFilterObj[topLevelOp]).
    filter((key) => key !== 'path').
    reduce((o, k) => ({ ...o, [k]: graphqlFilterObj[topLevelOp][k] }), {});
    if (_lodash.default.findKey(filterOpObj, aggsField) && !filterSelf) {
      // if `aggsField` is in the nested filter object AND `filterSelf` flag is false,
      // should not filter the target field itself,
      // instead, only apply an auth filter if exists
      return getFilterObj(esInstance, esIndex, defaultAuthFilter);
    }

    const nestedFilter = getFilterObj(
      esInstance,
      esIndex,
      filterOpObj,
      aggsField,
      filterSelf,
      defaultAuthFilter,
      path
    );
    if (nestedFilter != null) {
      resultFilterObj = {
        nested: {
          path,
          query: nestedFilter
        }
      };
    } else {
      resultFilterObj = null;
    }
  } else {
    const field = Object.keys(graphqlFilterObj[topLevelOp])[0];
    if (aggsField === field && !filterSelf) {
      // if `filterSelf` flag is false, should not filter the target field itself,
      // instead, only apply an auth filter if exists
      return getFilterObj(esInstance, esIndex, defaultAuthFilter);
    }
    const value = graphqlFilterObj[topLevelOp][field];
    const numericOrTextType = getNumericTextType(esInstance, esIndex, field, objPath);
    if (numericOrTextType === _const.NumericTextTypeTypeEnum.ES_TEXT_TYPE) {
      resultFilterObj = getFilterItemForString(topLevelOp, field, value, objPath);
    } else if (numericOrTextType === _const.NumericTextTypeTypeEnum.ES_NUMERIC_TYPE) {
      resultFilterObj = getFilterItemForNumbers(topLevelOp, field, value, objPath);
    } else {
      throw new _graphql.GraphQLError(`Invalid es field type ${numericOrTextType}`, {
        extensions: {
          code: 'INTERNAL_SERVER_ERROR'
        }
      });
    }
  }
  return resultFilterObj;
};var _default = exports.default =

getFilterObj;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbG9kYXNoIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZ3JhcGhxbCIsIl9jb25zdCIsIl9jb25maWciLCJlIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmcm9tUGF0aFRvTm9kZSIsImVzSW5zdGFuY2UiLCJlc0luZGV4IiwicGF0aCIsIm5vZGUiLCJmaWVsZFR5cGVzIiwidW5kZWZpbmVkIiwibm9kZXMiLCJzcGxpdCIsImZvckVhY2giLCJuIiwicHJvcGVydGllcyIsIkdyYXBoUUxFcnJvciIsImV4dGVuc2lvbnMiLCJjb2RlIiwibWVyZ2VSYW5nZU9wZXJhdGlvbnMiLCJhIiwiYiIsIm1lcmdlZCIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJnZXROdW1lcmljVGV4dFR5cGUiLCJmaWVsZCIsIm51bWVyaWNUZXh0VHlwZSIsImVzRmllbGROdW1lcmljVGV4dFR5cGVNYXBwaW5nIiwidHlwZSIsImdldEZpbHRlckl0ZW1Gb3JTdHJpbmciLCJvcCIsInBGaWVsZCIsInZhbHVlIiwiY29uZmlnIiwiZXNDb25maWciLCJhZ2dyZWdhdGlvbkluY2x1ZGVNaXNzaW5nRGF0YSIsIm1pc3NpbmdEYXRhQWxpYXMiLCJib29sIiwibXVzdF9ub3QiLCJleGlzdHMiLCJ0ZXJtIiwiaW5jbHVkZXMiLCJuZXdWYWx1ZSIsImZpbHRlciIsImVsZW1lbnQiLCJzaG91bGQiLCJ0ZXJtcyIsImdldEZpbHRlckl0ZW1Gb3JOdW1iZXJzIiwicmFuZ2VPcGVyYXRvciIsImd0IiwiR1QiLCJndGUiLCJHVEUiLCJsdCIsIkxUIiwibHRlIiwiTFRFIiwicmFuZ2UiLCJnZXRFU1NlYXJjaEZpbHRlckZyYWdtZW50IiwiZmllbGRzIiwia2V5d29yZCIsImFuYWx5emVkRmllbGRzIiwiYW5hbHl6ZWRUZXh0RmllbGRTdWZmaXgiLCJmIiwibWFwIiwibXVsdGlfbWF0Y2giLCJxdWVyeSIsImdldEZpbHRlck9iaiIsImdyYXBocWxGaWx0ZXJPYmoiLCJhZ2dzRmllbGQiLCJmaWx0ZXJTZWxmIiwiZGVmYXVsdEF1dGhGaWx0ZXIiLCJvYmpQYXRoIiwidG9wTGV2ZWxPcCIsInJlc3VsdEZpbHRlck9iaiIsInRvcExldmVsT3BMb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsImJvb2xDb25uZWN0T3AiLCJib29sSXRlbXNMaXN0IiwiZmlsdGVyUmFuZ2UiLCJmaWx0ZXJJdGVtIiwiZmlsdGVyT2JqIiwicHVzaCIsImxlbmd0aCIsIm8iLCJ0YXJnZXRTZWFyY2hLZXl3b3JkIiwiYWxsb3dlZE1pbmltdW1TZWFyY2hMZW4iLCJ0YXJnZXRTZWFyY2hGaWVsZHMiLCJmaWx0ZXJPcE9iaiIsInJlZHVjZSIsImsiLCJfIiwiZmluZEtleSIsIm5lc3RlZEZpbHRlciIsIm5lc3RlZCIsIm51bWVyaWNPclRleHRUeXBlIiwiTnVtZXJpY1RleHRUeXBlVHlwZUVudW0iLCJFU19URVhUX1RZUEUiLCJFU19OVU1FUklDX1RZUEUiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2VydmVyL2VzL2ZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBlc0ZpZWxkTnVtZXJpY1RleHRUeXBlTWFwcGluZywgTnVtZXJpY1RleHRUeXBlVHlwZUVudW0gfSBmcm9tICcuL2NvbnN0JztcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlnJztcblxuY29uc3QgZnJvbVBhdGhUb05vZGUgPSAoZXNJbnN0YW5jZSwgZXNJbmRleCwgcGF0aCkgPT4ge1xuICBsZXQgbm9kZSA9IGVzSW5zdGFuY2UuZmllbGRUeXBlc1tlc0luZGV4XTtcbiAgaWYgKHBhdGggIT09IG51bGwgJiYgcGF0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3Qgbm9kZXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgbm9kZXMuZm9yRWFjaCgobikgPT4ge1xuICAgICAgaWYgKG4gaW4gbm9kZSkge1xuICAgICAgICBub2RlID0gbm9kZVtuXS5wcm9wZXJ0aWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihgRmllbGQgJHtufSBkb2VzIG5vdCBleGlzdCBpbiBFUyBpbmRleGAsIHtcbiAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICBjb2RlOiAnQkFEX1VTRVJfSU5QVVQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub2RlO1xufTtcblxuY29uc3QgbWVyZ2VSYW5nZU9wZXJhdGlvbnMgPSAoYSwgYikgPT4ge1xuICBjb25zdCBtZXJnZWQgPSB7IC4uLmEsIC4uLmIgfTtcblxuICBPYmplY3Qua2V5cyhtZXJnZWQpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGlmICh0eXBlb2YgbWVyZ2VkW2tleV0gPT09ICdvYmplY3QnICYmIG1lcmdlZFtrZXldICE9PSBudWxsKSB7XG4gICAgICBtZXJnZWRba2V5XSA9IG1lcmdlUmFuZ2VPcGVyYXRpb25zKGFba2V5XSwgYltrZXldKTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBtZXJnZWQ7XG59O1xuXG5jb25zdCBnZXROdW1lcmljVGV4dFR5cGUgPSAoXG4gIGVzSW5zdGFuY2UsXG4gIGVzSW5kZXgsXG4gIGZpZWxkLFxuICBwYXRoLFxuKSA9PiB7XG4gIGNvbnN0IG5vZGUgPSBmcm9tUGF0aFRvTm9kZShlc0luc3RhbmNlLCBlc0luZGV4LCBwYXRoKTtcbiAgaWYgKCFlc0luc3RhbmNlLmZpZWxkVHlwZXNbZXNJbmRleF0gfHwgIW5vZGVbZmllbGRdKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignUGxlYXNlIGNoZWNrIHlvdXIgc3ludGF4IGZvciBpbnB1dCBcImZpbHRlclwiIGFyZ3VtZW50Jywge1xuICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICBjb2RlOiAnQkFEX1VTRVJfSU5QVVQnLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuICBjb25zdCBudW1lcmljVGV4dFR5cGUgPSBlc0ZpZWxkTnVtZXJpY1RleHRUeXBlTWFwcGluZ1tub2RlW2ZpZWxkXS50eXBlXTtcbiAgaWYgKHR5cGVvZiBudW1lcmljVGV4dFR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihgRVMgdHlwZSAke25vZGVbZmllbGRdLnR5cGV9IG5vdCBzdXBwb3J0ZWQuYCwge1xuICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG51bWVyaWNUZXh0VHlwZTtcbn07XG5cbmNvbnN0IGdldEZpbHRlckl0ZW1Gb3JTdHJpbmcgPSAob3AsIHBGaWVsZCwgdmFsdWUsIHBhdGgpID0+IHtcbiAgY29uc3QgZmllbGQgPSAocGF0aCAhPT0gbnVsbCAmJiBwYXRoICE9PSB1bmRlZmluZWQpID8gYCR7cGF0aH0uJHtwRmllbGR9YCA6IHBGaWVsZDtcbiAgc3dpdGNoIChvcCkge1xuICAgIGNhc2UgJz0nOlxuICAgIGNhc2UgJ2VxJzpcbiAgICBjYXNlICdFUSc6XG4gICAgICAvLyBzcGVjaWFsIGNhc2Ugd2hlbiBtaXNzaW5nRGF0YUFsaWFzIGlzIGluIHVzaW5nXG4gICAgICBpZiAoY29uZmlnLmVzQ29uZmlnLmFnZ3JlZ2F0aW9uSW5jbHVkZU1pc3NpbmdEYXRhXG4gICAgICAgICYmIHZhbHVlID09PSBjb25maWcuZXNDb25maWcubWlzc2luZ0RhdGFBbGlhcykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGJvb2w6IHtcbiAgICAgICAgICAgIG11c3Rfbm90OiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBleGlzdHM6IHtcbiAgICAgICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXJtOiB7XG4gICAgICAgICAgW2ZpZWxkXTogdmFsdWUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIGNhc2UgJ2luJzpcbiAgICBjYXNlICdJTic6XG4gICAgICAvLyBpZiB1c2luZyBtaXNzaW5nRGF0YUFsaWFzLCB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgbWlzc2luZ0RhdGFBbGlhcyBmcm9tIGZpbHRlciB2YWx1ZXNcbiAgICAgIC8vIGFuZCB0aGVuIGFkZCBhIG11c3Rfbm90IGV4aXN0cyBib29sIGZ1bmMgdG8gY29tcGVuc2F0ZSBtaXNzaW5nRGF0YUFsaWFzXG4gICAgICBpZiAoY29uZmlnLmVzQ29uZmlnLmFnZ3JlZ2F0aW9uSW5jbHVkZU1pc3NpbmdEYXRhXG4gICAgICAgICYmIHZhbHVlLmluY2x1ZGVzKGNvbmZpZy5lc0NvbmZpZy5taXNzaW5nRGF0YUFsaWFzKSkge1xuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlLmZpbHRlcigoZWxlbWVudCkgPT4gZWxlbWVudCAhPT0gY29uZmlnLmVzQ29uZmlnLm1pc3NpbmdEYXRhQWxpYXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGJvb2w6IHtcbiAgICAgICAgICAgIHNob3VsZDogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYm9vbDoge1xuICAgICAgICAgICAgICAgICAgbXVzdF9ub3Q6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGV4aXN0czoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRlcm1zOiB7XG4gICAgICAgICAgICAgICAgICBbZmllbGRdOiBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgLy8gaWYgbm90IHVzaW5nIG1pc3NpbmdEYXRhQWxpYXMgb3IgZmlsdGVyIGRvZXNuJ3QgY29udGFpbiBtaXNzaW5nRGF0YUFsaWFzXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0ZXJtczoge1xuICAgICAgICAgIFtmaWVsZF06IHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBjYXNlICchPSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBib29sOiB7XG4gICAgICAgICAgbXVzdF9ub3Q6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGVybToge1xuICAgICAgICAgICAgICAgIFtmaWVsZF06IHZhbHVlLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdLFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihgSW52YWxpZCBvcGVyYXRpb24gXCIke29wfVwiIGluIGZpbHRlciBhcmd1bWVudC5gLCB7XG4gICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICBjb2RlOiAnQkFEX1VTRVJfSU5QVVQnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gIH1cbn07XG5cbmNvbnN0IGdldEZpbHRlckl0ZW1Gb3JOdW1iZXJzID0gKG9wLCBwRmllbGQsIHZhbHVlLCBwYXRoKSA9PiB7XG4gIGNvbnN0IGZpZWxkID0gKHBhdGggIT09IG51bGwgJiYgcGF0aCAhPT0gdW5kZWZpbmVkKSA/IGAke3BhdGh9LiR7cEZpZWxkfWAgOiBwRmllbGQ7XG4gIGNvbnN0IHJhbmdlT3BlcmF0b3IgPSB7XG4gICAgJz4nOiAnZ3QnLFxuICAgIGd0OiAnZ3QnLFxuICAgIEdUOiAnZ3QnLFxuICAgICc+PSc6ICdndGUnLFxuICAgIGd0ZTogJ2d0ZScsXG4gICAgR1RFOiAnZ3RlJyxcbiAgICAnPCc6ICdsdCcsXG4gICAgbHQ6ICdsdCcsXG4gICAgTFQ6ICdsdCcsXG4gICAgJzw9JzogJ2x0ZScsXG4gICAgbHRlOiAnbHRlJyxcbiAgICBMVEU6ICdsdGUnLFxuICB9O1xuICBpZiAob3AgaW4gcmFuZ2VPcGVyYXRvcikge1xuICAgIHJldHVybiB7XG4gICAgICByYW5nZToge1xuICAgICAgICBbZmllbGRdOiB7IFtyYW5nZU9wZXJhdG9yW29wXV06IHZhbHVlIH0sXG4gICAgICB9LFxuICAgIH07XG4gIH1cbiAgaWYgKG9wID09PSAnPScgfHwgb3AgPT09ICdlcScgfHwgb3AgPT09ICdFUScpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVybToge1xuICAgICAgICBbZmllbGRdOiB2YWx1ZSxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBpZiAob3AgPT09ICdJTicgfHwgb3AgPT09ICdpbicpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGVybXM6IHtcbiAgICAgICAgW2ZpZWxkXTogdmFsdWUsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbiAgaWYgKG9wID09PSAnIT0nKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvb2w6IHtcbiAgICAgICAgc2hvdWxkOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmFuZ2U6IHtcbiAgICAgICAgICAgICAgW2ZpZWxkXTogeyBndDogdmFsdWUgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgICBbZmllbGRdOiB7IGx0OiB2YWx1ZSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG4gIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoYEludmFsaWQgbnVtZXJpYyBvcGVyYXRpb24gXCIke29wfVwiIGZvciBmaWVsZCBcIiR7ZmllbGR9XCIgaW4gZmlsdGVyIGFyZ3VtZW50YCwge1xuICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgIGNvZGU6ICdCQURfVVNFUl9JTlBVVCcsXG4gICAgfSxcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRFU1NlYXJjaEZpbHRlckZyYWdtZW50ID0gKGVzSW5zdGFuY2UsIGVzSW5kZXgsIGZpZWxkcywga2V5d29yZCkgPT4ge1xuICBsZXQgYW5hbHl6ZWRGaWVsZHMgPSBbYCoke2NvbmZpZy5hbmFseXplZFRleHRGaWVsZFN1ZmZpeH1gXTsgLy8gc2VhcmNoIGFsbCBmaWVsZHMgYnkgZGVmYXVsdFxuICBpZiAodHlwZW9mIGZpZWxkcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGZpZWxkcyA9IFtmaWVsZHNdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgfVxuICAgIC8vIENoZWNrIGZpZWxkcyBhcmUgdmFsaWRcbiAgICBmaWVsZHMuZm9yRWFjaCgoZikgPT4ge1xuICAgICAgaWYgKCFlc0luc3RhbmNlLmZpZWxkVHlwZXNbZXNJbmRleF0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihgZXMgaW5kZXggJHtlc0luZGV4fSBkb2Vzbid0IGV4aXN0YCwge1xuICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgIGNvZGU6ICdCQURfVVNFUl9JTlBVVCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKCFlc0luc3RhbmNlLmZpZWxkVHlwZXNbZXNJbmRleF1bZl0pIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihgaW52YWxpZCBmaWVsZCAke2Z9IGluIFwiZmlsdGVyXCIgdmFyaWFibGVgLCB7XG4gICAgICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICAgICAgY29kZTogJ0JBRF9VU0VSX0lOUFVUJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBhbmFseXplZEZpZWxkcyA9IGZpZWxkcy5tYXAoKGYpID0+IGAke2Z9JHtjb25maWcuYW5hbHl6ZWRUZXh0RmllbGRTdWZmaXh9YCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBtdWx0aV9tYXRjaDoge1xuICAgICAgcXVlcnk6IGtleXdvcmQsXG4gICAgICBmaWVsZHM6IGFuYWx5emVkRmllbGRzLFxuICAgIH0sXG4gIH07XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gdHJhbnNmZXIgZ3JhcGhxbCBmaWx0ZXIgYXJnIHRvIEVTIGZpbHRlciBvYmplY3RcbiAqIEl0IGZpcnN0IHBhcnNlIGdyYXBocWwgZmlsdGVyIG9iamVjdCByZWN1cnNpdmVseSBmcm9tIHRvcCB0byBkb3duLFxuICogdW50aWwgcmVhY2ggdGhlIGJvdHRvbSBsZXZlbCwgaXQgdHJhbnNsYXRlIGdxbCBmaWx0ZXIgdW5pdCB0byBFUyBmaWx0ZXIgdW5pdC5cbiAqIEFuZCBmaW5hbGx5IGNvbWJpbmVzIGFsbCBmaWx0ZXIgdW5pdHMgZnJvbSBkb3duIHRvIHRvcC5cbiAqIEBwYXJhbSB7RVN9IGVzSW5zdGFuY2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBlc0luZGV4XG4gKiBAcGFyYW0ge29iamVjdH0gZ3JhcGhxbEZpbHRlck9ialxuICogQHBhcmFtIHtzdHJpbmd9IGFnZ3NGaWVsZCAtIHRhcmdldCBhZ2cgZmllbGQsIG9ubHkgbmVlZCBmb3IgYWdnIHF1ZXJpZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZmlsdGVyU2VsZiAtIHdoZXRoZXIgd2Ugd2FudCB0byBmaWx0ZXIgdGhpcyBmaWVsZCBvciBub3QsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmx5IG5lZWQgZm9yIGFnZyBxdWVyaWVzXG4gKiBAcGFyYW0ge29iamVjdH0gZGVmYXVsdEF1dGhGaWx0ZXIgLSBvbmNlIGdyYXBocWxGaWx0ZXJPYmogaXMgZW1wdHksXG4gKiAgICAgICAgICAgICAgICB0aGlzIGZ1bmN0aW9uIHRyYW5zZmVycyBhbmQgcmV0dXJucyB0aGlzIGF1dGggZmlsdGVyIGFzIGRlZmF1bHRcbiAqIEBwYXJhbSBvYmpQYXRoOiBwYXRoIHRvIG9iamVjdFxuICovXG5jb25zdCBnZXRGaWx0ZXJPYmogPSAoXG4gIGVzSW5zdGFuY2UsXG4gIGVzSW5kZXgsXG4gIGdyYXBocWxGaWx0ZXJPYmosXG4gIGFnZ3NGaWVsZCA9IG51bGwsXG4gIGZpbHRlclNlbGYgPSB0cnVlLFxuICBkZWZhdWx0QXV0aEZpbHRlciA9IG51bGwsXG4gIG9ialBhdGggPSBudWxsLFxuKSA9PiB7XG4gIGlmICghZ3JhcGhxbEZpbHRlck9ialxuICAgIHx8IHR5cGVvZiBPYmplY3Qua2V5cyhncmFwaHFsRmlsdGVyT2JqKVswXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoIWRlZmF1bHRBdXRoRmlsdGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGdldEZpbHRlck9iaihlc0luc3RhbmNlLCBlc0luZGV4LCBkZWZhdWx0QXV0aEZpbHRlcik7XG4gIH1cbiAgY29uc3QgdG9wTGV2ZWxPcCA9IE9iamVjdC5rZXlzKGdyYXBocWxGaWx0ZXJPYmopWzBdO1xuICBsZXQgcmVzdWx0RmlsdGVyT2JqID0ge307XG4gIGNvbnN0IHRvcExldmVsT3BMb3dlckNhc2UgPSB0b3BMZXZlbE9wLnRvTG93ZXJDYXNlKCk7XG4gIGlmICh0b3BMZXZlbE9wTG93ZXJDYXNlID09PSAnYW5kJyB8fCB0b3BMZXZlbE9wTG93ZXJDYXNlID09PSAnb3InKSB7XG4gICAgY29uc3QgYm9vbENvbm5lY3RPcCA9IHRvcExldmVsT3BMb3dlckNhc2UgPT09ICdhbmQnID8gJ211c3QnIDogJ3Nob3VsZCc7XG4gICAgY29uc3QgYm9vbEl0ZW1zTGlzdCA9IFtdO1xuXG4gICAgY29uc3QgZmlsdGVyUmFuZ2UgPSBbXTtcbiAgICBncmFwaHFsRmlsdGVyT2JqW3RvcExldmVsT3BdLmZvckVhY2goKGZpbHRlckl0ZW0pID0+IHtcbiAgICAgIGNvbnN0IGZpbHRlck9iaiA9IGdldEZpbHRlck9iaihcbiAgICAgICAgZXNJbnN0YW5jZSxcbiAgICAgICAgZXNJbmRleCxcbiAgICAgICAgZmlsdGVySXRlbSxcbiAgICAgICAgYWdnc0ZpZWxkLFxuICAgICAgICBmaWx0ZXJTZWxmLFxuICAgICAgICBkZWZhdWx0QXV0aEZpbHRlcixcbiAgICAgICAgb2JqUGF0aCxcbiAgICAgICk7XG4gICAgICBpZiAoZmlsdGVyT2JqKSB7XG4gICAgICAgIGlmICgncmFuZ2UnIGluIGZpbHRlck9iaikge1xuICAgICAgICAgIGZpbHRlclJhbmdlLnB1c2goZmlsdGVyT2JqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib29sSXRlbXNMaXN0LnB1c2goZmlsdGVyT2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGZpbHRlclJhbmdlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgYm9vbEl0ZW1zTGlzdC5wdXNoKGZpbHRlclJhbmdlWzBdKTtcbiAgICB9XG5cbiAgICBpZiAoZmlsdGVyUmFuZ2UubGVuZ3RoID09PSAyKSB7XG4gICAgICBib29sSXRlbXNMaXN0LnB1c2gobWVyZ2VSYW5nZU9wZXJhdGlvbnMoZmlsdGVyUmFuZ2VbMF0sIGZpbHRlclJhbmdlWzFdKSk7XG4gICAgfVxuXG4gICAgaWYgKGJvb2xJdGVtc0xpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXN1bHRGaWx0ZXJPYmogPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRGaWx0ZXJPYmogPSB7XG4gICAgICAgIGJvb2w6IHtcbiAgICAgICAgICBbYm9vbENvbm5lY3RPcF06IGJvb2xJdGVtc0xpc3QsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIGlmICh0b3BMZXZlbE9wTG93ZXJDYXNlID09PSAnc2VhcmNoJykge1xuICAgIGlmICghKCdrZXl3b3JkJyBpbiBncmFwaHFsRmlsdGVyT2JqW3RvcExldmVsT3BdKSkgeyAvLyBcImtleXdvcmRcIiByZXF1aXJlZFxuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignSW52YWxpZCBzZWFyY2ggZmlsdGVyIHN5bnRheDogbWlzc2luZyBcXCdrZXl3b3JkXFwnIGZpZWxkJywge1xuICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgY29kZTogJ0JBRF9VU0VSX0lOUFVUJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhncmFwaHFsRmlsdGVyT2JqW3RvcExldmVsT3BdKS5mb3JFYWNoKChvKSA9PiB7IC8vIGNoZWNrIGZpbHRlciBzeW50YXhcbiAgICAgIGlmIChvICE9PSAna2V5d29yZCcgJiYgbyAhPT0gJ2ZpZWxkcycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihgSW52YWxpZCBzZWFyY2ggZmlsdGVyIHN5bnRheDogdW5yZWNvZ25pemVkIGZpZWxkICcke299J2AsIHtcbiAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICBjb2RlOiAnQkFEX1VTRVJfSU5QVVQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IHRhcmdldFNlYXJjaEtleXdvcmQgPSBncmFwaHFsRmlsdGVyT2JqW3RvcExldmVsT3BdLmtleXdvcmQ7XG4gICAgaWYgKHRhcmdldFNlYXJjaEtleXdvcmQubGVuZ3RoIDwgY29uZmlnLmFsbG93ZWRNaW5pbXVtU2VhcmNoTGVuKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKGBLZXl3b3JkIHRvbyBzaG9ydCAobGVuZ3RoIDwgJHtjb25maWcuYWxsb3dlZE1pbmltdW1TZWFyY2hMZW59YCwge1xuICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgY29kZTogJ0JBRF9VU0VSX0lOUFVUJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRTZWFyY2hGaWVsZHMgPSBncmFwaHFsRmlsdGVyT2JqW3RvcExldmVsT3BdLmZpZWxkcztcbiAgICByZXN1bHRGaWx0ZXJPYmogPSBnZXRFU1NlYXJjaEZpbHRlckZyYWdtZW50KFxuICAgICAgZXNJbnN0YW5jZSxcbiAgICAgIGVzSW5kZXgsXG4gICAgICB0YXJnZXRTZWFyY2hGaWVsZHMsXG4gICAgICB0YXJnZXRTZWFyY2hLZXl3b3JkLFxuICAgICk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxPcExvd2VyQ2FzZSA9PT0gJ25lc3RlZCcpIHtcbiAgICBjb25zdCB7IHBhdGggfSA9IGdyYXBocWxGaWx0ZXJPYmpbdG9wTGV2ZWxPcF07XG4gICAgY29uc3QgZmlsdGVyT3BPYmogPSBPYmplY3Qua2V5cyhncmFwaHFsRmlsdGVyT2JqW3RvcExldmVsT3BdKVxuICAgICAgLmZpbHRlcigoa2V5KSA9PiBrZXkgIT09ICdwYXRoJylcbiAgICAgIC5yZWR1Y2UoKG8sIGspID0+ICh7IC4uLm8sIFtrXTogZ3JhcGhxbEZpbHRlck9ialt0b3BMZXZlbE9wXVtrXSB9KSwge30pO1xuICAgIGlmIChfLmZpbmRLZXkoZmlsdGVyT3BPYmosIGFnZ3NGaWVsZCkgJiYgIWZpbHRlclNlbGYpIHtcbiAgICAgIC8vIGlmIGBhZ2dzRmllbGRgIGlzIGluIHRoZSBuZXN0ZWQgZmlsdGVyIG9iamVjdCBBTkQgYGZpbHRlclNlbGZgIGZsYWcgaXMgZmFsc2UsXG4gICAgICAvLyBzaG91bGQgbm90IGZpbHRlciB0aGUgdGFyZ2V0IGZpZWxkIGl0c2VsZixcbiAgICAgIC8vIGluc3RlYWQsIG9ubHkgYXBwbHkgYW4gYXV0aCBmaWx0ZXIgaWYgZXhpc3RzXG4gICAgICByZXR1cm4gZ2V0RmlsdGVyT2JqKGVzSW5zdGFuY2UsIGVzSW5kZXgsIGRlZmF1bHRBdXRoRmlsdGVyKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXN0ZWRGaWx0ZXIgPSBnZXRGaWx0ZXJPYmooXG4gICAgICBlc0luc3RhbmNlLFxuICAgICAgZXNJbmRleCxcbiAgICAgIGZpbHRlck9wT2JqLFxuICAgICAgYWdnc0ZpZWxkLFxuICAgICAgZmlsdGVyU2VsZixcbiAgICAgIGRlZmF1bHRBdXRoRmlsdGVyLFxuICAgICAgcGF0aCxcbiAgICApO1xuICAgIGlmIChuZXN0ZWRGaWx0ZXIgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0RmlsdGVyT2JqID0ge1xuICAgICAgICBuZXN0ZWQ6IHtcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIHF1ZXJ5OiBuZXN0ZWRGaWx0ZXIsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRGaWx0ZXJPYmogPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBmaWVsZCA9IE9iamVjdC5rZXlzKGdyYXBocWxGaWx0ZXJPYmpbdG9wTGV2ZWxPcF0pWzBdO1xuICAgIGlmIChhZ2dzRmllbGQgPT09IGZpZWxkICYmICFmaWx0ZXJTZWxmKSB7XG4gICAgICAvLyBpZiBgZmlsdGVyU2VsZmAgZmxhZyBpcyBmYWxzZSwgc2hvdWxkIG5vdCBmaWx0ZXIgdGhlIHRhcmdldCBmaWVsZCBpdHNlbGYsXG4gICAgICAvLyBpbnN0ZWFkLCBvbmx5IGFwcGx5IGFuIGF1dGggZmlsdGVyIGlmIGV4aXN0c1xuICAgICAgcmV0dXJuIGdldEZpbHRlck9iaihlc0luc3RhbmNlLCBlc0luZGV4LCBkZWZhdWx0QXV0aEZpbHRlcik7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gZ3JhcGhxbEZpbHRlck9ialt0b3BMZXZlbE9wXVtmaWVsZF07XG4gICAgY29uc3QgbnVtZXJpY09yVGV4dFR5cGUgPSBnZXROdW1lcmljVGV4dFR5cGUoZXNJbnN0YW5jZSwgZXNJbmRleCwgZmllbGQsIG9ialBhdGgpO1xuICAgIGlmIChudW1lcmljT3JUZXh0VHlwZSA9PT0gTnVtZXJpY1RleHRUeXBlVHlwZUVudW0uRVNfVEVYVF9UWVBFKSB7XG4gICAgICByZXN1bHRGaWx0ZXJPYmogPSBnZXRGaWx0ZXJJdGVtRm9yU3RyaW5nKHRvcExldmVsT3AsIGZpZWxkLCB2YWx1ZSwgb2JqUGF0aCk7XG4gICAgfSBlbHNlIGlmIChudW1lcmljT3JUZXh0VHlwZSA9PT0gTnVtZXJpY1RleHRUeXBlVHlwZUVudW0uRVNfTlVNRVJJQ19UWVBFKSB7XG4gICAgICByZXN1bHRGaWx0ZXJPYmogPSBnZXRGaWx0ZXJJdGVtRm9yTnVtYmVycyh0b3BMZXZlbE9wLCBmaWVsZCwgdmFsdWUsIG9ialBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKGBJbnZhbGlkIGVzIGZpZWxkIHR5cGUgJHtudW1lcmljT3JUZXh0VHlwZX1gLCB7XG4gICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICBjb2RlOiAnSU5URVJOQUxfU0VSVkVSX0VSUk9SJyxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0RmlsdGVyT2JqO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0RmlsdGVyT2JqO1xuIl0sIm1hcHBpbmdzIjoib0dBQUEsSUFBQUEsT0FBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsUUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsTUFBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsT0FBQSxHQUFBSixzQkFBQSxDQUFBQyxPQUFBLGVBQStCLFNBQUFELHVCQUFBSyxDQUFBLFVBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBOztBQUUvQixNQUFNRyxjQUFjLEdBQUdBLENBQUNDLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxJQUFJLEtBQUs7RUFDcEQsSUFBSUMsSUFBSSxHQUFHSCxVQUFV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