"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _graphql = require("graphql");

/**
 * Transfer graphql sort arg to ES sort object
 * e.g.: input graphql sort arg
 * [{ gender: 'asc' }, { 'visits.visit_label': 'asc' }]
 * output ES sort object
 * [
 *     {
 *      gender: {
 *         order: 'asc',
 *       },
 *     },
 *     {
 *       'visits.visit_label': {
 *         nested: {
 *           path: 'visits',
 *         },
 *         order: 'asc',
 *       },
 *     }
 * ]
 * @param {object} graphqlSort
 * @returns a ES sort object
 */
const getESSortBody = (graphqlSort, esInstance, esIndex) => {
  const sortBody = [];
  if (typeof graphqlSort !== 'undefined') {
    let graphqlSortObj = graphqlSort;
    if (typeof graphqlSort.length === 'undefined') {
      graphqlSortObj = Object.keys(graphqlSort).map((field) => ({ [field]: graphqlSort[field] }));
    }
    // check fields and sort methods are valid
    for (let i = 0; i < graphqlSortObj.length; i += 1) {
      if (!graphqlSortObj[i] || Object.keys(graphqlSortObj[i]).length !== 1) {
        throw new _graphql.GraphQLError('Invalid sort argument', {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }
      const field = Object.keys(graphqlSortObj[i])[0];
      const method = graphqlSortObj[i][field];
      if (method !== 'asc' && method !== 'desc') {
        throw new _graphql.GraphQLError('Invalid sort argument', {
          extensions: {
            code: 'BAD_USER_INPUT'
          }
        });
      }
      if (!field.includes('.')) {
        // non-nested field name, normal check logic
        if (typeof esInstance.fieldTypes[esIndex][field] === 'undefined') {
          throw new _graphql.GraphQLError('Invalid sort argument', {
            extensions: {
              code: 'BAD_USER_INPUT'
            }
          });
        } else {
          sortBody.push({
            [field]: {
              order: method
            }
          });
        }
      } else {
        // nested field name, check for each parts of name
        let nestedFieldNameArray = field.split('.');
        let fieldTypesToCheck = esInstance.fieldTypes[esIndex];
        while (nestedFieldNameArray.length > 0) {
          const FieldNameToCheck = nestedFieldNameArray.shift();
          if (fieldTypesToCheck && fieldTypesToCheck[FieldNameToCheck]) {
            fieldTypesToCheck = fieldTypesToCheck[FieldNameToCheck].properties;
          } else {
            throw new _graphql.GraphQLError('Invalid sort argument', {
              extensions: {
                code: 'BAD_USER_INPUT'
              }
            });
          }
        }
        // if we got here, everything looks good
        nestedFieldNameArray = field.split('.');
        const nestedPath = nestedFieldNameArray.slice(0, nestedFieldNameArray.length - 1).join('.');
        sortBody.push({
          [field]: {
            order: method,
            nested: {
              path: nestedPath
            }
          }
        });
      }
    }
  }
  return sortBody;
};var _default = exports.default =

getESSortBody;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ3JhcGhxbCIsInJlcXVpcmUiLCJnZXRFU1NvcnRCb2R5IiwiZ3JhcGhxbFNvcnQiLCJlc0luc3RhbmNlIiwiZXNJbmRleCIsInNvcnRCb2R5IiwiZ3JhcGhxbFNvcnRPYmoiLCJsZW5ndGgiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiZmllbGQiLCJpIiwiR3JhcGhRTEVycm9yIiwiZXh0ZW5zaW9ucyIsImNvZGUiLCJtZXRob2QiLCJpbmNsdWRlcyIsImZpZWxkVHlwZXMiLCJwdXNoIiwib3JkZXIiLCJuZXN0ZWRGaWVsZE5hbWVBcnJheSIsInNwbGl0IiwiZmllbGRUeXBlc1RvQ2hlY2siLCJGaWVsZE5hbWVUb0NoZWNrIiwic2hpZnQiLCJwcm9wZXJ0aWVzIiwibmVzdGVkUGF0aCIsInNsaWNlIiwiam9pbiIsIm5lc3RlZCIsInBhdGgiLCJfZGVmYXVsdCIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NlcnZlci9lcy9zb3J0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJ2dyYXBocWwnO1xuXG4vKipcbiAqIFRyYW5zZmVyIGdyYXBocWwgc29ydCBhcmcgdG8gRVMgc29ydCBvYmplY3RcbiAqIGUuZy46IGlucHV0IGdyYXBocWwgc29ydCBhcmdcbiAqIFt7IGdlbmRlcjogJ2FzYycgfSwgeyAndmlzaXRzLnZpc2l0X2xhYmVsJzogJ2FzYycgfV1cbiAqIG91dHB1dCBFUyBzb3J0IG9iamVjdFxuICogW1xuICogICAgIHtcbiAqICAgICAgZ2VuZGVyOiB7XG4gKiAgICAgICAgIG9yZGVyOiAnYXNjJyxcbiAqICAgICAgIH0sXG4gKiAgICAgfSxcbiAqICAgICB7XG4gKiAgICAgICAndmlzaXRzLnZpc2l0X2xhYmVsJzoge1xuICogICAgICAgICBuZXN0ZWQ6IHtcbiAqICAgICAgICAgICBwYXRoOiAndmlzaXRzJyxcbiAqICAgICAgICAgfSxcbiAqICAgICAgICAgb3JkZXI6ICdhc2MnLFxuICogICAgICAgfSxcbiAqICAgICB9XG4gKiBdXG4gKiBAcGFyYW0ge29iamVjdH0gZ3JhcGhxbFNvcnRcbiAqIEByZXR1cm5zIGEgRVMgc29ydCBvYmplY3RcbiAqL1xuY29uc3QgZ2V0RVNTb3J0Qm9keSA9IChncmFwaHFsU29ydCwgZXNJbnN0YW5jZSwgZXNJbmRleCkgPT4ge1xuICBjb25zdCBzb3J0Qm9keSA9IFtdO1xuICBpZiAodHlwZW9mIGdyYXBocWxTb3J0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGxldCBncmFwaHFsU29ydE9iaiA9IGdyYXBocWxTb3J0O1xuICAgIGlmICh0eXBlb2YgKGdyYXBocWxTb3J0Lmxlbmd0aCkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBncmFwaHFsU29ydE9iaiA9IE9iamVjdC5rZXlzKGdyYXBocWxTb3J0KS5tYXAoKGZpZWxkKSA9PiAoeyBbZmllbGRdOiBncmFwaHFsU29ydFtmaWVsZF0gfSkpO1xuICAgIH1cbiAgICAvLyBjaGVjayBmaWVsZHMgYW5kIHNvcnQgbWV0aG9kcyBhcmUgdmFsaWRcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyYXBocWxTb3J0T2JqLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoIWdyYXBocWxTb3J0T2JqW2ldIHx8IE9iamVjdC5rZXlzKGdyYXBocWxTb3J0T2JqW2ldKS5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignSW52YWxpZCBzb3J0IGFyZ3VtZW50Jywge1xuICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgIGNvZGU6ICdCQURfVVNFUl9JTlBVVCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBmaWVsZCA9IE9iamVjdC5rZXlzKGdyYXBocWxTb3J0T2JqW2ldKVswXTtcbiAgICAgIGNvbnN0IG1ldGhvZCA9IGdyYXBocWxTb3J0T2JqW2ldW2ZpZWxkXTtcbiAgICAgIGlmIChtZXRob2QgIT09ICdhc2MnICYmIG1ldGhvZCAhPT0gJ2Rlc2MnKSB7XG4gICAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ0ludmFsaWQgc29ydCBhcmd1bWVudCcsIHtcbiAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICBjb2RlOiAnQkFEX1VTRVJfSU5QVVQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKCFmaWVsZC5pbmNsdWRlcygnLicpKSB7XG4gICAgICAgIC8vIG5vbi1uZXN0ZWQgZmllbGQgbmFtZSwgbm9ybWFsIGNoZWNrIGxvZ2ljXG4gICAgICAgIGlmICh0eXBlb2YgZXNJbnN0YW5jZS5maWVsZFR5cGVzW2VzSW5kZXhdW2ZpZWxkXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdJbnZhbGlkIHNvcnQgYXJndW1lbnQnLCB7XG4gICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgIGNvZGU6ICdCQURfVVNFUl9JTlBVVCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNvcnRCb2R5LnB1c2goe1xuICAgICAgICAgICAgW2ZpZWxkXToge1xuICAgICAgICAgICAgICBvcmRlcjogbWV0aG9kLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbmVzdGVkIGZpZWxkIG5hbWUsIGNoZWNrIGZvciBlYWNoIHBhcnRzIG9mIG5hbWVcbiAgICAgICAgbGV0IG5lc3RlZEZpZWxkTmFtZUFycmF5ID0gZmllbGQuc3BsaXQoJy4nKTtcbiAgICAgICAgbGV0IGZpZWxkVHlwZXNUb0NoZWNrID0gZXNJbnN0YW5jZS5maWVsZFR5cGVzW2VzSW5kZXhdO1xuICAgICAgICB3aGlsZSAobmVzdGVkRmllbGROYW1lQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IEZpZWxkTmFtZVRvQ2hlY2sgPSBuZXN0ZWRGaWVsZE5hbWVBcnJheS5zaGlmdCgpO1xuICAgICAgICAgIGlmIChmaWVsZFR5cGVzVG9DaGVjayAmJiBmaWVsZFR5cGVzVG9DaGVja1tGaWVsZE5hbWVUb0NoZWNrXSkge1xuICAgICAgICAgICAgZmllbGRUeXBlc1RvQ2hlY2sgPSBmaWVsZFR5cGVzVG9DaGVja1tGaWVsZE5hbWVUb0NoZWNrXS5wcm9wZXJ0aWVzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdJbnZhbGlkIHNvcnQgYXJndW1lbnQnLCB7XG4gICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICBjb2RlOiAnQkFEX1VTRVJfSU5QVVQnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGlmIHdlIGdvdCBoZXJlLCBldmVyeXRoaW5nIGxvb2tzIGdvb2RcbiAgICAgICAgbmVzdGVkRmllbGROYW1lQXJyYXkgPSBmaWVsZC5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBuZXN0ZWRQYXRoID0gbmVzdGVkRmllbGROYW1lQXJyYXkuc2xpY2UoMCwgbmVzdGVkRmllbGROYW1lQXJyYXkubGVuZ3RoIC0gMSkuam9pbignLicpO1xuICAgICAgICBzb3J0Qm9keS5wdXNoKHtcbiAgICAgICAgICBbZmllbGRdOiB7XG4gICAgICAgICAgICBvcmRlcjogbWV0aG9kLFxuICAgICAgICAgICAgbmVzdGVkOiB7XG4gICAgICAgICAgICAgIHBhdGg6IG5lc3RlZFBhdGgsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gc29ydEJvZHk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRFU1NvcnRCb2R5O1xu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