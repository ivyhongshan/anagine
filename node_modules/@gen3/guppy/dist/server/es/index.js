"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _elasticsearch = require("@elastic/elasticsearch");
var _lodash = _interopRequireDefault(require("lodash"));
var _graphql = require("graphql");
var _config = _interopRequireDefault(require("../config"));
var _filter = _interopRequireDefault(require("./filter"));
var _sort = _interopRequireDefault(require("./sort"));
var esAggregator = _interopRequireWildcard(require("./aggs"));
var _logger = _interopRequireDefault(require("../logger"));
var _const = require("./const");
var _error = _interopRequireDefault(require("../utils/error"));
var _utils = require("../utils/utils");function _getRequireWildcardCache(e) {if ("function" != typeof WeakMap) return null;var r = new WeakMap(),t = new WeakMap();return (_getRequireWildcardCache = function (e) {return e ? t : r;})(e);}function _interopRequireWildcard(e, r) {if (!r && e && e.__esModule) return e;if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };var t = _getRequireWildcardCache(r);if (t && t.has(e)) return t.get(e);var n = { __proto__: null },a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];}return n.default = e, t && t.set(e, n), n;}function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

class ES {
  constructor(esConfig = _config.default.esConfig) {
    this.config = esConfig;
    this.client = new _elasticsearch.Client({
      node: this.config.host
      // log: 'trace'
    });
    this.client.ping({}, (error) => {
      if (error) {
        _logger.default.error(`[ES] elasticsearch cluster at ${this.config.host} is down!`);
      } else {
        _logger.default.info(`[ES] connected to elasticsearch at ${this.config.host}.`);
        this.connected = true;
      }
    });
  }

  /**
   * Query ES data (search API) by index, type, and queryBody
   * See https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#_search
   * @param {string} esIndex
   * @param {string} esType
   * @param {object} queryBody
   */
  async query(esIndex, esType, queryBody) {
    const validatedQueryBody = {};
    Object.keys(queryBody).forEach((key) => {
      if (typeof queryBody[key] !== 'undefined' && queryBody[key] !== null) {
        validatedQueryBody[key] = queryBody[key];
      }
    });
    validatedQueryBody.highlight = {
      pre_tags: [
      `<${_config.default.matchedTextHighlightTagName}>`],

      post_tags: [
      `</${_config.default.matchedTextHighlightTagName}>`],

      fields: {
        [`*${_config.default.analyzedTextFieldSuffix}`]: {}
      }
    };
    validatedQueryBody.track_total_hits = true;

    const start = Date.now();
    return this.client.search({
      index: esIndex,
      body: validatedQueryBody
    }).then((resp) => resp.body, (err) => {
      _logger.default.error(`[ES.query] error during querying: ${err.message}`);
      throw new Error(err.message);
    }).finally(() => {
      const end = Date.now();
      const durationInMS = end - start;

      _logger.default.info(`[ES.query] DurationInMS:${durationInMS}. index, type, query body: `, esIndex, esType, JSON.stringify(validatedQueryBody));
    });
  }

  /**
   * Fetch elastic search data using scroll API
   * See https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html
   * @param {string} esIndex
   * @param {string} esType
   * @param {Object} argument - arg object for filter, fields, and sort
   */
  async scrollQuery(esIndex, esType, {
    filter,
    fields,
    sort
  }) {
    if (!esIndex || !esType) {
      throw new _error.default(
        400,
        'Invalid es index or es type name'
      );
    }
    const allESFields = _lodash.default.flattenDeep(this.getESFields(esIndex).fields.map((f) => {
      if (f.nestedProps) {
        return (0, _utils.processNestedFieldNames)(f);
      }
      return f.name;
    }));
    const fieldsNotBelong = _lodash.default.difference(fields, allESFields);
    if (fieldsNotBelong.length > 0) {
      throw new _error.default(
        400,
        `Invalid fields: "${fieldsNotBelong.join('", "')}"`
      );
    }
    const validatedQueryBody = filter ? { query: filter } : {};
    _logger.default.debug('[ES.scrollQuery] scroll query body: ', JSON.stringify(validatedQueryBody, null, 4));

    let currentBatch;
    let scrollID;
    let totalData = [];
    let batchSize = 0;

    // This is really ridiculous that ES's JS library has it, but we need to
    // convert list of sort obj into comma separated strings to make it work
    // see https://www.elastic.co/guide/en/elasticsearch/client/javascript-api/current/api-reference.html#_search
    const sortStringList = sort && sort.map((item) => `${Object.keys(item)[0]}:${Object.values(item)[0]}`);

    while (!currentBatch || batchSize > 0) {
      if (typeof scrollID === 'undefined') {// first batch
        const res = await this.client.search({ // eslint-disable-line no-await-in-loop
          index: esIndex,
          body: validatedQueryBody,
          scroll: '1m',
          size: _const.SCROLL_PAGE_SIZE,
          _source: fields,
          sort: sortStringList
        }).then((resp) => resp, (err) => {
          _logger.default.error('[ES.query] error when query', err.message);
          throw new Error(err.message);
        });
        currentBatch = res.body;
        _logger.default.debug('[ES scrollQuery] created scroll');
      } else {// following batches
        const res = await this.client.scroll({ // eslint-disable-line no-await-in-loop
          scroll_id: scrollID,
          scroll: '1m'
        });
        currentBatch = res.body;
      }

      // merge fetched batches
      scrollID = currentBatch._scroll_id;
      batchSize = currentBatch.hits.hits.length;
      _logger.default.debug('[ES scrollQuery] get batch size = ', batchSize, ' merging...');

      // TODO: change it to streaming
      totalData = totalData.concat(currentBatch.hits.hits.map((item) => item._source));
    }

    _logger.default.debug('[ES scrollQuery] end scrolling');
    await this.client.clearScroll({
      scroll_id: scrollID
    });
    _logger.default.debug('[ES scrollQuery] scroll cleaned');
    return totalData;
  }

  /**
   * Get mapping from ES with given index and type.
   * Return a Promise of an Object: { <field>: <type> }
   * If error, print error stack
   * @param {string} esIndex
   */
  async _getESFieldsTypes(esIndex) {
    const errMsg = `[ES.initialize] error getting mapping from ES index "${esIndex}"`;
    return this.client.indices.getMapping({
      index: esIndex
    }).then((resp) => {
      try {
        const esIndexAlias = Object.keys(resp.body)[0];
        _logger.default.info('Mapping response from ES: ', resp.body[esIndexAlias]);
        return resp.body[esIndexAlias].mappings.properties;
      } catch (err) {
        throw new Error(`${errMsg}: ${err}`);
      }
    }, (err) => {
      throw new Error(`${errMsg}: ${err.message}`);
    });
  }

  async _getMappingsForAllIndices() {
    if (!this.config.indices || this.config.indices === 0) {
      const errMsg = '[ES.initialize] Error when initializing: empty "config.indices" block';
      throw new Error(errMsg);
    }
    const fieldTypes = {};
    _logger.default.info('[ES.initialize] getting mapping from elasticsearch...');
    const promiseList = this.config.indices.
    map((cfg) => this._getESFieldsTypes(cfg.index).
    then((res) => ({ index: cfg.index, fieldTypes: res })));
    const resultList = await Promise.all(promiseList);
    _logger.default.info('[ES.initialize] got mapping from elasticsearch');
    resultList.forEach((res) => {
      fieldTypes[res.index] = res.fieldTypes;
    });
    _logger.default.debug('[ES.initialize]', JSON.stringify(fieldTypes, null, 4));
    return fieldTypes;
  }

  /**
   * Read array config and check if there's any array fields for each index.
   * Array fields are grouped and stored by index as a doc in array config,
   * and we set _id as index name for this doc.
   */
  async _getArrayFieldsFromConfigIndex() {
    if (typeof this.config.configIndex === 'undefined') {
      _logger.default.info('[ES.initialize] no array fields from es config index.');
      return Promise.resolve({});
    }
    if (!this.fieldTypes) {
      return {};
    }
    const arrayFields = {};
    _logger.default.info(`[ES.initialize] getting array fields from es config index "${this.config.configIndex}"...`);
    return this.client.search({
      index: this.config.configIndex,
      body: {
        query: {
          ids: {
            values: Object.keys(this.fieldTypes)
          }
        }
      }
    }).then((resp) => {
      try {
        resp.body.hits.hits.forEach((doc) => {
          const index = doc._id;
          if (!this.fieldTypes[index]) {
            const errMsg = `[ES.initialize] wrong array entry from config index: index "${index}" not found, skipped.`;
            _logger.default.error(errMsg);
            return;
          }
          const fields = doc._source.array;
          fields.forEach((field) => {
            const fieldArr = field.split('.');
            if (!(this.fieldTypes[index][field] ||

            fieldArr.length > 1 &&
            _lodash.default.has(
              this.fieldTypes[index],
              fieldArr.join('.properties.')
            )))

            {
              const errMsg = `[ES.initialize] wrong array entry from config: field "${field}" not found in index ${index}, skipped.`;
              _logger.default.error(errMsg);
              return;
            }
            if (!arrayFields[index]) arrayFields[index] = [];
            arrayFields[index].push(field);
          });
        });
        _logger.default.info('[ES.initialize] got array fields from es config index:', JSON.stringify(arrayFields, null, 4));
      } catch (err) {
        throw new Error(err);
      }
      return arrayFields;
    }, (err) => {
      throw new Error(err.message);
    });
  }

  /**
   * We do following things when initializing:
   * 1. get mappings from all indices, and save to "this.fieldTypes":
   * {
   *    <index1>: {
   *      <field1>: <type1>
   *      <field2>: <type2>
   *    }
   *    ...
   * }
   * 2. get configs from config index for array fields, save to "this.arrayFields":
   * {
   *    <index1>: [<field1>, <field2>],
   *    <index2>: [<field1>, <field2>],
   *    ...
   * }
   */
  async initialize() {
    this.fieldTypes = await this._getMappingsForAllIndices();
    this.arrayFields = await this._getArrayFieldsFromConfigIndex();
  }

  /**
   * Get ES fields' mapping type by es index name
   * Returns an object of field=>type mapping
   * @param {string} esIndex
   */
  getESFieldTypeMappingByIndex(esIndex) {
    return this.fieldTypes[esIndex];
  }

  /**
   * Get fields by esIndex
   * If esIndex is not set, return all fields grouped by index and types.
   * @param {string} esIndex
   */
  getESFields(esIndex) {
    const res = {};
    this.config.indices.forEach((cfg) => {
      res[cfg.index] = {
        index: cfg.index,
        type: cfg.type,
        fields: Object.entries(this.fieldTypes[cfg.index]).map(([key, value]) => {
          let r;
          if (value.type !== 'nested') {
            r = { name: key, type: value.type };
          } else {
            r = (0, _utils.buildNestedField)(key, value);
          }
          return r;
        })
      };
    });
    if (typeof esIndex === 'undefined') {
      return res;
    }
    return res[esIndex];
  }

  /**
   * Get es index by es type
   * Throw 400 error if there's no existing es type
   * @param {string} esType
   */
  getESIndexByType(esType) {
    const index = this.config.indices.find((i) => i.type === esType);
    if (index) return index.index;
    throw new _error.default(
      400,
      `Invalid es type: "${esType}"`
    );
  }

  /**
   * Get es indexConfig by es type
   * Throw 400 error if there's no existing es type
   * @param {string} esType
   */
  getESIndexConfigByType(esType) {
    const index = this.config.indices.find((i) => i.type === esType);
    if (index) return index;
    throw new _error.default(
      400,
      `Invalid es type: "${esType}"`
    );
  }

  /**
   * Get es index config by es index name
   * Throw 400 error if there's no existing es index of that name
   * @param {string} esIndexName
   */
  getESIndexConfigByName(esIndexName) {
    const indexConfig = this.config.indices.find((i) => i.index === esIndexName);
    if (indexConfig) return indexConfig;
    throw new _error.default(
      400,
      `Invalid es index name: "${esIndexName}"`
    );
  }

  /**
   * Get all es indices and their alias
   */
  getAllESIndices() {
    const indicesArray = this.config.indices.map((e) => e.index);
    if (this.config.configIndex) {
      indicesArray.push(this.config.configIndex);
    }
    return this.client.indices.getAlias({
      index: indicesArray
    }).then((resp) => {
      try {
        const indicesMetadata = resp.body;
        const indicesWithArrayFields = Object.keys(this.arrayFields);
        for (let i = 0; i < indicesWithArrayFields.length; i += 1) {
          const indexName = indicesWithArrayFields[i];
          if (!indicesMetadata[indexName]) {
            indicesMetadata[indexName] = {};
          }
          indicesMetadata[indexName].arrayFields = this.arrayFields[indexName];
        }
        return {
          statusCode: resp.statusCode,
          warnings: resp.warnings,
          indices: {
            ...indicesMetadata
          }
        };
      } catch (err) {
        throw new Error(err);
      }
    }, (err) => {
      throw new Error(err);
    });
  }

  /**
   * Check if the field is array
   */
  isArrayField(esIndex, field) {
    return this.arrayFields[esIndex] && this.arrayFields[esIndex].includes(field);
  }

  filterData(
  { esIndex, esType },
  {
    filter, fields, sort, offset = 0, size
  })
  {
    const queryBody = { from: offset };
    if (typeof filter !== 'undefined') {
      queryBody.query = (0, _filter.default)(this, esIndex, filter);
    }
    queryBody.sort = (0, _sort.default)(sort, this, esIndex);
    if (typeof size !== 'undefined') {
      queryBody.size = size;
    }
    if (fields !== undefined) {
      if (fields) {
        const esFields = (0, _utils.fromFieldsToSource)(fields);
        if (esFields.length > 0) queryBody._source = esFields;
      } else {
        queryBody._source = false;
      }
    }
    return this.query(esIndex, esType, queryBody);
  }

  async getCount(esIndex, esType, filter) {
    const result = await this.filterData(
      { esInstance: this, esIndex, esType },
      { filter, fields: false, size: 0 }
    );
    // Really shouldn't be getting this, but just in case
    if (result.hits.total.relation !== 'eq') {
      _logger.default.error(`The returned total count might be inaccurate. See hits.total object: ${result.hits.total}`);
    }
    return result.hits.total.value;
  }

  async getFieldCount(esIndex, esType, filter, field) {
    const queryBody = {
      size: 0,
      aggs: {
        [field]: {
          value_count: {
            field
          }
        }
      }
    };
    if (typeof filter !== 'undefined') {
      queryBody.query = (0, _filter.default)(this, esIndex, filter, field);
    }

    const result = await this.query(esIndex, esType, queryBody);
    return result.aggregations[field].value;
  }

  // eslint-disable-next-line camelcase
  async getCardinalityCount(esIndex, esType, filter, field, precision_threshold) {
    const queryBody = {
      size: 0,
      aggs: {
        cardinality_count: {
          cardinality: {
            field,
            precision_threshold // eslint-disable-line camelcase
          }
        }
      }
    };
    if (typeof filter !== 'undefined') {
      queryBody.query = (0, _filter.default)(this, esIndex, filter);
    }

    const result = await this.query(esIndex, esType, queryBody);
    return result.aggregations.cardinality_count.value;
  }

  async getData({
    esIndex, esType, fields, filter, sort, offset, size
  }) {
    if (typeof size !== 'undefined' && offset + size > _const.SCROLL_PAGE_SIZE) {
      throw new _graphql.GraphQLError(`Large graphql query forbidden for offset + size > ${_const.SCROLL_PAGE_SIZE},
      offset = ${offset} and size = ${size},
      please use download endpoint for large data queries instead.`, {
        extensions: {
          code: 'BAD_USER_INPUT'
        }
      });
    }
    const result = await this.filterData(
      { esInstance: this, esIndex, esType },
      {
        filter, fields, sort, offset, size
      }
    );
    const { hits } = result.hits;
    const hitsWithMatchedResults = hits.map((h) => {
      if (!('highlight' in h)) {
        // ES doesn't returns "highlight"
        return h._source;
      }
      // ES returns highlight, transfer them into "_matched" schema
      const matchedList = Object.keys(h.highlight).map((f) => {
        let field = f;
        if (f.endsWith(_config.default.analyzedTextFieldSuffix)) {
          // remove ".analyzed" suffix from field name
          field = f.substr(0, f.length - _config.default.analyzedTextFieldSuffix.length);
        }
        return {
          field,
          // just use ES highlights' format,
          // should be a list of string, with matched part emphasized with <
          highlights: h.highlight[f]
        };
      });
      return {
        ...h._source,
        _matched: matchedList
      };
    });
    return hitsWithMatchedResults;
  }

  downloadData({
    esIndex, esType, fields, filter, sort
  }) {
    const esFilterObj = filter ? (0, _filter.default)(this, esIndex, filter) : undefined;
    return this.scrollQuery(esIndex, esType, {
      filter: esFilterObj,
      fields,
      sort: (0, _sort.default)(sort, this, esIndex)
    });
  }

  numericAggregation({
    esIndex,
    esType,
    filter,
    field,
    rangeStart,
    rangeEnd,
    rangeStep,
    binCount,
    filterSelf,
    defaultAuthFilter,
    nestedAggFields,
    nestedPath
  }) {
    return esAggregator.numericAggregation(
      {
        esInstance: this,
        esIndex,
        esType
      },
      {
        esIndex,
        esType,
        filter,
        field,
        rangeStart,
        rangeEnd,
        rangeStep,
        binCount,
        filterSelf,
        defaultAuthFilter,
        nestedAggFields,
        nestedPath
      }
    );
  }

  textAggregation({
    esIndex,
    esType,
    filter,
    field,
    filterSelf,
    defaultAuthFilter,
    nestedAggFields,
    nestedPath,
    isNumericField
  }) {
    return esAggregator.textAggregation(
      {
        esInstance: this,
        esIndex,
        esType
      },
      {
        filter,
        field,
        filterSelf,
        defaultAuthFilter,
        nestedAggFields,
        nestedPath,
        isNumericField
      }
    );
  }
}

const es = new ES();var _default = exports.default =

es;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,