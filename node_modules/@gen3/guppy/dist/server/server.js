"use strict";var _express = _interopRequireDefault(require("express"));
var _cors = _interopRequireDefault(require("cors"));
var _helmet = _interopRequireDefault(require("helmet"));
var _graphqlDepthLimit = _interopRequireDefault(require("graphql-depth-limit"));
var _server = require("@apollo/server");
var _express2 = require("@apollo/server/express4");
var _graphqlTools = require("graphql-tools");
var _graphqlMiddleware = require("graphql-middleware");
var _bodyParser = _interopRequireDefault(require("body-parser"));
var _index = _interopRequireDefault(require("./es/index"));
var _resolvers = _interopRequireDefault(require("./resolvers"));
var _schema = _interopRequireDefault(require("./schema"));
var _config = _interopRequireDefault(require("./config"));
var _logger = _interopRequireDefault(require("./logger"));
var _middlewares = _interopRequireDefault(require("./middlewares"));
var _headerParser = _interopRequireDefault(require("./utils/headerParser"));
var _authHelper = _interopRequireDefault(require("./auth/authHelper"));
var _download = _interopRequireDefault(require("./download"));
var _error = _interopRequireDefault(require("./utils/error"));
var _endpoints = require("./endpoints");function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

let server;
const app = (0, _express.default)();
app.use((0, _cors.default)());
app.use((0, _helmet.default)());
app.use(_bodyParser.default.json({ limit: '50mb' }));

const startServer = async () => {
  // build schema and resolvers by parsing elastic search fields and types,
  const typeDefs = (0, _schema.default)(_config.default.esConfig, _index.default);
  const resolvers = (0, _resolvers.default)(_config.default.esConfig, _index.default);
  const schema = (0, _graphqlTools.makeExecutableSchema)({ typeDefs, resolvers });
  const schemaWithMiddleware = (0, _graphqlMiddleware.applyMiddleware)(schema, ..._middlewares.default);
  // create graphql server instance
  server = new _server.ApolloServer({
    mocks: false,
    schema: schemaWithMiddleware,
    validationRules: [(0, _graphqlDepthLimit.default)(10)]
  });

  await server.start();

  app.use(
    '/graphql',
    (0, _cors.default)(),
    (0, _express2.expressMiddleware)(server, {
      context: async ({ req }) => {
        const jwt = _headerParser.default.parseJWT(req);
        const authHelper = await (0, _authHelper.default)(jwt);
        return {
          authHelper
        };
      },
      // bind graphql server to express app at config.path
      path: _config.default.path
    })
  );
  _logger.default.info(`[Server] guppy listening on port ${_config.default.port}!`);
};

const initializeAndStartServer = async () => {
  await _index.default.initialize();
  await startServer();
};

const refreshRouter = async (req, res, next) => {
  res.setHeader('Content-Type', 'application/json; charset=utf-8');
  try {
    if (_config.default.allowRefresh === false) {
      const disabledRefresh = new _error.default(404, '[Refresh] guppy _refresh functionality is not enabled');
      throw disabledRefresh;
    } else {
      _logger.default.debug('[Refresh] ', JSON.stringify(req.body, null, 4));
      const jwt = _headerParser.default.parseJWT(req);
      if (!jwt) {
        const noJwtError = new _error.default(401, '[Refresh] no JWT user token provided to _refresh function');
        throw noJwtError;
      }
      const authHelper = await (0, _authHelper.default)(jwt);
      if (authHelper._canRefresh === undefined || authHelper._canRefresh === false) {
        const noPermsUser = new _error.default(401, '[Refresh] User cannot refresh Guppy without a valid token that has admin_access method on guppy service for resource path /guppy_admin');
        throw noPermsUser;
      }
      await server.stop();
      await initializeAndStartServer();
    }
    res.send('[Refresh] guppy refreshed successfully');
  } catch (err) {
    _logger.default.error(err);
    next(err);
  }
  return 0;
};

// simple health check endpoint
// eslint-disable-next-line no-unused-vars
app.get('/_status', _endpoints.statusRouter, (req, res, err, next) => {
  if (err instanceof _error.default) {
    // deepcode ignore ServerLeak: no important information exists in error
    res.status(err.code).send(err.msg);
  } else {
    // deepcode ignore ServerLeak: no important information exists in error
    res.status(500).send(err);
  }
});

app.get('/_version', _endpoints.versionRouter);

// download endpoint for fetching data directly from es
// eslint-disable-next-line no-unused-vars
app.post('/download', _download.default, (err, req, res, next) => {
  if (err instanceof _error.default) {
    // deepcode ignore ServerLeak: no important information exists in error
    res.status(err.code).send(err.msg);
  } else {
    // deepcode ignore ServerLeak: no important information exists in error
    res.status(500).send(err);
  }
});

// eslint-disable-next-line no-unused-vars
app.post('/_refresh', refreshRouter, (err, req, res, next) => {
  if (err instanceof _error.default) {
    res.status(err.code).send(err.msg);
  } else {
    res.status(500).send(err);
  }
});

// need to connect to ES and initialize before setting up a server
app.listen(_config.default.port, async () => {
  await initializeAndStartServer();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,