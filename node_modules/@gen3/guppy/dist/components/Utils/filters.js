"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.updateCountsInInitialTabsOptions = exports.sortTabsOptions = exports.mergeTabOptions = exports.mergeFilters = exports.buildFilterStatusForURLFilter = void 0;var _flat = _interopRequireDefault(require("flat"));
var _lodash = _interopRequireDefault(require("lodash"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { "default": e };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(e, r, t) {return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}

/**
   * This function takes two objects containing filters to be applied
   * and combines them into one filter object in the same format.
   * Note: the admin filter takes precedence. Selected values in the user
   * filter will be discarded if the key collides. This is to avoid
   * the user undoing the admin filter. (Multiple user checkboxes increase the
   * amount of data shown when combined, but an admin filter should always decrease
   * or keep constant the amount of data shown when combined with a user filter).
  * */
var mergeFilters = exports.mergeFilters = function mergeFilters(userFilter, adminAppliedPreFilter) {
  var filterAB = _objectSpread({}, userFilter);
  Object.keys(adminAppliedPreFilter).forEach(function (key) {
    if (Object.prototype.hasOwnProperty.call(userFilter, key) &&
    Object.prototype.hasOwnProperty.call(adminAppliedPreFilter, key)) {
      var userFilterSubset = userFilter[key].selectedValues.filter(
        function (x) {return adminAppliedPreFilter[key].selectedValues.includes(x);}
      );
      if (userFilterSubset.length > 0) {
        // The user-applied filter is more exclusive than the admin-applied filter.
        filterAB[key].selectedValues = userFilter[key].selectedValues;
      } else {
        // The admin-applied filter is more exclusive than the user-applied filter.
        filterAB[key].selectedValues = adminAppliedPreFilter[key].selectedValues;
      }
    } else if (Object.prototype.hasOwnProperty.call(adminAppliedPreFilter, key)) {
      filterAB[key] = { selectedValues: adminAppliedPreFilter[key].selectedValues };
    }
  });

  return filterAB;
};

/**
   * This function updates the counts in the initial set of tab options
   * calculated from unfiltered data.
   * It is used to retain field options in the rendering if
   * they are still checked but their counts are zero.
   */
var updateCountsInInitialTabsOptions = exports.updateCountsInInitialTabsOptions = function updateCountsInInitialTabsOptions(
initialTabsOptions,
processedTabsOptions,
filtersApplied,
accessibleFieldCheckList,
allFilterValues)
{
  var updatedTabsOptions = {};
  try {
    // flatten the tab options first
    // {
    //   project_id.histogram: ...
    //   visit.visit_label.histogram: ...
    // }
    var flattenInitialTabsOptions = (0, _flat["default"])(initialTabsOptions, { safe: true });
    var flattenProcessedTabsOptions = (0, _flat["default"])(processedTabsOptions, { safe: true });
    Object.keys(flattenInitialTabsOptions).forEach(function (field) {
      // in flattened tab options, to get actual field name, strip off the last '.histogram' or '.asTextHistogram'
      var actualFieldName = field.replace('.histogram', '').replace('.asTextHistogram', '');

      // check if Filter Value if not skip
      if (!allFilterValues.includes(actualFieldName)) {
        return;
      }

      // possible to have '.' in actualFieldName, so use it as a string
      updatedTabsOptions["".concat(actualFieldName)] = { histogram: [] };
      // if in tiered access mode
      // we need not to process filters for field in accessibleFieldCheckList
      if (accessibleFieldCheckList &&
      accessibleFieldCheckList.includes(actualFieldName) &&
      flattenProcessedTabsOptions["".concat(field)]) {
        updatedTabsOptions["".concat(actualFieldName)].histogram = flattenProcessedTabsOptions["".concat(field)];
        return;
      }
      var histogram = flattenInitialTabsOptions["".concat(field)];
      if (!histogram || _typeof(histogram) !== 'object') {
        console.error("Guppy did not return histogram data for filter field ".concat(actualFieldName)); // eslint-disable-line no-console
        return;
      }
      histogram.forEach(function (opt) {
        var key = opt.key;
        if (typeof key !== 'string') {// key is a range, just copy the histogram
          updatedTabsOptions["".concat(actualFieldName)].histogram = flattenInitialTabsOptions["".concat(field)];
          if (flattenProcessedTabsOptions["".concat(field)] &&
          flattenProcessedTabsOptions["".concat(field)].length > 0 &&
          updatedTabsOptions["".concat(actualFieldName)].histogram) {
            var currentFlattenProcessedTabsOptions = flattenProcessedTabsOptions["".concat(field)][0];

            // if empty count histogram should be removed so filter is not shown
            if (currentFlattenProcessedTabsOptions.count === 0) {
              updatedTabsOptions["".concat(actualFieldName)].histogram = [];
              return;
            }
            updatedTabsOptions["".concat(actualFieldName)].histogram[0].count = currentFlattenProcessedTabsOptions.count;
            var newKey = [0, 0];
            if (currentFlattenProcessedTabsOptions.key[0]) {
              // because of the prefer-destructuring eslint rule
              var newLowerBound = currentFlattenProcessedTabsOptions.key[0];
              newKey[0] = newLowerBound;
            }
            if (currentFlattenProcessedTabsOptions.key[1]) {
              var newHigherBound = currentFlattenProcessedTabsOptions.key[1];
              newKey[1] = newHigherBound;
            }
            updatedTabsOptions["".concat(actualFieldName)].histogram[0].key = newKey;
          }
          return;
        }
        if (flattenProcessedTabsOptions["".concat(field)]) {
          var findOpt = flattenProcessedTabsOptions["".concat(field)].find(function (o) {return o.key === key;});
          if (findOpt) {
            var count = findOpt.count;
            updatedTabsOptions["".concat(actualFieldName)].histogram.push({ key: key, count: count });
          }
        }
      });
      if (filtersApplied["".concat(actualFieldName)]) {
        if (filtersApplied["".concat(actualFieldName)].selectedValues) {
          filtersApplied["".concat(actualFieldName)].selectedValues.forEach(function (optKey) {
            if (!updatedTabsOptions["".concat(actualFieldName)].histogram.find(function (o) {return o.key === optKey;})) {
              updatedTabsOptions["".concat(actualFieldName)].histogram.push({ key: optKey, count: 0 });
            }
          });
        }
      }
    });
  } catch (err) {
    /* eslint-disable no-console */
    // hopefully we won't get here but in case of
    // out-of-index error or obj undefined error
    console.error('error when processing filter data: ', err);
    console.trace();
    /* eslint-enable no-console */
  }
  return updatedTabsOptions;
};

function sortCountThenAlpha(a, b) {
  if (a.count === b.count) {
    return a.key < b.key ? -1 : 1;
  }
  return b.count - a.count;
}

var sortTabsOptions = exports.sortTabsOptions = function sortTabsOptions(tabsOptions) {
  var fields = Object.keys(tabsOptions);
  var sortedTabsOptions = _objectSpread({}, tabsOptions);
  for (var x = 0; x < fields.length; x += 1) {
    var field = fields[x];

    var optionsForThisField = sortedTabsOptions[field].histogram;
    optionsForThisField.sort(sortCountThenAlpha);
    sortedTabsOptions[field].histogram = optionsForThisField;
  }
  return sortedTabsOptions;
};

/**
   * This function takes two TabsOptions object and merge them together
   * The order of merged histogram array is preserved by firstHistogram.concat(secondHistogram)
   */
var mergeTabOptions = exports.mergeTabOptions = function mergeTabOptions(firstTabsOptions, secondTabsOptions) {
  if (!firstTabsOptions || !Object.keys(firstTabsOptions).length) {
    return secondTabsOptions;
  }
  if (!secondTabsOptions || !Object.keys(secondTabsOptions).length) {
    return firstTabsOptions;
  }

  var allOptionKeys = _lodash["default"].union(Object.keys(firstTabsOptions), Object.keys(secondTabsOptions));
  var mergedTabOptions = {};
  allOptionKeys.forEach(function (optKey) {
    if (!mergedTabOptions["".concat(optKey)]) {
      mergedTabOptions["".concat(optKey)] = {};
    }
    if (!mergedTabOptions["".concat(optKey)].histogram) {
      mergedTabOptions["".concat(optKey)].histogram = [];
    }
    var firstHistogram = firstTabsOptions["".concat(optKey)] && firstTabsOptions["".concat(optKey)].histogram ? firstTabsOptions["".concat(optKey)].histogram : [];
    var secondHistogram = secondTabsOptions["".concat(optKey)] && secondTabsOptions["".concat(optKey)].histogram ? secondTabsOptions["".concat(optKey)].histogram : [];
    mergedTabOptions["".concat(optKey)].histogram = firstHistogram.concat(secondHistogram);
  });
  return mergedTabOptions;
};

var buildFilterStatusForURLFilter = exports.buildFilterStatusForURLFilter = function buildFilterStatusForURLFilter(userFilter, tabs) {
  // Converts filter-applied form to filter-displayed form
  // TODO: add support for search filters
  var filteringFields = Object.keys(userFilter);
  var filterStatusArray = tabs.map(function () {return [];});

  for (var tabIndex = 0; tabIndex < tabs.length; tabIndex += 1) {
    var allFieldsForThisTab = _lodash["default"].union(tabs[tabIndex].fields, tabs[tabIndex].asTextAggFields || []);
    filterStatusArray[tabIndex] = allFieldsForThisTab.map(function () {return {};});
    for (var i = 0; i < filteringFields.length; i += 1) {
      var sectionIndex = allFieldsForThisTab.indexOf(filteringFields[i]);
      if (sectionIndex !== -1) {
        var userFilterSmallForm = {};
        var filterVar = userFilter[filteringFields[i]];
        if (_typeof(filterVar) === 'object' && filterVar.selectedValues) {
          // Single select values:
          for (var j = 0; j < filterVar.selectedValues.length; j += 1) {
            userFilterSmallForm[filterVar.selectedValues[j]] = true;
          }
        } else if (_typeof(filterVar) === 'object' && (
        filterVar.lowerBound || filterVar.upperBound)) {
          // Range values:
          userFilterSmallForm = [filterVar.lowerBound, filterVar.upperBound];
        }
        filterStatusArray[tabIndex][sectionIndex] = userFilterSmallForm;
      }
    }
  }

  return filterStatusArray;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZmxhdCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2xvZGFzaCIsImUiLCJfX2VzTW9kdWxlIiwiX3R5cGVvZiIsIm8iLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwib3duS2V5cyIsInIiLCJ0IiwiT2JqZWN0Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImZpbHRlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJwdXNoIiwiYXBwbHkiLCJfb2JqZWN0U3ByZWFkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsInZhbHVlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJpIiwiX3RvUHJpbWl0aXZlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiVHlwZUVycm9yIiwiU3RyaW5nIiwiTnVtYmVyIiwibWVyZ2VGaWx0ZXJzIiwiZXhwb3J0cyIsInVzZXJGaWx0ZXIiLCJhZG1pbkFwcGxpZWRQcmVGaWx0ZXIiLCJmaWx0ZXJBQiIsImtleSIsImhhc093blByb3BlcnR5IiwidXNlckZpbHRlclN1YnNldCIsInNlbGVjdGVkVmFsdWVzIiwieCIsImluY2x1ZGVzIiwidXBkYXRlQ291bnRzSW5Jbml0aWFsVGFic09wdGlvbnMiLCJpbml0aWFsVGFic09wdGlvbnMiLCJwcm9jZXNzZWRUYWJzT3B0aW9ucyIsImZpbHRlcnNBcHBsaWVkIiwiYWNjZXNzaWJsZUZpZWxkQ2hlY2tMaXN0IiwiYWxsRmlsdGVyVmFsdWVzIiwidXBkYXRlZFRhYnNPcHRpb25zIiwiZmxhdHRlbkluaXRpYWxUYWJzT3B0aW9ucyIsImZsYXQiLCJzYWZlIiwiZmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zIiwiZmllbGQiLCJhY3R1YWxGaWVsZE5hbWUiLCJyZXBsYWNlIiwiY29uY2F0IiwiaGlzdG9ncmFtIiwiY29uc29sZSIsImVycm9yIiwib3B0IiwiY3VycmVudEZsYXR0ZW5Qcm9jZXNzZWRUYWJzT3B0aW9ucyIsImNvdW50IiwibmV3S2V5IiwibmV3TG93ZXJCb3VuZCIsIm5ld0hpZ2hlckJvdW5kIiwiZmluZE9wdCIsImZpbmQiLCJvcHRLZXkiLCJlcnIiLCJ0cmFjZSIsInNvcnRDb3VudFRoZW5BbHBoYSIsImEiLCJiIiwic29ydFRhYnNPcHRpb25zIiwidGFic09wdGlvbnMiLCJmaWVsZHMiLCJzb3J0ZWRUYWJzT3B0aW9ucyIsIm9wdGlvbnNGb3JUaGlzRmllbGQiLCJzb3J0IiwibWVyZ2VUYWJPcHRpb25zIiwiZmlyc3RUYWJzT3B0aW9ucyIsInNlY29uZFRhYnNPcHRpb25zIiwiYWxsT3B0aW9uS2V5cyIsIl8iLCJ1bmlvbiIsIm1lcmdlZFRhYk9wdGlvbnMiLCJmaXJzdEhpc3RvZ3JhbSIsInNlY29uZEhpc3RvZ3JhbSIsImJ1aWxkRmlsdGVyU3RhdHVzRm9yVVJMRmlsdGVyIiwidGFicyIsImZpbHRlcmluZ0ZpZWxkcyIsImZpbHRlclN0YXR1c0FycmF5IiwibWFwIiwidGFiSW5kZXgiLCJhbGxGaWVsZHNGb3JUaGlzVGFiIiwiYXNUZXh0QWdnRmllbGRzIiwic2VjdGlvbkluZGV4IiwiaW5kZXhPZiIsInVzZXJGaWx0ZXJTbWFsbEZvcm0iLCJmaWx0ZXJWYXIiLCJqIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VdGlscy9maWx0ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmbGF0IGZyb20gJ2ZsYXQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgdHdvIG9iamVjdHMgY29udGFpbmluZyBmaWx0ZXJzIHRvIGJlIGFwcGxpZWRcbiAgICogYW5kIGNvbWJpbmVzIHRoZW0gaW50byBvbmUgZmlsdGVyIG9iamVjdCBpbiB0aGUgc2FtZSBmb3JtYXQuXG4gICAqIE5vdGU6IHRoZSBhZG1pbiBmaWx0ZXIgdGFrZXMgcHJlY2VkZW5jZS4gU2VsZWN0ZWQgdmFsdWVzIGluIHRoZSB1c2VyXG4gICAqIGZpbHRlciB3aWxsIGJlIGRpc2NhcmRlZCBpZiB0aGUga2V5IGNvbGxpZGVzLiBUaGlzIGlzIHRvIGF2b2lkXG4gICAqIHRoZSB1c2VyIHVuZG9pbmcgdGhlIGFkbWluIGZpbHRlci4gKE11bHRpcGxlIHVzZXIgY2hlY2tib3hlcyBpbmNyZWFzZSB0aGVcbiAgICogYW1vdW50IG9mIGRhdGEgc2hvd24gd2hlbiBjb21iaW5lZCwgYnV0IGFuIGFkbWluIGZpbHRlciBzaG91bGQgYWx3YXlzIGRlY3JlYXNlXG4gICAqIG9yIGtlZXAgY29uc3RhbnQgdGhlIGFtb3VudCBvZiBkYXRhIHNob3duIHdoZW4gY29tYmluZWQgd2l0aCBhIHVzZXIgZmlsdGVyKS5cbiAgKiAqL1xuZXhwb3J0IGNvbnN0IG1lcmdlRmlsdGVycyA9ICh1c2VyRmlsdGVyLCBhZG1pbkFwcGxpZWRQcmVGaWx0ZXIpID0+IHtcbiAgY29uc3QgZmlsdGVyQUIgPSB7IC4uLnVzZXJGaWx0ZXIgfTtcbiAgT2JqZWN0LmtleXMoYWRtaW5BcHBsaWVkUHJlRmlsdGVyKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHVzZXJGaWx0ZXIsIGtleSlcbiAgICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWRtaW5BcHBsaWVkUHJlRmlsdGVyLCBrZXkpKSB7XG4gICAgICBjb25zdCB1c2VyRmlsdGVyU3Vic2V0ID0gdXNlckZpbHRlcltrZXldLnNlbGVjdGVkVmFsdWVzLmZpbHRlcihcbiAgICAgICAgKHgpID0+IGFkbWluQXBwbGllZFByZUZpbHRlcltrZXldLnNlbGVjdGVkVmFsdWVzLmluY2x1ZGVzKHgpLFxuICAgICAgKTtcbiAgICAgIGlmICh1c2VyRmlsdGVyU3Vic2V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gVGhlIHVzZXItYXBwbGllZCBmaWx0ZXIgaXMgbW9yZSBleGNsdXNpdmUgdGhhbiB0aGUgYWRtaW4tYXBwbGllZCBmaWx0ZXIuXG4gICAgICAgIGZpbHRlckFCW2tleV0uc2VsZWN0ZWRWYWx1ZXMgPSB1c2VyRmlsdGVyW2tleV0uc2VsZWN0ZWRWYWx1ZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGUgYWRtaW4tYXBwbGllZCBmaWx0ZXIgaXMgbW9yZSBleGNsdXNpdmUgdGhhbiB0aGUgdXNlci1hcHBsaWVkIGZpbHRlci5cbiAgICAgICAgZmlsdGVyQUJba2V5XS5zZWxlY3RlZFZhbHVlcyA9IGFkbWluQXBwbGllZFByZUZpbHRlcltrZXldLnNlbGVjdGVkVmFsdWVzO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFkbWluQXBwbGllZFByZUZpbHRlciwga2V5KSkge1xuICAgICAgZmlsdGVyQUJba2V5XSA9IHsgc2VsZWN0ZWRWYWx1ZXM6IGFkbWluQXBwbGllZFByZUZpbHRlcltrZXldLnNlbGVjdGVkVmFsdWVzIH07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZmlsdGVyQUI7XG59O1xuXG4vKipcbiAgICogVGhpcyBmdW5jdGlvbiB1cGRhdGVzIHRoZSBjb3VudHMgaW4gdGhlIGluaXRpYWwgc2V0IG9mIHRhYiBvcHRpb25zXG4gICAqIGNhbGN1bGF0ZWQgZnJvbSB1bmZpbHRlcmVkIGRhdGEuXG4gICAqIEl0IGlzIHVzZWQgdG8gcmV0YWluIGZpZWxkIG9wdGlvbnMgaW4gdGhlIHJlbmRlcmluZyBpZlxuICAgKiB0aGV5IGFyZSBzdGlsbCBjaGVja2VkIGJ1dCB0aGVpciBjb3VudHMgYXJlIHplcm8uXG4gICAqL1xuZXhwb3J0IGNvbnN0IHVwZGF0ZUNvdW50c0luSW5pdGlhbFRhYnNPcHRpb25zID0gKFxuICBpbml0aWFsVGFic09wdGlvbnMsXG4gIHByb2Nlc3NlZFRhYnNPcHRpb25zLFxuICBmaWx0ZXJzQXBwbGllZCxcbiAgYWNjZXNzaWJsZUZpZWxkQ2hlY2tMaXN0LFxuICBhbGxGaWx0ZXJWYWx1ZXMsXG4pID0+IHtcbiAgY29uc3QgdXBkYXRlZFRhYnNPcHRpb25zID0ge307XG4gIHRyeSB7XG4gICAgLy8gZmxhdHRlbiB0aGUgdGFiIG9wdGlvbnMgZmlyc3RcbiAgICAvLyB7XG4gICAgLy8gICBwcm9qZWN0X2lkLmhpc3RvZ3JhbTogLi4uXG4gICAgLy8gICB2aXNpdC52aXNpdF9sYWJlbC5oaXN0b2dyYW06IC4uLlxuICAgIC8vIH1cbiAgICBjb25zdCBmbGF0dGVuSW5pdGlhbFRhYnNPcHRpb25zID0gZmxhdChpbml0aWFsVGFic09wdGlvbnMsIHsgc2FmZTogdHJ1ZSB9KTtcbiAgICBjb25zdCBmbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnMgPSBmbGF0KHByb2Nlc3NlZFRhYnNPcHRpb25zLCB7IHNhZmU6IHRydWUgfSk7XG4gICAgT2JqZWN0LmtleXMoZmxhdHRlbkluaXRpYWxUYWJzT3B0aW9ucykuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgIC8vIGluIGZsYXR0ZW5lZCB0YWIgb3B0aW9ucywgdG8gZ2V0IGFjdHVhbCBmaWVsZCBuYW1lLCBzdHJpcCBvZmYgdGhlIGxhc3QgJy5oaXN0b2dyYW0nIG9yICcuYXNUZXh0SGlzdG9ncmFtJ1xuICAgICAgY29uc3QgYWN0dWFsRmllbGROYW1lID0gZmllbGQucmVwbGFjZSgnLmhpc3RvZ3JhbScsICcnKS5yZXBsYWNlKCcuYXNUZXh0SGlzdG9ncmFtJywgJycpO1xuXG4gICAgICAvLyBjaGVjayBpZiBGaWx0ZXIgVmFsdWUgaWYgbm90IHNraXBcbiAgICAgIGlmICghYWxsRmlsdGVyVmFsdWVzLmluY2x1ZGVzKGFjdHVhbEZpZWxkTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBwb3NzaWJsZSB0byBoYXZlICcuJyBpbiBhY3R1YWxGaWVsZE5hbWUsIHNvIHVzZSBpdCBhcyBhIHN0cmluZ1xuICAgICAgdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXSA9IHsgaGlzdG9ncmFtOiBbXSB9O1xuICAgICAgLy8gaWYgaW4gdGllcmVkIGFjY2VzcyBtb2RlXG4gICAgICAvLyB3ZSBuZWVkIG5vdCB0byBwcm9jZXNzIGZpbHRlcnMgZm9yIGZpZWxkIGluIGFjY2Vzc2libGVGaWVsZENoZWNrTGlzdFxuICAgICAgaWYgKGFjY2Vzc2libGVGaWVsZENoZWNrTGlzdFxuICAgICAgICAmJiBhY2Nlc3NpYmxlRmllbGRDaGVja0xpc3QuaW5jbHVkZXMoYWN0dWFsRmllbGROYW1lKVxuICAgICAgICAmJiBmbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnNbYCR7ZmllbGR9YF0pIHtcbiAgICAgICAgdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5oaXN0b2dyYW0gPSBmbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnNbYCR7ZmllbGR9YF07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGhpc3RvZ3JhbSA9IGZsYXR0ZW5Jbml0aWFsVGFic09wdGlvbnNbYCR7ZmllbGR9YF07XG4gICAgICBpZiAoIWhpc3RvZ3JhbSB8fCB0eXBlb2YgaGlzdG9ncmFtICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBHdXBweSBkaWQgbm90IHJldHVybiBoaXN0b2dyYW0gZGF0YSBmb3IgZmlsdGVyIGZpZWxkICR7YWN0dWFsRmllbGROYW1lfWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaGlzdG9ncmFtLmZvckVhY2goKG9wdCkgPT4ge1xuICAgICAgICBjb25zdCB7IGtleSB9ID0gb3B0O1xuICAgICAgICBpZiAodHlwZW9mIChrZXkpICE9PSAnc3RyaW5nJykgeyAvLyBrZXkgaXMgYSByYW5nZSwganVzdCBjb3B5IHRoZSBoaXN0b2dyYW1cbiAgICAgICAgICB1cGRhdGVkVGFic09wdGlvbnNbYCR7YWN0dWFsRmllbGROYW1lfWBdLmhpc3RvZ3JhbSA9IGZsYXR0ZW5Jbml0aWFsVGFic09wdGlvbnNbYCR7ZmllbGR9YF07XG4gICAgICAgICAgaWYgKGZsYXR0ZW5Qcm9jZXNzZWRUYWJzT3B0aW9uc1tgJHtmaWVsZH1gXVxuICAgICAgICAgICAgJiYgZmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zW2Ake2ZpZWxkfWBdLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICYmIHVwZGF0ZWRUYWJzT3B0aW9uc1tgJHthY3R1YWxGaWVsZE5hbWV9YF0uaGlzdG9ncmFtKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zID0gZmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zW2Ake2ZpZWxkfWBdWzBdO1xuXG4gICAgICAgICAgICAvLyBpZiBlbXB0eSBjb3VudCBoaXN0b2dyYW0gc2hvdWxkIGJlIHJlbW92ZWQgc28gZmlsdGVyIGlzIG5vdCBzaG93blxuICAgICAgICAgICAgaWYgKGN1cnJlbnRGbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnMuY291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5oaXN0b2dyYW0gPSBbXTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5oaXN0b2dyYW1bMF0uY291bnQgPSBjdXJyZW50RmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zLmNvdW50O1xuICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0gWzAsIDBdO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRGbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnMua2V5WzBdKSB7XG4gICAgICAgICAgICAgIC8vIGJlY2F1c2Ugb2YgdGhlIHByZWZlci1kZXN0cnVjdHVyaW5nIGVzbGludCBydWxlXG4gICAgICAgICAgICAgIGNvbnN0IG5ld0xvd2VyQm91bmQgPSBjdXJyZW50RmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zLmtleVswXTtcbiAgICAgICAgICAgICAgbmV3S2V5WzBdID0gbmV3TG93ZXJCb3VuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXJyZW50RmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zLmtleVsxXSkge1xuICAgICAgICAgICAgICBjb25zdCBuZXdIaWdoZXJCb3VuZCA9IGN1cnJlbnRGbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnMua2V5WzFdO1xuICAgICAgICAgICAgICBuZXdLZXlbMV0gPSBuZXdIaWdoZXJCb3VuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZWRUYWJzT3B0aW9uc1tgJHthY3R1YWxGaWVsZE5hbWV9YF0uaGlzdG9ncmFtWzBdLmtleSA9IG5ld0tleTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmbGF0dGVuUHJvY2Vzc2VkVGFic09wdGlvbnNbYCR7ZmllbGR9YF0pIHtcbiAgICAgICAgICBjb25zdCBmaW5kT3B0ID0gZmxhdHRlblByb2Nlc3NlZFRhYnNPcHRpb25zW2Ake2ZpZWxkfWBdLmZpbmQoKG8pID0+IG8ua2V5ID09PSBrZXkpO1xuICAgICAgICAgIGlmIChmaW5kT3B0KSB7XG4gICAgICAgICAgICBjb25zdCB7IGNvdW50IH0gPSBmaW5kT3B0O1xuICAgICAgICAgICAgdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5oaXN0b2dyYW0ucHVzaCh7IGtleSwgY291bnQgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChmaWx0ZXJzQXBwbGllZFtgJHthY3R1YWxGaWVsZE5hbWV9YF0pIHtcbiAgICAgICAgaWYgKGZpbHRlcnNBcHBsaWVkW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5zZWxlY3RlZFZhbHVlcykge1xuICAgICAgICAgIGZpbHRlcnNBcHBsaWVkW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5zZWxlY3RlZFZhbHVlcy5mb3JFYWNoKChvcHRLZXkpID0+IHtcbiAgICAgICAgICAgIGlmICghdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5oaXN0b2dyYW0uZmluZCgobykgPT4gby5rZXkgPT09IG9wdEtleSkpIHtcbiAgICAgICAgICAgICAgdXBkYXRlZFRhYnNPcHRpb25zW2Ake2FjdHVhbEZpZWxkTmFtZX1gXS5oaXN0b2dyYW0ucHVzaCh7IGtleTogb3B0S2V5LCBjb3VudDogMCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgLy8gaG9wZWZ1bGx5IHdlIHdvbid0IGdldCBoZXJlIGJ1dCBpbiBjYXNlIG9mXG4gICAgLy8gb3V0LW9mLWluZGV4IGVycm9yIG9yIG9iaiB1bmRlZmluZWQgZXJyb3JcbiAgICBjb25zb2xlLmVycm9yKCdlcnJvciB3aGVuIHByb2Nlc3NpbmcgZmlsdGVyIGRhdGE6ICcsIGVycik7XG4gICAgY29uc29sZS50cmFjZSgpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICB9XG4gIHJldHVybiB1cGRhdGVkVGFic09wdGlvbnM7XG59O1xuXG5mdW5jdGlvbiBzb3J0Q291bnRUaGVuQWxwaGEoYSwgYikge1xuICBpZiAoYS5jb3VudCA9PT0gYi5jb3VudCkge1xuICAgIHJldHVybiBhLmtleSA8IGIua2V5ID8gLTEgOiAxO1xuICB9XG4gIHJldHVybiBiLmNvdW50IC0gYS5jb3VudDtcbn1cblxuZXhwb3J0IGNvbnN0IHNvcnRUYWJzT3B0aW9ucyA9ICh0YWJzT3B0aW9ucykgPT4ge1xuICBjb25zdCBmaWVsZHMgPSBPYmplY3Qua2V5cyh0YWJzT3B0aW9ucyk7XG4gIGNvbnN0IHNvcnRlZFRhYnNPcHRpb25zID0geyAuLi50YWJzT3B0aW9ucyB9O1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGZpZWxkcy5sZW5ndGg7IHggKz0gMSkge1xuICAgIGNvbnN0IGZpZWxkID0gZmllbGRzW3hdO1xuXG4gICAgY29uc3Qgb3B0aW9uc0ZvclRoaXNGaWVsZCA9IHNvcnRlZFRhYnNPcHRpb25zW2ZpZWxkXS5oaXN0b2dyYW07XG4gICAgb3B0aW9uc0ZvclRoaXNGaWVsZC5zb3J0KHNvcnRDb3VudFRoZW5BbHBoYSk7XG4gICAgc29ydGVkVGFic09wdGlvbnNbZmllbGRdLmhpc3RvZ3JhbSA9IG9wdGlvbnNGb3JUaGlzRmllbGQ7XG4gIH1cbiAgcmV0dXJuIHNvcnRlZFRhYnNPcHRpb25zO1xufTtcblxuLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gdGFrZXMgdHdvIFRhYnNPcHRpb25zIG9iamVjdCBhbmQgbWVyZ2UgdGhlbSB0b2dldGhlclxuICAgKiBUaGUgb3JkZXIgb2YgbWVyZ2VkIGhpc3RvZ3JhbSBhcnJheSBpcyBwcmVzZXJ2ZWQgYnkgZmlyc3RIaXN0b2dyYW0uY29uY2F0KHNlY29uZEhpc3RvZ3JhbSlcbiAgICovXG5leHBvcnQgY29uc3QgbWVyZ2VUYWJPcHRpb25zID0gKGZpcnN0VGFic09wdGlvbnMsIHNlY29uZFRhYnNPcHRpb25zKSA9PiB7XG4gIGlmICghZmlyc3RUYWJzT3B0aW9ucyB8fCAhT2JqZWN0LmtleXMoZmlyc3RUYWJzT3B0aW9ucykubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHNlY29uZFRhYnNPcHRpb25zO1xuICB9XG4gIGlmICghc2Vjb25kVGFic09wdGlvbnMgfHwgIU9iamVjdC5rZXlzKHNlY29uZFRhYnNPcHRpb25zKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmlyc3RUYWJzT3B0aW9ucztcbiAgfVxuXG4gIGNvbnN0IGFsbE9wdGlvbktleXMgPSBfLnVuaW9uKE9iamVjdC5rZXlzKGZpcnN0VGFic09wdGlvbnMpLCBPYmplY3Qua2V5cyhzZWNvbmRUYWJzT3B0aW9ucykpO1xuICBjb25zdCBtZXJnZWRUYWJPcHRpb25zID0ge307XG4gIGFsbE9wdGlvbktleXMuZm9yRWFjaCgob3B0S2V5KSA9PiB7XG4gICAgaWYgKCFtZXJnZWRUYWJPcHRpb25zW2Ake29wdEtleX1gXSkge1xuICAgICAgbWVyZ2VkVGFiT3B0aW9uc1tgJHtvcHRLZXl9YF0gPSB7fTtcbiAgICB9XG4gICAgaWYgKCFtZXJnZWRUYWJPcHRpb25zW2Ake29wdEtleX1gXS5oaXN0b2dyYW0pIHtcbiAgICAgIG1lcmdlZFRhYk9wdGlvbnNbYCR7b3B0S2V5fWBdLmhpc3RvZ3JhbSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBmaXJzdEhpc3RvZ3JhbSA9IChmaXJzdFRhYnNPcHRpb25zW2Ake29wdEtleX1gXSAmJiBmaXJzdFRhYnNPcHRpb25zW2Ake29wdEtleX1gXS5oaXN0b2dyYW0pID8gZmlyc3RUYWJzT3B0aW9uc1tgJHtvcHRLZXl9YF0uaGlzdG9ncmFtIDogW107XG4gICAgY29uc3Qgc2Vjb25kSGlzdG9ncmFtID0gKHNlY29uZFRhYnNPcHRpb25zW2Ake29wdEtleX1gXSAmJiBzZWNvbmRUYWJzT3B0aW9uc1tgJHtvcHRLZXl9YF0uaGlzdG9ncmFtKSA/IHNlY29uZFRhYnNPcHRpb25zW2Ake29wdEtleX1gXS5oaXN0b2dyYW0gOiBbXTtcbiAgICBtZXJnZWRUYWJPcHRpb25zW2Ake29wdEtleX1gXS5oaXN0b2dyYW0gPSBmaXJzdEhpc3RvZ3JhbS5jb25jYXQoc2Vjb25kSGlzdG9ncmFtKTtcbiAgfSk7XG4gIHJldHVybiBtZXJnZWRUYWJPcHRpb25zO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkRmlsdGVyU3RhdHVzRm9yVVJMRmlsdGVyID0gKHVzZXJGaWx0ZXIsIHRhYnMpID0+IHtcbiAgLy8gQ29udmVydHMgZmlsdGVyLWFwcGxpZWQgZm9ybSB0byBmaWx0ZXItZGlzcGxheWVkIGZvcm1cbiAgLy8gVE9ETzogYWRkIHN1cHBvcnQgZm9yIHNlYXJjaCBmaWx0ZXJzXG4gIGNvbnN0IGZpbHRlcmluZ0ZpZWxkcyA9IE9iamVjdC5rZXlzKHVzZXJGaWx0ZXIpO1xuICBjb25zdCBmaWx0ZXJTdGF0dXNBcnJheSA9IHRhYnMubWFwKCgpID0+IChbXSkpO1xuXG4gIGZvciAobGV0IHRhYkluZGV4ID0gMDsgdGFiSW5kZXggPCB0YWJzLmxlbmd0aDsgdGFiSW5kZXggKz0gMSkge1xuICAgIGNvbnN0IGFsbEZpZWxkc0ZvclRoaXNUYWIgPSBfLnVuaW9uKHRhYnNbdGFiSW5kZXhdLmZpZWxkcywgdGFic1t0YWJJbmRleF0uYXNUZXh0QWdnRmllbGRzIHx8IFtdKTtcbiAgICBmaWx0ZXJTdGF0dXNBcnJheVt0YWJJbmRleF0gPSBhbGxGaWVsZHNGb3JUaGlzVGFiLm1hcCgoKSA9PiAoe30pKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbHRlcmluZ0ZpZWxkcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2VjdGlvbkluZGV4ID0gYWxsRmllbGRzRm9yVGhpc1RhYi5pbmRleE9mKGZpbHRlcmluZ0ZpZWxkc1tpXSk7XG4gICAgICBpZiAoc2VjdGlvbkluZGV4ICE9PSAtMSkge1xuICAgICAgICBsZXQgdXNlckZpbHRlclNtYWxsRm9ybSA9IHt9O1xuICAgICAgICBjb25zdCBmaWx0ZXJWYXIgPSB1c2VyRmlsdGVyW2ZpbHRlcmluZ0ZpZWxkc1tpXV07XG4gICAgICAgIGlmICh0eXBlb2YgZmlsdGVyVmFyID09PSAnb2JqZWN0JyAmJiBmaWx0ZXJWYXIuc2VsZWN0ZWRWYWx1ZXMpIHtcbiAgICAgICAgICAvLyBTaW5nbGUgc2VsZWN0IHZhbHVlczpcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGZpbHRlclZhci5zZWxlY3RlZFZhbHVlcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgdXNlckZpbHRlclNtYWxsRm9ybVtmaWx0ZXJWYXIuc2VsZWN0ZWRWYWx1ZXNbal1dID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpbHRlclZhciA9PT0gJ29iamVjdCdcbiAgICAgICAgICAmJiAoZmlsdGVyVmFyLmxvd2VyQm91bmQgfHwgZmlsdGVyVmFyLnVwcGVyQm91bmQpKSB7XG4gICAgICAgICAgLy8gUmFuZ2UgdmFsdWVzOlxuICAgICAgICAgIHVzZXJGaWx0ZXJTbWFsbEZvcm0gPSBbZmlsdGVyVmFyLmxvd2VyQm91bmQsIGZpbHRlclZhci51cHBlckJvdW5kXTtcbiAgICAgICAgfVxuICAgICAgICBmaWx0ZXJTdGF0dXNBcnJheVt0YWJJbmRleF1bc2VjdGlvbkluZGV4XSA9IHVzZXJGaWx0ZXJTbWFsbEZvcm07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpbHRlclN0YXR1c0FycmF5O1xufTtcbiJdLCJtYXBwaW5ncyI6ImdQQUFBLElBQUFBLEtBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQSxZQUF1QixTQUFBRCx1QkFBQUcsQ0FBQSxVQUFBQSxDQUFBLElBQUFBLENBQUEsQ0FBQUMsVUFBQSxHQUFBRCxDQUFBLGdCQUFBQSxDQUFBLGFBQUFFLFFBQUFDLENBQUEsb0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGlCQUFBQSxDQUFBLGVBQUFBLENBQUEsVUFBQUEsQ0FBQSx5QkFBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxxQkFBQUosQ0FBQSxJQUFBRCxPQUFBLENBQUFDLENBQUEsWUFBQUssUUFBQVIsQ0FBQSxFQUFBUyxDQUFB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