"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _FilterSection = _interopRequireDefault(require("../FilterSection"));
require("./FilterList.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var FilterList = /*#__PURE__*/function (_React$Component) {
  _inherits(FilterList, _React$Component);
  var _super = _createSuper(FilterList);
  function FilterList(props) {
    var _this;
    _classCallCheck(this, FilterList);
    _this = _super.call(this, props);
    var initialFilterStatus = props.sections.map(function () {
      return {};
    });
    if (props.filterStatusFromParent && props.filterStatusFromParent.length > 0) {
      initialFilterStatus = props.filterStatusFromParent.map(function (x) {
        return _objectSpread({}, x);
      });
    }
    _this.state = {
      /**
       * Current selected status for filters,
       * filterStatus[sectionIndex] = { [field]: true/false/[upperBound,lowerBound]}
       */
      filterStatus: initialFilterStatus
    };
    _this.sectionRefs = props.sections.map(function () {
      return /*#__PURE__*/_react["default"].createRef();
    });
    return _this;
  }
  _createClass(FilterList, [{
    key: "handleSectionToggle",
    value: function handleSectionToggle(sectionIndex, newExpanded) {
      this.props.onToggle(sectionIndex, newExpanded);
    }
  }, {
    key: "handleSectionClear",
    value: function handleSectionClear(sectionIndex) {
      this.setState(function (prevState) {
        var newFilterStatus = prevState.filterStatus.slice(0);
        newFilterStatus[sectionIndex] = {};
        return {
          filterStatus: newFilterStatus
        };
      });
      this.props.onClear(sectionIndex);
    }
  }, {
    key: "handleSelectSingleFilter",
    value: function handleSelectSingleFilter(sectionIndex, singleFilterLabel) {
      this.setState(function (prevState) {
        var newFilterStatus = prevState.filterStatus.slice(0);
        var oldSelected = newFilterStatus[sectionIndex][singleFilterLabel];
        var newSelected = typeof oldSelected === 'undefined' ? true : !oldSelected;
        newFilterStatus[sectionIndex][singleFilterLabel] = newSelected;
        return {
          filterStatus: newFilterStatus
        };
      });
      this.props.onSelect(sectionIndex, singleFilterLabel);
    }
  }, {
    key: "handleSelectCombineOptionToggle",
    value: function handleSelectCombineOptionToggle(sectionIndex, fieldName, value) {
      this.setState(function (prevState) {
        var newFilterStatus = prevState.filterStatus.slice(0);
        newFilterStatus[sectionIndex][fieldName] = value;
        return {
          filterStatus: newFilterStatus
        };
      });
      this.props.onCombineOptionToggle(sectionIndex, fieldName, value);
    }
  }, {
    key: "handleDragRangeFilter",
    value: function handleDragRangeFilter(sectionIndex, lowerBound, upperBound, minValue, maxValue, rangeStep) {
      this.setState(function (prevState) {
        var newFilterStatus = prevState.filterStatus.slice(0);
        newFilterStatus[sectionIndex] = [lowerBound, upperBound];
        return {
          filterStatus: newFilterStatus
        };
      });
      this.props.onAfterDrag(sectionIndex, lowerBound, upperBound, minValue, maxValue, rangeStep);
    }
  }, {
    key: "toggleFilters",
    value: function toggleFilters(openAll) {
      this.sectionRefs.forEach(function (ref) {
        ref.current.toggleSection(openAll);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      // Takes in parent component's filterStatus or self state's filterStatus
      var filtersInProps = this.props.filterStatusFromParent ? this.props.filterStatusFromParent.map(function (x) {
        return Object.keys(x);
      }).flat() : [];
      var filterStatus = filtersInProps.length > 0 ? this.props.filterStatusFromParent : this.state.filterStatus;
      var filterSectionToShow = [];
      this.props.sections.forEach(function (section, index) {
        if (_this2.props.hideEmptyFilterSection && section.options.length === 0) {
          return;
        }
        filterSectionToShow.push( /*#__PURE__*/_react["default"].createElement(_FilterSection["default"], {
          key: index,
          index: index,
          ref: _this2.sectionRefs[index],
          title: section.title,
          tooltip: section.tooltip,
          options: section.options,
          isSearchFilter: section.isSearchFilter,
          isArrayField: section.isArrayField,
          onSearchFilterLoadOptions: section.onSearchFilterLoadOptions,
          expanded: _this2.props.expandedStatus[index],
          onToggle: function onToggle(newExpanded) {
            return _this2.handleSectionToggle(index, newExpanded);
          },
          onClear: function onClear() {
            return _this2.handleSectionClear(index);
          },
          filterStatus: filterStatus[index],
          onSelect: function onSelect(singleFilterLabel) {
            return _this2.handleSelectSingleFilter(index, singleFilterLabel);
          },
          onCombineOptionToggle: function onCombineOptionToggle(combineModeFieldName, combineModeValue) {
            return _this2.handleSelectCombineOptionToggle(index, combineModeFieldName, combineModeValue);
          },
          onAfterDrag: function onAfterDrag() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            return _this2.handleDragRangeFilter.apply(_this2, [index].concat(args));
          },
          hideZero: _this2.props.hideZero,
          tierAccessLimit: _this2.props.tierAccessLimit,
          lockedTooltipMessage: _this2.props.lockedTooltipMessage,
          disabledTooltipMessage: _this2.props.disabledTooltipMessage
        }));
      });
      // if no filters in tab add message
      if (filterSectionToShow.length === 0) {
        filterSectionToShow.push( /*#__PURE__*/_react["default"].createElement("div", {
          key: "g3-filter-list-empty",
          className: "g3-filter-list-empty g3-filter-section"
        }, /*#__PURE__*/_react["default"].createElement("h4", null, "Selected Data Does NOT Include", /*#__PURE__*/_react["default"].createElement("br", null), "These Filters")));
      }
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-filter-list"
      }, filterSectionToShow);
    }
  }]);
  return FilterList;
}(_react["default"].Component);
FilterList.propTypes = {
  sections: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    title: _propTypes["default"].string,
    tooltip: _propTypes["default"].string,
    options: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      text: _propTypes["default"].string,
      filterType: _propTypes["default"].oneOf(['singleSelect', 'range']),
      // for single select filter
      count: _propTypes["default"].number,
      hideZero: _propTypes["default"].bool,
      accessible: _propTypes["default"].bool,
      disabled: _propTypes["default"].bool,
      // for range filter
      min: _propTypes["default"].number,
      max: _propTypes["default"].number
    }))
  })).isRequired,
  expandedStatus: _propTypes["default"].arrayOf(_propTypes["default"].bool),
  onToggle: _propTypes["default"].func,
  onClear: _propTypes["default"].func,
  filterStatusFromParent: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].arrayOf(_propTypes["default"].number)])),
  onSelect: _propTypes["default"].func,
  onCombineOptionToggle: _propTypes["default"].func,
  onAfterDrag: _propTypes["default"].func,
  hideZero: _propTypes["default"].bool,
  hideEmptyFilterSection: _propTypes["default"].bool,
  tierAccessLimit: _propTypes["default"].number,
  lockedTooltipMessage: _propTypes["default"].string,
  disabledTooltipMessage: _propTypes["default"].string
};
FilterList.defaultProps = {
  expandedStatus: [],
  onToggle: function onToggle() {},
  onClear: function onClear() {},
  filterStatusFromParent: undefined,
  onSelect: function onSelect() {},
  onCombineOptionToggle: function onCombineOptionToggle() {},
  onAfterDrag: function onAfterDrag() {},
  hideZero: true,
  hideEmptyFilterSection: false,
  tierAccessLimit: undefined,
  lockedTooltipMessage: '',
  disabledTooltipMessage: ''
};
var _default = FilterList;
exports["default"] = _default;