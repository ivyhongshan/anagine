"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _rcSlider = require("rc-slider");
require("rc-slider/assets/index.css");
require("./RangeFilter.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var RangeFilter = /*#__PURE__*/function (_React$Component) {
  _inherits(RangeFilter, _React$Component);
  var _super = _createSuper(RangeFilter);
  function RangeFilter(props) {
    var _this;
    _classCallCheck(this, RangeFilter);
    _this = _super.call(this, props);
    // Set lower/upper bounds to min/max if they are undefined or outside the range of [min, max]
    var lowerBound = props.lowerBound && props.lowerBound >= props.min ? props.lowerBound : props.min;
    var upperBound = props.upperBound && props.upperBound <= props.max ? props.upperBound : props.max;
    _this.state = {
      lowerBound: lowerBound,
      upperBound: upperBound,
      lowerBoundInputValue: lowerBound,
      upperBoundInputValue: upperBound
    };
    return _this;
  }
  _createClass(RangeFilter, [{
    key: "handleLowerBoundInputChange",
    value: function handleLowerBoundInputChange(value) {
      this.setState({
        lowerBoundInputValue: value
      });
    }
  }, {
    key: "handleUpperBoundInputChange",
    value: function handleUpperBoundInputChange(value) {
      this.setState({
        upperBoundInputValue: value
      });
    }
  }, {
    key: "handleInputSubmit",
    value: function handleInputSubmit() {
      var _this2 = this;
      // Convert the input values to a float
      var newLowerBound = Number.parseFloat(this.state.lowerBoundInputValue);
      var newUpperBound = Number.parseFloat(this.state.upperBoundInputValue);
      if (Number.isNaN(newLowerBound) || Number.isNaN(newUpperBound)) {
        // If the conversion to float fails, set lowerBoundInputValue to current lowerBound.
        this.setState(function (prevState) {
          return {
            lowerBoundInputValue: prevState.lowerBound,
            upperBoundInputValue: prevState.upperBound
          };
        });
        return;
      }

      // If count === hideValue, prevent lowerBound from increasing and upperBound from decreasing
      var tieredAccessLockEnabled = this.props.count === this.props.hideValue;
      if (tieredAccessLockEnabled) {
        if (newLowerBound > this.state.lowerBound || newUpperBound < this.state.upperBound) {
          this.setState(function (prevState) {
            return {
              lowerBoundInputValue: prevState.lowerBound,
              upperBoundInputValue: prevState.upperBound
            };
          });
          return;
        }
      }

      // Clamp newLowerBound to [min, upperBound]
      if (newLowerBound < this.props.min) {
        newLowerBound = this.props.min;
      }
      if (newLowerBound > this.state.upperBound) {
        newLowerBound = this.state.upperBound;
      }

      // Clamp newUpperBound to [lowerBound, max]
      if (newUpperBound < this.state.lowerBound) {
        newUpperBound = this.state.lowerBound;
      }
      if (newUpperBound > this.props.max) {
        newUpperBound = this.props.max;
      }

      // If the bounds have changed, set upperBound/lowerBound state and call onAfterDrag.
      if (newLowerBound !== this.state.lowerBound || newUpperBound !== this.state.upperBound) {
        this.setState({
          lowerBound: newLowerBound,
          upperBound: newUpperBound,
          lowerBoundInputValue: newLowerBound,
          upperBoundInputValue: newUpperBound
        }, function () {
          _this2.props.onAfterDrag(newLowerBound, newUpperBound, _this2.props.min, _this2.props.max, _this2.props.rangeStep);
        });
      } else {
        // Otherwise, reset the input values.
        this.setState(function (prevState) {
          return {
            lowerBoundInputValue: prevState.lowerBound,
            upperBoundInputValue: prevState.upperBound
          };
        });
      }
    }
  }, {
    key: "onSliderChange",
    value: function onSliderChange(range) {
      var _this3 = this;
      this.setState(function (prevState) {
        var lowerBound = _this3.props.count === _this3.props.hideValue && prevState.lowerBound < range[0] ? prevState.lowerBound : range[0];
        var upperBound = _this3.props.count === _this3.props.hideValue && prevState.upperBound > range[1] ? prevState.upperBound : range[1];
        return {
          sliderChanged: true,
          lowerBound: lowerBound,
          upperBound: upperBound,
          lowerBoundInputValue: lowerBound,
          upperBoundInputValue: upperBound
        };
      }, function () {
        if (_this3.props.onDrag) {
          _this3.props.onDrag(_this3.state.lowerBound, _this3.state.upperBound);
        }
      });
    }
  }, {
    key: "onAfterSliderChange",
    value: function onAfterSliderChange() {
      if (this.state.sliderChanged && this.props.onAfterDrag) {
        this.props.onAfterDrag(this.state.lowerBound, this.state.upperBound, this.props.min, this.props.max, this.props.rangeStep);
      }
    }
  }, {
    key: "getNumberToFixed",
    value: function getNumberToFixed(num) {
      return Number.isInteger(num) ? num : Number.parseFloat(Number.parseFloat(num).toFixed(this.props.decimalDigitsLen));
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-range-filter"
      }, this.props.label && /*#__PURE__*/_react["default"].createElement("p", {
        className: "g3-range-filter__title"
      }, this.props.label), /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-range-filter__bounds"
      }, /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: "".concat(this.props.label, "-lower-bound-input")
      }, "Min:\xA0", /*#__PURE__*/_react["default"].createElement("input", {
        type: "number",
        id: "".concat(this.props.label, "-lower-bound-input"),
        min: this.props.min,
        max: this.state.upperBound !== undefined ? this.state.upperBound : this.props.max,
        value: this.state.lowerBoundInputValue,
        onChange: function onChange(ev) {
          return _this4.handleLowerBoundInputChange(ev.currentTarget.value);
        },
        onKeyPress: function onKeyPress(ev) {
          if (ev.key === 'Enter') {
            _this4.handleInputSubmit();
          }
        },
        onBlur: function onBlur() {
          return _this4.handleInputSubmit();
        },
        className: "g3-range-filter__bound g3-range-filter__bound--lower"
      })), /*#__PURE__*/_react["default"].createElement("label", {
        htmlFor: "".concat(this.props.label, "-upper-bound-input")
      }, "Max:\xA0", /*#__PURE__*/_react["default"].createElement("input", {
        type: "number",
        id: "".concat(this.props.label, "-upper-bound-input"),
        min: this.state.lowerBound !== undefined ? this.state.lowerBound : this.props.min,
        max: this.props.max,
        value: this.state.upperBoundInputValue,
        onChange: function onChange(ev) {
          return _this4.handleUpperBoundInputChange(ev.currentTarget.value);
        },
        onKeyPress: function onKeyPress(ev) {
          if (ev.key === 'Enter') {
            _this4.handleInputSubmit();
          }
        },
        onBlur: function onBlur() {
          return _this4.handleInputSubmit();
        },
        className: "g3-range-filter__bound g3-range-filter__bound--lower"
      }))), /*#__PURE__*/_react["default"].createElement(_rcSlider.Range, {
        className: "g3-range-filter__slider ".concat(this.props.inactive ? 'g3-range-filter__slider--inactive' : ''),
        min: this.getNumberToFixed(this.props.min),
        max: this.getNumberToFixed(this.props.max),
        value: [this.getNumberToFixed(this.state.lowerBound), this.getNumberToFixed(this.state.upperBound)],
        onChange: function onChange(e) {
          return _this4.onSliderChange(e);
        },
        onAfterChange: function onAfterChange() {
          return _this4.onAfterSliderChange();
        },
        step: this.props.rangeStep
      }));
    }
  }]);
  return RangeFilter;
}(_react["default"].Component);
RangeFilter.propTypes = {
  label: _propTypes["default"].string,
  onDrag: _propTypes["default"].func,
  onAfterDrag: _propTypes["default"].func.isRequired,
  min: _propTypes["default"].number.isRequired,
  max: _propTypes["default"].number.isRequired,
  lowerBound: _propTypes["default"].number,
  upperBound: _propTypes["default"].number,
  decimalDigitsLen: _propTypes["default"].number,
  rangeStep: _propTypes["default"].number,
  hideValue: _propTypes["default"].number,
  count: _propTypes["default"].number,
  inactive: _propTypes["default"].bool
};
RangeFilter.defaultProps = {
  label: '',
  lowerBound: undefined,
  upperBound: undefined,
  onDrag: function onDrag() {},
  decimalDigitsLen: 2,
  rangeStep: 1,
  hideValue: -1,
  count: 0,
  inactive: false
};
var _default = RangeFilter;
exports["default"] = _default;