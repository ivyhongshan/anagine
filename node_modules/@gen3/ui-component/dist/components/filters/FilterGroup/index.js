"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
require("./FilterGroup.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var removeEmptyFilter = function removeEmptyFilter(filterResults) {
  var newFilterResults = {};
  Object.keys(filterResults).forEach(function (field) {
    var containsRangeFilter = typeof filterResults[field].lowerBound !== 'undefined';
    var containsCheckboxFilter = filterResults[field].selectedValues && filterResults[field].selectedValues.length > 0;
    // Filter settings are prefaced with two underscores, e.g., __combineMode
    var configFields = Object.keys(filterResults[field]).filter(function (x) {
      return x.startsWith('__');
    });
    // A given config setting is still informative to Guppy even if the setting becomes empty
    var containsConfigSetting = configFields.length > 0;
    if (containsRangeFilter || containsCheckboxFilter || containsConfigSetting) {
      newFilterResults[field] = filterResults[field];
    }
  });
  return newFilterResults;
};
var tabHasActiveFilters = function tabHasActiveFilters(tabFilterStatus) {
  /**
   * tabFilterStatus[sectionIndex] = { [field]: true/false/[upperBound,lowerBound]}
   */
  var hasActiveFilters = false;
  tabFilterStatus.forEach(function (section) {
    var fieldStatuses = Object.values(section);
    if (fieldStatuses.some(function (status) {
      return status !== undefined && status !== false;
    })) {
      hasActiveFilters = true;
    }
  });
  return hasActiveFilters;
};
var FilterGroup = /*#__PURE__*/function (_React$Component) {
  _inherits(FilterGroup, _React$Component);
  var _super = _createSuper(FilterGroup);
  function FilterGroup(props) {
    var _this;
    _classCallCheck(this, FilterGroup);
    _this = _super.call(this, props);
    var initialExpandedStatusControl = true;
    var initialExpandedStatus = props.filterConfig.tabs.map(function (t) {
      return t.fields.map(function () {
        return initialExpandedStatusControl;
      });
    });
    var initialFilterStatus = props.filterConfig.tabs.map(function (t) {
      return t.fields.map(function () {
        return {};
      });
    });
    if (props.filterStatusFromParent && props.filterStatusFromParent.length > 0) {
      initialFilterStatus = props.filterStatusFromParent.map(function (t) {
        return t.map(function (x) {
          return _objectSpread({}, x);
        });
      });
    }
    var initialFilterResults = {};
    if (props.filterResultsFromParent && Object.keys(props.filterResultsFromParent).length > 0) {
      initialFilterResults = _objectSpread({}, props.filterResultsFromParent);
    }
    _this.state = {
      selectedTabIndex: 0,
      expandedStatus: initialExpandedStatus,
      expandedStatusText: 'Collapse all',
      expandedStatusControl: initialExpandedStatusControl,
      /**
       * Current selected status for filters,
       * filterStatus[tabIndex][sectionIndex] = { [field]: true | false } | [upperBound,lowerBound]
       */
      filterStatus: initialFilterStatus,
      /**
       * Currently filtered items, example:
       *   {
       *     'file_format': {
       *        'selectedValues': ['CSV', 'TAR'],
       *     },
       *     'file_count': {
       *        'lowerBound': 5,
       *        'upperBound': 30,
       *     },
       *     ...
       *   }
       */
      filterResults: initialFilterResults
    };
    _this.currentFilterListRef = /*#__PURE__*/_react["default"].createRef();
    return _this;
  }
  _createClass(FilterGroup, [{
    key: "handleToggle",
    value: function handleToggle(tabIndex, sectionIndex, newSectionExpandedStatus) {
      this.setState(function (prevState) {
        var newExpandedStatus = prevState.expandedStatus.slice(0);
        newExpandedStatus[tabIndex][sectionIndex] = newSectionExpandedStatus;
        return {
          expandedStatus: newExpandedStatus
        };
      });
    }
  }, {
    key: "handleSectionClear",
    value: function handleSectionClear(tabIndex, sectionIndex) {
      var _this2 = this;
      this.setState(function (prevState) {
        // update filter status
        var newFilterStatus = prevState.filterStatus.slice(0);
        newFilterStatus[tabIndex][sectionIndex] = {};

        // update filter results; clear the results for this filter
        var newFilterResults = _objectSpread({}, prevState.filterResults);
        var field = _this2.props.filterConfig.tabs[tabIndex].fields[sectionIndex];
        newFilterResults[field] = {};
        newFilterResults = removeEmptyFilter(newFilterResults);

        // update component state
        return {
          filterStatus: newFilterStatus,
          filterResults: newFilterResults
        };
      }, function () {
        _this2.callOnFilterChange();
      });
    }
  }, {
    key: "handleCombineOptionToggle",
    value: function handleCombineOptionToggle(sectionIndex, combineModeFieldName, combineModeValue) {
      var _this3 = this;
      // The combine option toggle (also known as the and/or option toggle)
      this.setState(function (prevState) {
        // update filter status
        var newFilterStatus = prevState.filterStatus.slice(0);
        var tabIndex = prevState.selectedTabIndex;
        newFilterStatus[tabIndex][sectionIndex][combineModeFieldName] = combineModeValue;

        // update filter results
        var newFilterResults = prevState.filterResults;
        var field = _this3.props.filterConfig.tabs[tabIndex].fields[sectionIndex];
        if (typeof newFilterResults[field] === 'undefined') {
          newFilterResults[field] = {};
          newFilterResults[field][combineModeFieldName] = combineModeValue;
        } else {
          newFilterResults[field][combineModeFieldName] = combineModeValue;
        }
        newFilterResults = removeEmptyFilter(newFilterResults);
        // update component state
        return {
          filterStatus: newFilterStatus,
          filterResults: newFilterResults
        };
      }, function () {
        // If no other filter is applied, the combineMode is not yet useful to Guppy
        var tabIndex = _this3.state.selectedTabIndex;
        var field = _this3.props.filterConfig.tabs[tabIndex].fields[sectionIndex];
        if (_this3.state.filterResults[field].selectedValues && _this3.state.filterResults[field].selectedValues.length > 0) {
          _this3.callOnFilterChange();
        }
      });
    }
  }, {
    key: "handleSelect",
    value: function handleSelect(sectionIndex, singleFilterLabel) {
      var _this4 = this;
      this.setState(function (prevState) {
        // update filter status
        var newFilterStatus = prevState.filterStatus.slice(0);
        var tabIndex = prevState.selectedTabIndex;
        var oldSelected = newFilterStatus[tabIndex][sectionIndex][singleFilterLabel];
        var newSelected = typeof oldSelected === 'undefined' ? true : !oldSelected;
        newFilterStatus[tabIndex][sectionIndex][singleFilterLabel] = newSelected;

        // update filter results
        var newFilterResults = prevState.filterResults;
        var field = _this4.props.filterConfig.tabs[tabIndex].fields[sectionIndex];
        if (typeof newFilterResults[field] === 'undefined') {
          newFilterResults[field] = {
            selectedValues: [singleFilterLabel]
          };
        } else if (typeof newFilterResults[field].selectedValues === 'undefined') {
          newFilterResults[field].selectedValues = [singleFilterLabel];
        } else {
          var findIndex = newFilterResults[field].selectedValues.indexOf(singleFilterLabel);
          if (findIndex >= 0 && !newSelected) {
            newFilterResults[field].selectedValues.splice(findIndex, 1);
          } else if (findIndex < 0 && newSelected) {
            newFilterResults[field].selectedValues.push(singleFilterLabel);
          }
        }
        newFilterResults = removeEmptyFilter(newFilterResults);
        // update component state
        return {
          filterStatus: newFilterStatus,
          filterResults: newFilterResults
        };
      }, function () {
        _this4.callOnFilterChange();
      });
    }
  }, {
    key: "handleDrag",
    value: function handleDrag(sectionIndex, lowerBound, upperBound, minValue, maxValue) {
      var _this5 = this;
      var rangeStep = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
      this.setState(function (prevState) {
        // update filter status
        var newFilterStatus = prevState.filterStatus.slice(0);
        newFilterStatus[prevState.selectedTabIndex][sectionIndex] = [lowerBound, upperBound];

        // update filter results
        var newFilterResults = prevState.filterResults;
        var field = _this5.props.filterConfig.tabs[prevState.selectedTabIndex].fields[sectionIndex];
        newFilterResults[field] = {
          lowerBound: lowerBound,
          upperBound: upperBound
        };

        // if lowerbound and upperbound values are min and max,
        // remove this range from filter
        var jsEqual = function jsEqual(a, b) {
          return Math.abs(a - b) < rangeStep;
        };
        if (jsEqual(lowerBound, minValue) && jsEqual(upperBound, maxValue)) {
          delete newFilterResults[field];
        }
        newFilterResults = removeEmptyFilter(newFilterResults);
        return {
          filterStatus: newFilterStatus,
          filterResults: newFilterResults
        };
      }, function () {
        _this5.callOnFilterChange();
      });
    }
  }, {
    key: "selectTab",
    value: function selectTab(index) {
      this.setState({
        selectedTabIndex: index
      });
    }
  }, {
    key: "resetFilter",
    value: function resetFilter() {
      this.setState(function (prevState) {
        var oldFilterStatus = prevState.filterStatus;
        var resetStatus = oldFilterStatus.map(function (oldSectionStatus) {
          var sectionStatus = oldSectionStatus.map(function (oldEntry) {
            if (!oldEntry || Object.keys(oldEntry).length === 0) return oldEntry;
            var newEntry = Object.keys(oldEntry).reduce(function (res, key) {
              res[key] = false;
              return res;
            }, {});
            return newEntry;
          });
          return sectionStatus;
        });
        return {
          filterStatus: resetStatus,
          filterResults: {}
        };
      });
    }
  }, {
    key: "callOnFilterChange",
    value: function callOnFilterChange() {
      this.props.onFilterChange(this.state.filterResults);
    }
  }, {
    key: "toggleFilters",
    value: function toggleFilters() {
      var _this6 = this;
      this.setState(function (prevState) {
        _this6.currentFilterListRef.current.toggleFilters(!prevState.expandedStatusControl);
        return {
          expandedStatus: _this6.props.filterConfig.tabs.map(function (t) {
            return t.fields.map(function () {
              return !prevState.expandedStatusControl;
            });
          }),
          expandedStatusText: !prevState.expandedStatusControl ? 'Collapse all' : 'Open all',
          expandedStatusControl: !prevState.expandedStatusControl
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this7 = this;
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-filter-group ".concat(this.props.className)
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-filter-group__tabs"
      }, this.props.tabs.map(function (tab, index) {
        return /*#__PURE__*/_react["default"].createElement("div", {
          key: index,
          role: "tab",
          tabIndex: "0",
          className: 'g3-filter-group__tab'.concat(_this7.state.selectedTabIndex === index ? ' g3-filter-group__tab--selected' : ''),
          onClick: function onClick() {
            return _this7.selectTab(index);
          },
          onKeyDown: function onKeyDown(event) {
            if (event.key === 'Enter') {
              _this7.selectTab(index);
            }
          },
          "aria-selected": _this7.state.selectedTabIndex === index ? 'true' : 'false'
        }, /*#__PURE__*/_react["default"].createElement("p", {
          className: "g3-filter-group__tab-title ".concat(tabHasActiveFilters(_this7.state.filterStatus[index]) ? 'g3-filter-group__tab-title--has-active-filters' : '')
        }, _this7.props.filterConfig.tabs[index].title));
      })), /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-filter-group__collapse"
      }, /*#__PURE__*/_react["default"].createElement("span", {
        className: "g3-link g3-filter-group__collapse-link",
        onClick: function onClick() {
          return _this7.toggleFilters();
        },
        onKeyPress: function onKeyPress() {
          return _this7.toggleFilters();
        },
        role: "button",
        tabIndex: 0,
        "aria-expanded": this.state.expandedStatusControl
      }, this.state.expandedStatusText)), /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-filter-group__filter-area"
      }, /*#__PURE__*/_react["default"].cloneElement(this.props.tabs[this.state.selectedTabIndex], {
        onToggle: function onToggle(sectionIndex, newSectionExpandedStatus) {
          return _this7.handleToggle(_this7.state.selectedTabIndex, sectionIndex, newSectionExpandedStatus);
        },
        onClear: function onClear(sectionIndex) {
          return _this7.handleSectionClear(_this7.state.selectedTabIndex, sectionIndex);
        },
        expandedStatus: this.state.expandedStatus[this.state.selectedTabIndex],
        filterStatus: this.state.filterStatus[this.state.selectedTabIndex],
        onSelect: this.handleSelect.bind(this),
        onCombineOptionToggle: this.handleCombineOptionToggle.bind(this),
        onAfterDrag: this.handleDrag.bind(this),
        hideZero: this.props.hideZero,
        ref: this.currentFilterListRef
      })));
    }
  }]);
  return FilterGroup;
}(_react["default"].Component);
FilterGroup.propTypes = {
  tabs: _propTypes["default"].arrayOf(_propTypes["default"].object).isRequired,
  filterConfig: _propTypes["default"].shape({
    tabs: _propTypes["default"].arrayOf(_propTypes["default"].shape({
      title: _propTypes["default"].string,
      fields: _propTypes["default"].arrayOf(_propTypes["default"].string)
    }))
  }).isRequired,
  onFilterChange: _propTypes["default"].func,
  hideZero: _propTypes["default"].bool,
  className: _propTypes["default"].string,
  filterStatusFromParent: _propTypes["default"].arrayOf(_propTypes["default"].any),
  filterResultsFromParent: _propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].arrayOf(_propTypes["default"].number)])
};
FilterGroup.defaultProps = {
  onFilterChange: function onFilterChange() {},
  hideZero: true,
  className: '',
  filterStatusFromParent: undefined,
  filterResultsFromParent: undefined
};
var _default = FilterGroup;
exports["default"] = _default;