"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _DropdownButton = _interopRequireDefault(require("./DropdownButton"));
var _DropdownItem = _interopRequireDefault(require("./DropdownItem"));
var _DropdownMenu = _interopRequireDefault(require("./DropdownMenu"));
var _DropdownMenuDivider = _interopRequireDefault(require("./DropdownMenuDivider"));
require("./Dropdown.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var Dropdown = /*#__PURE__*/function (_Component) {
  _inherits(Dropdown, _Component);
  var _super = _createSuper(Dropdown);
  function Dropdown(props) {
    var _this;
    _classCallCheck(this, Dropdown);
    _this = _super.call(this, props);
    _this.state = {
      menuOpen: false
    };
    _this.menuTriggerElementRef = /*#__PURE__*/_react["default"].createRef();
    return _this;
  }
  _createClass(Dropdown, [{
    key: "handleTriggerMenu",
    value: function handleTriggerMenu() {
      if (this.props.disabled) {
        return;
      }
      this.setState(function (state) {
        return {
          menuOpen: !state.menuOpen
        };
      });
    }
  }, {
    key: "handleWindowClick",
    value: function handleWindowClick(e) {
      if (!this.menuTriggerElementRef || !this.menuTriggerElementRef.current) {
        return;
      }
      if (!this.menuTriggerElementRef.current.contains(e.target)) {
        this.closeMenu();
      }
    }
  }, {
    key: "closeMenu",
    value: function closeMenu() {
      this.setState({
        menuOpen: false
      });
    }
  }, {
    key: "bindCancellingEvent",
    value: function bindCancellingEvent() {
      var _this2 = this;
      window.addEventListener('click', function (e) {
        return _this2.handleWindowClick(e);
      });
    }
  }, {
    key: "unbindCancellingEvent",
    value: function unbindCancellingEvent() {
      var _this3 = this;
      window.removeEventListener('click', function (e) {
        return _this3.handleWindowClick(e);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;
      if (this.state.menuOpen) {
        this.bindCancellingEvent();
      } else {
        this.unbindCancellingEvent();
      }
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "g3-dropdown ".concat(this.props.disabled ? 'g3-dropdown--disabled' : '', " ").concat(this.props.className || '', "\n                                   ").concat(this.props.buttonType === 'secondary' ? 'g3-dropdown--secondary' : '')
      }, _react["default"].Children.map(this.props.children, function (child) {
        return /*#__PURE__*/_react["default"].cloneElement(child, {
          handleTriggerMenu: function handleTriggerMenu(e) {
            return _this4.handleTriggerMenu(e);
          },
          menuOpen: _this4.state.menuOpen,
          afterClick: function afterClick(e) {
            return _this4.closeMenu(e);
          },
          menuTriggerElementRef: _this4.menuTriggerElementRef,
          buttonType: _this4.props.buttonType,
          disabled: _this4.props.disabled
        });
      }));
    }
  }]);
  return Dropdown;
}(_react.Component);
Dropdown.propTypes = {
  className: _propTypes["default"].string,
  buttonType: _propTypes["default"].oneOf(['primary', 'secondary', 'default']),
  disabled: _propTypes["default"].bool,
  children: _propTypes["default"].oneOfType([_propTypes["default"].arrayOf(_propTypes["default"].node), _propTypes["default"].node]).isRequired
};
Dropdown.defaultProps = {
  className: '',
  buttonType: 'primary',
  disabled: false
};

/**
* props:
*   - split(bool): if true, the trigger button is split
*   - label(stirng): label of the button
*   - onClick(func): onclick function, ignored when split=false (onClick=triggerMenu)
*   - className(string): class name
*   - disabled(bool): whether disabled
*/
Dropdown.Button = _DropdownButton["default"];

/**
* Wrapper for a list of menu items
* props:
*   - className(string): class name
*/
Dropdown.Menu = _DropdownMenu["default"];

/**
* props:
*   - className(string): class name
*   - leftIcon(string): left icon name
*   - rightIcon(string): right icon name
*   - onClick(func): onclick function
*   - disabled(bool): whether disabled
*/
Dropdown.Item = _DropdownItem["default"];
Dropdown.MenuDivider = _DropdownMenuDivider["default"];
var _default = Dropdown;
exports["default"] = _default;