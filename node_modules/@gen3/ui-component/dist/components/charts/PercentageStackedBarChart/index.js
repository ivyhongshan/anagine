"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _recharts = require("recharts");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _helper = _interopRequireDefault(require("../helper"));
require("./PercentageStackedBarChart.css");
var _LockedContent = _interopRequireDefault(require("../LockedContent"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var getPercentageDataLabels = function getPercentageDataLabels(chartData) {
  return chartData.map(function (entry) {
    return entry.name;
  });
};

// FIXME: add back in animation (https://github.com/recharts/recharts/issues/1083)
var PercentageStackedBarChart = /*#__PURE__*/function (_React$Component) {
  _inherits(PercentageStackedBarChart, _React$Component);
  var _super = _createSuper(PercentageStackedBarChart);
  function PercentageStackedBarChart() {
    _classCallCheck(this, PercentageStackedBarChart);
    return _super.apply(this, arguments);
  }
  _createClass(PercentageStackedBarChart, [{
    key: "getItemColor",
    value: function getItemColor(index) {
      if (this.props.useCustomizedColorMap) {
        return this.props.customizedColorMap[index % this.props.customizedColorMap.length];
      }
      return _helper["default"].getCategoryColor(index);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;
      var chart = null;
      if (_helper["default"].shouldHideChart(this.props.data, this.props.lockValue)) {
        chart = /*#__PURE__*/_react["default"].createElement("div", {
          className: "percentage-bar-chart__locked"
        }, /*#__PURE__*/_react["default"].createElement(_LockedContent["default"], {
          lockMessage: this.props.lockMessage
        }));
      } else {
        var percentageData = _helper["default"].getPercentageData(this.props.data, this.props.percentageFixedPoint);
        var percentageDataLabels = getPercentageDataLabels(this.props.data);
        var _this$props = this.props,
          barChartStyle = _this$props.barChartStyle,
          xAxisStyle = _this$props.xAxisStyle,
          labelListStyle = _this$props.labelListStyle;
        chart = /*#__PURE__*/_react["default"].createElement("div", {
          className: "percentage-bar-chart__content"
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: "percentage-bar-chart__chart"
        }, /*#__PURE__*/_react["default"].createElement(_recharts.ResponsiveContainer, {
          width: "100%",
          height: "100%"
        }, /*#__PURE__*/_react["default"].createElement(_recharts.BarChart, _extends({
          data: percentageData
        }, barChartStyle), /*#__PURE__*/_react["default"].createElement(_recharts.Tooltip, null), /*#__PURE__*/_react["default"].createElement(_recharts.CartesianGrid, null), /*#__PURE__*/_react["default"].createElement(_recharts.XAxis, _extends({
          type: "number",
          style: xAxisStyle,
          tickFormatter: _helper["default"].addPercentage
        }, xAxisStyle)), /*#__PURE__*/_react["default"].createElement(_recharts.YAxis, {
          axisLine: false,
          tickLine: false,
          dataKey: "name",
          type: "category",
          hide: true
        }), percentageDataLabels.map(function (name, index) {
          return /*#__PURE__*/_react["default"].createElement(_recharts.Bar, {
            key: name,
            dataKey: name,
            stackId: "a",
            isAnimationActive: false,
            fill: _this.getItemColor(index)
          }, /*#__PURE__*/_react["default"].createElement(_recharts.LabelList, {
            dataKey: name,
            position: labelListStyle.position,
            style: labelListStyle,
            formatter: _helper["default"].addPercentage,
            className: "percentage-bar-chart__label-list"
          }));
        })))), /*#__PURE__*/_react["default"].createElement("div", {
          className: "percentage-bar-chart__legend"
        }, /*#__PURE__*/_react["default"].createElement("div", {
          className: "percentage-bar-chart__ul"
        }, percentageDataLabels.map(function (name, index) {
          return /*#__PURE__*/_react["default"].createElement("li", {
            className: "percentage-bar-chart__legend-item",
            key: "label-".concat(name)
          }, /*#__PURE__*/_react["default"].createElement("span", {
            className: "percentage-bar-chart__legend-color",
            style: {
              background: _this.getItemColor(index)
            }
          }), /*#__PURE__*/_react["default"].createElement("span", {
            className: "percentage-bar-chart__legend-name"
          }, name), /*#__PURE__*/_react["default"].createElement("span", {
            className: "percentage-bar-chart__legend-value"
          }, '('.concat(Number(_this.props.data[index].value).toLocaleString()).concat(')')));
        }))));
      }
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "percentage-bar-chart"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "percentage-bar-chart__title-box"
      }, /*#__PURE__*/_react["default"].createElement("p", {
        className: "percentage-bar-chart__title h4-typo"
      }, this.props.title)), /*#__PURE__*/_react["default"].createElement("div", {
        className: "percentage-bar-chart__content-box"
      }, chart));
    }
  }]);
  return PercentageStackedBarChart;
}(_react["default"].Component);
var ChartDataShape = _propTypes["default"].shape({
  name: _propTypes["default"].string.isRequired,
  value: _propTypes["default"].number.isRequired
});
PercentageStackedBarChart.propTypes = {
  title: _propTypes["default"].string.isRequired,
  data: _propTypes["default"].arrayOf(ChartDataShape).isRequired,
  percentageFixedPoint: _propTypes["default"].number,
  barChartStyle: _propTypes["default"].object,
  xAxisStyle: _propTypes["default"].object,
  labelListStyle: _propTypes["default"].object,
  lockValue: _propTypes["default"].number,
  // if one of the value is equal to `lockValue`, lock the chart
  lockMessage: _propTypes["default"].string,
  useCustomizedColorMap: _propTypes["default"].bool,
  customizedColorMap: _propTypes["default"].arrayOf(_propTypes["default"].string)
};
PercentageStackedBarChart.defaultProps = {
  percentageFixedPoint: 2,
  barChartStyle: {
    layout: 'vertical',
    margin: {
      top: 28,
      right: 12,
      bottom: 8,
      left: 12
    },
    barSize: 30
  },
  xAxisStyle: {
    fontSize: '10px',
    fontWeight: 600,
    lineHeight: '1em',
    letterSpacing: '.02rem',
    color: '#3283c8',
    axisLine: false,
    tickLine: false,
    ticks: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
    domain: [0, 100],
    tickMargin: 10
  },
  labelListStyle: {
    fill: '#FFFFFF',
    fontSize: '14px',
    fontWeight: 600,
    position: 'center'
  },
  lockValue: -1,
  lockMessage: 'This chart is hidden because it contains fewer than 1000 subjects',
  useCustomizedColorMap: false,
  customizedColorMap: ['#3283c8']
};
var _default = PercentageStackedBarChart;
exports["default"] = _default;