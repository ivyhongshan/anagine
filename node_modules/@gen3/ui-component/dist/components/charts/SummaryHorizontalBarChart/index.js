"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _LockedContent = _interopRequireDefault(require("../LockedContent"));
var _EmptyContent = _interopRequireDefault(require("../EmptyContent"));
var _helper = _interopRequireDefault(require("../helper"));
require("./SummaryHorizontalBarChart.css");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
// FIXME: add back in animation (https://github.com/recharts/recharts/issues/1083)
var SummaryBarChart = /*#__PURE__*/function (_React$Component) {
  _inherits(SummaryBarChart, _React$Component);
  var _super = _createSuper(SummaryBarChart);
  function SummaryBarChart(props) {
    var _this;
    _classCallCheck(this, SummaryBarChart);
    _this = _super.call(this, props);
    _this.state = {
      showMore: false
    };
    return _this;
  }
  _createClass(SummaryBarChart, [{
    key: "getItemColor",
    value: function getItemColor(index) {
      if (this.props.useCustomizedColorMap) {
        return this.props.customizedColorMap[index % this.props.customizedColorMap.length];
      }
      if (this.props.color) {
        return this.props.color;
      }
      return _helper["default"].getCategoryColor(index);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.setState(function (prevState) {
        return {
          showMore: !prevState.showMore
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;
      var barChartData = _helper["default"].calculateChartData(this.props.data, this.props.percentageFixedPoint);
      var chart = null;
      if (this.props.data.length === 0) {
        chart = /*#__PURE__*/_react["default"].createElement(_EmptyContent["default"], {
          message: this.props.chartEmptyMessage
        });
      } else if (_helper["default"].shouldHideChart(this.props.data, this.props.lockValue)) {
        chart = /*#__PURE__*/_react["default"].createElement(_LockedContent["default"], {
          lockMessage: this.props.lockMessage
        });
      } else {
        chart = /*#__PURE__*/_react["default"].createElement("div", null, barChartData.map(function (item, index) {
          if (_this2.state.showMore || index < _this2.props.maximumDisplayItem) {
            return /*#__PURE__*/_react["default"].createElement("div", {
              key: item.name,
              className: "summary-horizontal-bar-chart__item"
            }, /*#__PURE__*/_react["default"].createElement("div", {
              className: "summary-horizontal-bar-chart__item-label"
            }, item.name), /*#__PURE__*/_react["default"].createElement("div", {
              className: "summary-horizontal-bar-chart__item-block-wrapper"
            }, /*#__PURE__*/_react["default"].createElement("div", {
              className: "summary-horizontal-bar-chart__item-block",
              style: {
                width: "".concat(item.widthPercentage, "%"),
                backgroundColor: _this2.getItemColor(index)
              }
            }), /*#__PURE__*/_react["default"].createElement("div", {
              className: "summary-horizontal-bar-chart__item-value"
            }, _this2.props.showPercentage ? "".concat(item.percentage, "%") : item.value)));
          }
          return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, {
            key: item.name
          });
        }), barChartData.length > this.props.maximumDisplayItem ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, this.state.showMore ? /*#__PURE__*/_react["default"].createElement("div", {
          className: "summary-horizontal-bar-chart__toggle g3-link",
          onClick: function onClick() {
            return _this2.toggle();
          },
          onKeyPress: function onKeyPress() {
            return _this2.toggle();
          },
          role: "button",
          tabIndex: 0
        }, /*#__PURE__*/_react["default"].createElement("span", null, "Show less")) : /*#__PURE__*/_react["default"].createElement("div", {
          className: "summary-horizontal-bar-chart__toggle g3-link",
          onClick: function onClick() {
            return _this2.toggle();
          },
          onKeyPress: function onKeyPress() {
            return _this2.toggle();
          },
          role: "button",
          tabIndex: 0
        }, "And ".concat((barChartData.length - this.props.maximumDisplayItem).toLocaleString(), " more"))) : /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null));
      }
      return /*#__PURE__*/_react["default"].createElement("div", {
        className: "summary-horizontal-bar-chart"
      }, /*#__PURE__*/_react["default"].createElement("div", {
        className: "summary-horizontal-bar-chart__title-box"
      }, /*#__PURE__*/_react["default"].createElement("p", {
        className: "summary-horizontal-bar-chart__title h4-typo"
      }, this.props.title)), chart);
    }
  }]);
  return SummaryBarChart;
}(_react["default"].Component);
var ChartDataShape = _propTypes["default"].shape({
  name: _propTypes["default"].string.isRequired,
  value: _propTypes["default"].number.isRequired
});
SummaryBarChart.propTypes = {
  title: _propTypes["default"].string.isRequired,
  data: _propTypes["default"].arrayOf(ChartDataShape).isRequired,
  color: _propTypes["default"].string,
  useCustomizedColorMap: _propTypes["default"].bool,
  customizedColorMap: _propTypes["default"].arrayOf(_propTypes["default"].string),
  showPercentage: _propTypes["default"].bool,
  percentageFixedPoint: _propTypes["default"].number,
  lockValue: _propTypes["default"].number,
  // if one of the value is equal to `lockValue`, lock the chart
  lockMessage: _propTypes["default"].string,
  maximumDisplayItem: _propTypes["default"].number,
  chartEmptyMessage: _propTypes["default"].string
};
SummaryBarChart.defaultProps = {
  color: undefined,
  useCustomizedColorMap: false,
  customizedColorMap: ['#3283c8'],
  showPercentage: true,
  percentageFixedPoint: 2,
  lockValue: -1,
  lockMessage: 'This chart is hidden because it contains fewer than 1000 subjects',
  maximumDisplayItem: 15,
  chartEmptyMessage: 'This chart is empty'
};
var _default = SummaryBarChart;
exports["default"] = _default;