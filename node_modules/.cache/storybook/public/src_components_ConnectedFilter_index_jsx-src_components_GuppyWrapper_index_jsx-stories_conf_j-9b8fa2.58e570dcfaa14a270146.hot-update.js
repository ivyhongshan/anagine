"use strict";
self["webpackHotUpdateanagine"]("src_components_ConnectedFilter_index_jsx-src_components_GuppyWrapper_index_jsx-stories_conf_j-9b8fa2",{

/***/ "./src/components/Utils/queries.js":
/*!*****************************************!*\
  !*** ./src/components/Utils/queries.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   askGuppyAboutArrayTypes: () => (/* binding */ askGuppyAboutArrayTypes),
/* harmony export */   askGuppyForAggregationData: () => (/* binding */ askGuppyForAggregationData),
/* harmony export */   askGuppyForRawData: () => (/* binding */ askGuppyForRawData),
/* harmony export */   askGuppyForSubAggregationData: () => (/* binding */ askGuppyForSubAggregationData),
/* harmony export */   askGuppyForTotalCounts: () => (/* binding */ askGuppyForTotalCounts),
/* harmony export */   downloadDataFromGuppy: () => (/* binding */ downloadDataFromGuppy),
/* harmony export */   getAccessibleResources: () => (/* binding */ getAccessibleResources),
/* harmony export */   getAllFieldsFromFilterConfigs: () => (/* binding */ getAllFieldsFromFilterConfigs),
/* harmony export */   getAllFieldsFromGuppy: () => (/* binding */ getAllFieldsFromGuppy),
/* harmony export */   getGQLFilter: () => (/* binding */ getGQLFilter),
/* harmony export */   queryGuppyForRawDataAndTotalCounts: () => (/* binding */ queryGuppyForRawDataAndTotalCounts)
/* harmony export */ });
/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! isomorphic-fetch */ "./node_modules/isomorphic-fetch/fetch-npm-browserify.js");
/* harmony import */ var isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _conversion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conversion */ "./src/components/Utils/conversion.js");
function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _regeneratorRuntime() {"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime = function _regeneratorRuntime() {return e;};var t,e = {},r = Object.prototype,n = r.hasOwnProperty,o = Object.defineProperty || function (t, e, r) {t[e] = r.value;},i = "function" == typeof Symbol ? Symbol : {},a = i.iterator || "@@iterator",c = i.asyncIterator || "@@asyncIterator",u = i.toStringTag || "@@toStringTag";function define(t, e, r) {return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e];}try {define({}, "");} catch (t) {define = function define(t, e, r) {return t[e] = r;};}function wrap(t, e, r, n) {var i = e && e.prototype instanceof Generator ? e : Generator,a = Object.create(i.prototype),c = new Context(n || []);return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a;}function tryCatch(t, e, r) {try {return { type: "normal", arg: t.call(e, r) };} catch (t) {return { type: "throw", arg: t };}}e.wrap = wrap;var h = "suspendedStart",l = "suspendedYield",f = "executing",s = "completed",y = {};function Generator() {}function GeneratorFunction() {}function GeneratorFunctionPrototype() {}var p = {};define(p, a, function () {return this;});var d = Object.getPrototypeOf,v = d && d(d(values([])));v && v !== r && n.call(v, a) && (p = v);var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);function defineIteratorMethods(t) {["next", "throw", "return"].forEach(function (e) {define(t, e, function (t) {return this._invoke(e, t);});});}function AsyncIterator(t, e) {function invoke(r, o, i, a) {var c = tryCatch(t[r], t, o);if ("throw" !== c.type) {var u = c.arg,h = u.value;return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {invoke("next", t, i, a);}, function (t) {invoke("throw", t, i, a);}) : e.resolve(h).then(function (t) {u.value = t, i(u);}, function (t) {return invoke("throw", t, i, a);});}a(c.arg);}var r;o(this, "_invoke", { value: function value(t, n) {function callInvokeWithMethodAndArg() {return new e(function (e, r) {invoke(t, n, e, r);});}return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();} });}function makeInvokeMethod(e, r, n) {var o = h;return function (i, a) {if (o === f) throw Error("Generator is already running");if (o === s) {if ("throw" === i) throw a;return { value: t, done: !0 };}for (n.method = i, n.arg = a;;) {var c = n.delegate;if (c) {var u = maybeInvokeDelegate(c, n);if (u) {if (u === y) continue;return u;}}if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {if (o === h) throw o = s, n.arg;n.dispatchException(n.arg);} else "return" === n.method && n.abrupt("return", n.arg);o = f;var p = tryCatch(e, r, n);if ("normal" === p.type) {if (o = n.done ? s : l, p.arg === y) continue;return { value: p.arg, done: n.done };}"throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);}};}function maybeInvokeDelegate(e, r) {var n = r.method,o = e.iterator[n];if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;var i = tryCatch(o, e.iterator, r.arg);if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;var a = i.arg;return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);}function pushTryEntry(t) {var e = { tryLoc: t[0] };1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);}function resetTryEntry(t) {var e = t.completion || {};e.type = "normal", delete e.arg, t.completion = e;}function Context(t) {this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0);}function values(e) {if (e || "" === e) {var r = e[a];if (r) return r.call(e);if ("function" == typeof e.next) return e;if (!isNaN(e.length)) {var o = -1,i = function next() {for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;return next.value = t, next.done = !0, next;};return i.next = i;}}throw new TypeError(_typeof(e) + " is not iterable");}return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {var e = "function" == typeof t && t.constructor;return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));}, e.mark = function (t) {return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;}, e.awrap = function (t) {return { __await: t };}, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {return this;}), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {void 0 === i && (i = Promise);var a = new AsyncIterator(wrap(t, r, n, o), i);return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {return t.done ? t.value : a.next();});}, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {return this;}), define(g, "toString", function () {return "[object Generator]";}), e.keys = function (t) {var e = Object(t),r = [];for (var n in e) r.push(n);return r.reverse(), function next() {for (; r.length;) {var t = r.pop();if (t in e) return next.value = t, next.done = !1, next;}return next.done = !0, next;};}, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) {if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);}, stop: function stop() {this.done = !0;var t = this.tryEntries[0].completion;if ("throw" === t.type) throw t.arg;return this.rval;}, dispatchException: function dispatchException(e) {if (this.done) throw e;var r = this;function handle(n, o) {return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;}for (var o = this.tryEntries.length - 1; o >= 0; --o) {var i = this.tryEntries[o],a = i.completion;if ("root" === i.tryLoc) return handle("end");if (i.tryLoc <= this.prev) {var c = n.call(i, "catchLoc"),u = n.call(i, "finallyLoc");if (c && u) {if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);if (this.prev < i.finallyLoc) return handle(i.finallyLoc);} else if (c) {if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);} else {if (!u) throw Error("try statement without catch or finally");if (this.prev < i.finallyLoc) return handle(i.finallyLoc);}}}}, abrupt: function abrupt(t, e) {for (var r = this.tryEntries.length - 1; r >= 0; --r) {var o = this.tryEntries[r];if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {var i = o;break;}}i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);var a = i ? i.completion : {};return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);}, complete: function complete(t, e) {if ("throw" === t.type) throw t.arg;return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;}, finish: function finish(t) {for (var e = this.tryEntries.length - 1; e >= 0; --e) {var r = this.tryEntries[e];if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;}}, "catch": function _catch(t) {for (var e = this.tryEntries.length - 1; e >= 0; --e) {var r = this.tryEntries[e];if (r.tryLoc === t) {var n = r.completion;if ("throw" === n.type) {var o = n.arg;resetTryEntry(r);}return o;}}throw Error("illegal catch attempt");}, delegateYield: function delegateYield(e, r, n) {return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y;} }, e;}function asyncGeneratorStep(n, t, e, r, o, a, c) {try {var i = n[a](c),u = i.value;} catch (n) {return void e(n);}i.done ? t(u) : Promise.resolve(u).then(r, o);}function _asyncToGenerator(n) {return function () {var t = this,e = arguments;return new Promise(function (r, o) {var a = n.apply(t, e);function _next(n) {asyncGeneratorStep(a, r, o, _next, _throw, "next", n);}function _throw(n) {asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);}_next(void 0);});};}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(e, r, t) {return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}

var graphqlEndpoint = '/graphql';
var downloadEndpoint = '/download';
var statusEndpoint = '/_status';
var headers = {
  'Content-Type': 'application/json'
};

var _histogramQueryStrForEachField = function histogramQueryStrForEachField(field) {var isAsTextAgg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var splittedFieldArray = field.split('.');
  var splittedField = splittedFieldArray.shift();
  if (splittedFieldArray.length === 0) {
    return "\n    ".concat(
      splittedField, " {\n      ").concat(
      isAsTextAgg ? 'asTextHistogram' : 'histogram', " {\n        key\n        count\n      }\n    }");




  }
  return "\n  ".concat(
    splittedField, " {\n    ").concat(
    _histogramQueryStrForEachField(splittedFieldArray.join('.')), "\n  }");

};

var queryGuppyForAggs = function queryGuppyForAggs(path, type, regularAggFields, asTextAggFields, gqlFilter, acc) {var csrfToken = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';
  var accessibility = acc;
  if (accessibility !== 'all' && accessibility !== 'accessible' && accessibility !== 'unaccessible') {
    accessibility = 'all';
  }

  var queryBody = {};
  if (gqlFilter) {
    var queryWithFilter = "query ($filter: JSON) {\n      _aggregation {\n        ".concat(

      type, " (filter: $filter, filterSelf: false, accessibility: ").concat(accessibility, ") {\n          ").concat(
      regularAggFields.map(function (field) {return _histogramQueryStrForEachField(field, false);}), "\n          ").concat(
      asTextAggFields.map(function (field) {return _histogramQueryStrForEachField(field, true);}), "\n        }\n      }\n    }");



    queryBody.variables = { filter: gqlFilter };
    queryBody.query = queryWithFilter;
  } else {
    queryBody.query = "query {\n      _aggregation {\n        ".concat(

      type, " (accessibility: ").concat(accessibility, ") {\n          ").concat(
      regularAggFields.map(function (field) {return _histogramQueryStrForEachField(field, false);}), "\n          ").concat(
      asTextAggFields.map(function (field) {return _histogramQueryStrForEachField(field, true);}), "\n        }\n      }\n    }");



  }

  return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(graphqlEndpoint), {
    method: 'POST',
    headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
    body: JSON.stringify(queryBody)
  }).then(function (response) {return response.json();});
};

var queryGuppyForStatus = function queryGuppyForStatus(path) {return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(statusEndpoint), {
    method: 'GET',
    headers: headers
  }).then(function (response) {return response.json();});};

var nestedHistogramQueryStrForEachField = function nestedHistogramQueryStrForEachField(mainField, numericAggAsText) {return "\n  ".concat(
    mainField, " {\n    ").concat(
    numericAggAsText ? 'asTextHistogram' : 'histogram', " {\n      key\n      count\n      missingFields {\n        field\n        count\n      }\n      termsFields {\n        field\n        count\n        terms {\n          key\n          count\n        }\n      }\n    }\n  }");};

















var queryGuppyForSubAgg = function queryGuppyForSubAgg(
path,
type,
mainField,
termsFields,
missingFields,
gqlFilter,
acc)


{var numericAggAsText = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;var csrfToken = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : '';
  var accessibility = acc;
  if (accessibility !== 'all' && accessibility !== 'accessible' && accessibility !== 'unaccessible') {
    accessibility = 'all';
  }

  var nestedAggFields = {};
  if (termsFields) {
    nestedAggFields.termsFields = termsFields;
  }
  if (missingFields) {
    nestedAggFields.missingFields = missingFields;
  }

  var query = "query ($nestedAggFields: JSON) {\n    _aggregation {\n      ".concat(

    type, " (nestedAggFields: $nestedAggFields, accessibility: ").concat(accessibility, ") {\n        ").concat(
    nestedHistogramQueryStrForEachField(mainField, numericAggAsText), "\n      }\n    }\n  }");



  var queryBody = { query: query };
  queryBody.variables = { nestedAggFields: nestedAggFields };
  if (gqlFilter) {
    var queryWithFilter = "query ($filter: JSON, $nestedAggFields: JSON) {\n      _aggregation {\n        ".concat(

      type, " (filter: $filter, filterSelf: false, nestedAggFields: $nestedAggFields, accessibility: ").concat(accessibility, ") {\n          ").concat(
      nestedHistogramQueryStrForEachField(mainField, numericAggAsText), "\n        }\n      }\n    }");



    queryBody.variables = { filter: gqlFilter, nestedAggFields: nestedAggFields };
    queryBody.query = queryWithFilter;
  }
  return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(graphqlEndpoint), {
    method: 'POST',
    headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
    body: JSON.stringify(queryBody)
  }).then(function (response) {return response.json();})["catch"](
    function (err) {
      throw new Error("Error during queryGuppyForSubAgg ".concat(err));
    });
};

var _rawDataQueryStrForEachField = function rawDataQueryStrForEachField(field) {
  var splittedFieldArray = field.split('.');
  var splittedField = splittedFieldArray.shift();
  if (splittedFieldArray.length === 0) {
    return "\n    ".concat(
      splittedField, "\n    ");

  }
  return "\n  ".concat(
    splittedField, " {\n    ").concat(
    _rawDataQueryStrForEachField(splittedFieldArray.join('.')), "\n  }");

};

var queryGuppyForRawDataAndTotalCounts = function queryGuppyForRawDataAndTotalCounts(
path,
type,
fields,
gqlFilter,
sort,
format)




{var offset = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;var size = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 20;var accessibility = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 'all';var csrfToken = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : '';
  var queryLine = 'query {';
  if (gqlFilter || sort || format) {
    queryLine = "query (".concat(sort ? '$sort: JSON,' : '').concat(gqlFilter ? '$filter: JSON,' : '').concat(format ? '$format: Format' : '', ") {");
  }
  var dataTypeLine = "".concat(type, " (accessibility: ").concat(accessibility, ", offset: ").concat(offset, ", first: ").concat(size, ", format: $format) {");
  if (gqlFilter || sort || format) {
    dataTypeLine = "".concat(type, " (accessibility: ").concat(accessibility, ", offset: ").concat(offset, ", first: ").concat(size, ", ").concat(format ? 'format: $format, ' : '', ", ").concat(sort ? 'sort: $sort, ' : '').concat(gqlFilter ? 'filter: $filter,' : '', ") {");
  }
  var typeAggsLine = "".concat(type, " accessibility: ").concat(accessibility, " {");
  if (gqlFilter) {
    typeAggsLine = "".concat(type, " (filter: $filter, accessibility: ").concat(accessibility, ") {");
  }
  var processedFields = fields.map(function (field) {return _rawDataQueryStrForEachField(field);});
  var query = "".concat(queryLine, "\n    ").concat(
    dataTypeLine, "\n      ").concat(
    processedFields.join('\n'), "\n    }\n    _aggregation {\n      ").concat(


    typeAggsLine, "\n        _totalCount\n      }\n    }\n  }");




  var queryBody = { query: query };
  queryBody.variables = {};
  if (format) queryBody.variables.format = format;
  if (gqlFilter) queryBody.variables.filter = gqlFilter;
  if (sort) queryBody.variables.sort = sort;
  return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(graphqlEndpoint), {
    method: 'POST',
    headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
    body: JSON.stringify(queryBody)
  }).then(function (response) {return response.json();})["catch"](
    function (err) {
      throw new Error("Error during queryGuppyForRawDataAndTotalCounts ".concat(err));
    });
};

var getGQLFilter = function getGQLFilter(filterObj) {
  var facetsList = [];
  Object.keys(filterObj).forEach(function (field) {
    var filterValues = filterObj[field];
    var fieldSplitted = field.split('.');
    var fieldName = fieldSplitted[fieldSplitted.length - 1];
    // The combine mode defaults to OR when not set.
    var combineMode = filterValues.__combineMode ? filterValues.__combineMode : 'OR';

    var hasSelectedValues = filterValues.selectedValues && filterValues.selectedValues.length > 0;
    var hasRangeFilter = typeof filterValues.lowerBound !== 'undefined' && typeof filterValues.upperBound !== 'undefined';

    var facetsPiece = {};
    if (hasSelectedValues && combineMode === 'OR') {
      facetsPiece = {
        IN: _defineProperty({},
        fieldName, filterValues.selectedValues)

      };
    } else if (hasSelectedValues && combineMode === 'AND') {
      facetsPiece = { AND: [] };
      for (var i = 0; i < filterValues.selectedValues.length; i += 1) {
        facetsPiece.AND.push({
          IN: _defineProperty({},
          fieldName, [filterValues.selectedValues[i]])

        });
      }
    } else if (hasRangeFilter) {
      facetsPiece = {
        AND: [
        { '>=': _defineProperty({}, fieldName, filterValues.lowerBound) },
        { '<=': _defineProperty({}, fieldName, filterValues.upperBound) }]

      };
    } else if (filterValues.__combineMode && !hasSelectedValues && !hasRangeFilter) {
      // This filter only has a combine setting so far. We can ignore it.
      return;
    } else if (hasSelectedValues) {
      // filter has selected values but we don't know how to process it
      // eslint-disable-next-line no-console
      console.error(filterValues);
      throw new Error('Invalid filter object');
    }
    if (fieldSplitted.length > 1) {// nested field
      fieldSplitted.pop();
      facetsPiece = {
        nested: _objectSpread({
          path: fieldSplitted.join('.') },
        facetsPiece)

      };
    }
    facetsList.push(facetsPiece);
  });
  var gqlFilter = {
    AND: facetsList
  };
  return gqlFilter;
};

// eslint-disable-next-line max-len
var askGuppyAboutArrayTypes = function askGuppyAboutArrayTypes(path) {return queryGuppyForStatus(path).then(function (res) {return res.indices;});};

var askGuppyForAggregationData = function askGuppyForAggregationData(
path,
type,
regularAggFields,
asTextAggFields,
filter,
accessibility)

{var csrfToken = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : '';
  var gqlFilter = getGQLFilter(filter);
  return queryGuppyForAggs(path, type, regularAggFields, asTextAggFields, gqlFilter, accessibility, csrfToken);
};

var askGuppyForSubAggregationData = function askGuppyForSubAggregationData(
path,
type,
mainField,
numericAggAsText,
termsNestedFields,
missedNestedFields,
filter,
accessibility,
csrfToken)
{
  var gqlFilter = getGQLFilter(filter);
  return queryGuppyForSubAgg(
    path,
    type,
    mainField,
    termsNestedFields,
    missedNestedFields,
    gqlFilter,
    accessibility,
    numericAggAsText,
    csrfToken
  );
};

var askGuppyForRawData = function askGuppyForRawData(
path,
type,
fields,
filter,
sort,
format)




{var offset = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;var size = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 20;var accessibility = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 'all';var csrfToken = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : '';
  var gqlFilter = getGQLFilter(filter);
  return queryGuppyForRawDataAndTotalCounts(
    path,
    type,
    fields,
    gqlFilter,
    sort,
    format,
    offset,
    size,
    accessibility,
    csrfToken
  );
};

var getAllFieldsFromFilterConfigs = function getAllFieldsFromFilterConfigs(filterTabConfigs) {return filterTabConfigs.reduce(function (acc, cur) {
    Object.keys(cur).
    filter(function (key) {return key === 'fields' || key === 'asTextAggFields';}).
    forEach(function (key) {acc[key] = acc[key].concat(cur[key], []);});
    return acc;
  }, { fields: [], asTextAggFields: [] });};

/**
 * Download all data from guppy using fields, filter, and sort args.
 * If total count is less than 10000 this will use normal graphql endpoint
 * If greater than 10000, use /download endpoint
 */
var downloadDataFromGuppy = function downloadDataFromGuppy(
path,
type,
totalCount, _ref)








{var fields = _ref.fields,filter = _ref.filter,sort = _ref.sort,accessibility = _ref.accessibility,format = _ref.format;var csrfToken = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
  var SCROLL_SIZE = 10000;
  var JSON_FORMAT = format === 'json' || format === undefined;
  if (totalCount > SCROLL_SIZE) {
    var queryBody = { type: type };
    if (fields) queryBody.fields = fields;
    if (filter) queryBody.filter = getGQLFilter(filter);
    if (sort) queryBody.sort = sort;
    if (typeof accessibility !== 'undefined') queryBody.accessibility = accessibility;
    return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(downloadEndpoint), {
      method: 'POST',
      headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
      body: JSON.stringify(queryBody)
    }).
    then(function (r) {return r.json();}).
    then(function (res) {return JSON_FORMAT ? res : (0,_conversion__WEBPACK_IMPORTED_MODULE_1__.jsonToFormat)(res, format);});
  }
  return askGuppyForRawData(path, type, fields, filter, sort, format, 0, totalCount, accessibility, csrfToken).
  then(function (res) {
    if (res && res.data && res.data[type]) {
      return JSON_FORMAT ? res.data[type] : (0,_conversion__WEBPACK_IMPORTED_MODULE_1__.jsonToFormat)(res.data[type], format);
    }
    throw Error('Error downloading data from Guppy');
  });
};

var askGuppyForTotalCounts = function askGuppyForTotalCounts(
path,
type,
filter)


{var accessibility = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'all';var csrfToken = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
  var gqlFilter = getGQLFilter(filter);
  var queryLine = "query ".concat(gqlFilter ? '($filter: JSON)' : '', "{");
  var typeAggsLine = "".concat(type, " ").concat(gqlFilter ? '(filter: $filter, ' : '(', " accessibility: ").concat(accessibility, ") {");
  var query = "".concat(queryLine, "\n    _aggregation {\n      ").concat(

    typeAggsLine, "\n        _totalCount\n      }\n    }\n  }");




  var queryBody = { query: query };
  queryBody.variables = {};
  if (gqlFilter) queryBody.variables.filter = gqlFilter;

  return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(graphqlEndpoint), {
    method: 'POST',
    headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
    body: JSON.stringify(queryBody)
  }).then(function (response) {return response.json();}).
  then(function (response) {
    if (response.errors) {
      throw new Error("Error during download ".concat(response.errors));
    }
    return response.data._aggregation[type]._totalCount;
  })["catch"](
    function (err) {
      throw new Error("Error during download ".concat(err));
    });
};

var getAllFieldsFromGuppy = function getAllFieldsFromGuppy(
path,
type)

{var csrfToken = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var query = "{\n    _mapping {\n      ".concat(

    type, "\n    }\n  }");


  var queryBody = { query: query };
  return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(graphqlEndpoint), {
    method: 'POST',
    headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
    body: JSON.stringify(queryBody)
  }).then(function (response) {return response.json();}).
  then(function (response) {return response.data._mapping[type];})["catch"](
    function (err) {
      throw new Error("Error when getting fields from guppy: ".concat(err));
    });
};

var getAccessibleResources = /*#__PURE__*/function () {var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(
  path,
  type,
  accessibleFieldCheckList) {var csrfToken,accessiblePromiseList,unaccessiblePromiseList,accessibleFieldObject,accessibleFieldResult,unaccessibleFieldObject,unaccessibleFieldResult,_args = arguments;return _regeneratorRuntime().wrap(function _callee$(_context) {while (1) switch (_context.prev = _context.next) {case 0:
          csrfToken = _args.length > 3 && _args[3] !== undefined ? _args[3] : '';

          accessiblePromiseList = [];
          unaccessiblePromiseList = [];
          accessibleFieldCheckList.forEach(function (accessibleField) {
            var fetchRequestPromise = function fetchRequestPromise(accessible) {
              var query = "query {\n        _aggregation {\n          ".concat(

                type, " (accessibility: ").concat(accessible ? 'accessible' : 'unaccessible', ") {\n            ").concat(
                accessibleField, " {\n              histogram {\n                key\n                count\n              }\n            }\n          }\n        }\n      }");








              var queryBody = { query: query };

              return isomorphic_fetch__WEBPACK_IMPORTED_MODULE_0___default()("".concat(path).concat(graphqlEndpoint), {
                method: 'POST',
                headers: csrfToken ? _objectSpread(_objectSpread({}, headers), {}, { 'x-csrf-token': csrfToken }) : headers,
                body: JSON.stringify(queryBody)
              }).
              then(function (response) {return response.json();}).
              then(
                function (response) {return {
                    field: accessibleField,
                    list: response.data._aggregation[type][accessibleField].
                    histogram.map(function (item) {return item.key;})
                  };}
              )["catch"](
                function (err) {
                  throw new Error("Error when getting fields from guppy: ".concat(err));
                });
            };
            accessiblePromiseList.push(fetchRequestPromise(true));
            unaccessiblePromiseList.push(fetchRequestPromise(false));
          });

          accessibleFieldObject = {};_context.next = 7;return (
            Promise.all(accessiblePromiseList));case 7:accessibleFieldResult = _context.sent;
          accessibleFieldResult.forEach(function (res) {
            accessibleFieldObject[res.field] = res.list;
          });
          unaccessibleFieldObject = {};_context.next = 12;return (
            Promise.all(unaccessiblePromiseList));case 12:unaccessibleFieldResult = _context.sent;
          unaccessibleFieldResult.forEach(function (res) {
            unaccessibleFieldObject[res.field] = res.list;
          });return _context.abrupt("return",
          { accessibleFieldObject: accessibleFieldObject, unaccessibleFieldObject: unaccessibleFieldObject });case 15:case "end":return _context.stop();}}, _callee);}));return function getAccessibleResources(_x, _x2, _x3) {return _ref2.apply(this, arguments);};}();

/***/ })

});
//# sourceMappingURL=src_components_ConnectedFilter_index_jsx-src_components_GuppyWrapper_index_jsx-stories_conf_j-9b8fa2.58e570dcfaa14a270146.hot-update.js.map