"use strict";
self["webpackHotUpdateanagine"]("src_components_ConnectedFilter_index_jsx-src_components_GuppyWrapper_index_jsx-stories_conf_j-9b8fa2",{

/***/ "./src/components/GuppyWrapper/index.jsx":
/*!***********************************************!*\
  !*** ./src/components/GuppyWrapper/index.jsx ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _Utils_queries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils/queries */ "./src/components/Utils/queries.js");
/* harmony import */ var _Utils_const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Utils/const */ "./src/components/Utils/const.js");
/* harmony import */ var _Utils_filters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Utils/filters */ "./src/components/Utils/filters.js");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");
function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function ownKeys(e, r) {var t = Object.keys(e);if (Object.getOwnPropertySymbols) {var o = Object.getOwnPropertySymbols(e);r && (o = o.filter(function (r) {return Object.getOwnPropertyDescriptor(e, r).enumerable;})), t.push.apply(t, o);}return t;}function _objectSpread(e) {for (var r = 1; r < arguments.length; r++) {var t = null != arguments[r] ? arguments[r] : {};r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {_defineProperty(e, r, t[r]);}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));});}return e;}function _defineProperty(e, r, t) {return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e;}function _classCallCheck(a, n) {if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");}function _defineProperties(e, r) {for (var t = 0; t < r.length; t++) {var o = r[t];o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);}}function _createClass(e, r, t) {return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);}function _callSuper(t, o, e) {return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));}function _possibleConstructorReturn(t, e) {if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t);}function _assertThisInitialized(e) {if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e;}function _isNativeReflectConstruct() {try {var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));} catch (t) {}return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {return !!t;})();}function _getPrototypeOf(t) {return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {return t.__proto__ || Object.getPrototypeOf(t);}, _getPrototypeOf(t);}function _inherits(t, e) {if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function");t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e);}function _setPrototypeOf(t, e) {return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {return t.__proto__ = e, t;}, _setPrototypeOf(t, e);} /* eslint-disable react/jsx-fragments */
/* eslint react/forbid-prop-types: 0 */






/**
 * Wrapper that connects to Guppy server,
 * and pass filter, aggs, and data to children components
 * Input props:
 *   - filterConfig: configuration for ConnectedFilter component
 *   - guppyConfig: Guppy server config
 *   - onFilterChange: callback that takes filter as argument, will be
 * called every time filter changes
 *   - onReceiveNewAggsData: callback that takes aggregation results
 * as argument, will be called every time aggregation results updated
 *
 * This wrapper will pass following data (filters, aggs, configs) to children components via prop:
 *   - aggsData: the aggregation results, format:
 *         {
 *             // for text aggregation
 *            [field]: { histogram: [{key: 'v1', count: 42}, {key: 'v2', count: 19}, ...] },
 *             // for numeric aggregation
 *            [field]: { histogram: [{key: [1, 83], count: 100}] },
 *            ...
 *         }
 *   - filter: the filters, format:
 *         {
 *            [field]: { selectedValues: ['v1', 'v2', ...] },  // for text filter
 *            [field]: { upperBound: 1, lowerBound: 83 },  // for range filter
 *            ...
 *         }
 *   - filterConfig: configuration for ConnectedFilter component
 *   - rawData: raw data records filtered (with offset, size, and sort applied)
 *   - totalCount: total count of raw data records
 *
 */var
GuppyWrapper = /*#__PURE__*/function (_React$Component) {
  function GuppyWrapper(props) {var _this;_classCallCheck(this, GuppyWrapper);
    _this = _callSuper(this, GuppyWrapper, [props]);
    var initialFilter = _this.props.adminAppliedPreFilters;
    if (Object.keys(_this.props.initialFilterFromURL).length > 0) {
      initialFilter = (0,_Utils_filters__WEBPACK_IMPORTED_MODULE_3__.mergeFilters)(
        _this.props.initialFilterFromURL,
        _this.props.adminAppliedPreFilters
      );
    }
    // to avoid asynchronizations, we store another filter as private var
    _this.filter = _objectSpread({}, initialFilter);
    _this.adminPreFiltersFrozen = JSON.stringify(_this.props.adminAppliedPreFilters).slice();
    _this.state = {
      gettingDataFromGuppy: false,
      aggsData: {},
      filter: _objectSpread({}, initialFilter),
      rawData: [],
      totalCount: 0,
      allRegularAggFields: [],
      allAsTextAggFields: [],
      rawDataFields: [],
      accessibleFieldObject: undefined,
      unaccessibleFieldObject: undefined,
      accessibility: _Utils_const__WEBPACK_IMPORTED_MODULE_2__.ENUM_ACCESSIBILITY.ALL,
      adminAppliedPreFilters: _objectSpread({}, _this.props.adminAppliedPreFilters),
      userFilterFromURL: _objectSpread({}, _this.props.initialFilterFromURL)
    };return _this;
  }_inherits(GuppyWrapper, _React$Component);return _createClass(GuppyWrapper, [{ key: "componentDidMount", value:

    function componentDidMount() {var _this2 = this;
      (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.getAllFieldsFromGuppy)(
        this.props.guppyConfig.path,
        this.props.guppyConfig.type,
        this.props.csrfToken
      ).then(function (fields) {
        var rawDataFields = _this2.props.rawDataFields && _this2.props.rawDataFields.length > 0 ?
        _this2.props.rawDataFields : fields;
        _this2.setState({
          allRegularAggFields: fields,
          rawDataFields: rawDataFields
        }, function () {
          _this2.getDataFromGuppy(_this2.state.rawDataFields, undefined, true);
        });
      });
      if (typeof this.props.accessibleFieldCheckList !== 'undefined') {
        (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.getAccessibleResources)(
          this.props.guppyConfig.path,
          this.props.guppyConfig.type,
          this.props.accessibleFieldCheckList,
          this.props.csrfToken
        ).then(function (_ref) {var accessibleFieldObject = _ref.accessibleFieldObject,unaccessibleFieldObject = _ref.unaccessibleFieldObject;
          _this2.setState({
            accessibleFieldObject: accessibleFieldObject,
            unaccessibleFieldObject: unaccessibleFieldObject
          });
        });
      }
    } }, { key: "handleReceiveNewAggsData", value:

    function handleReceiveNewAggsData(aggsData) {
      if (this.props.onReceiveNewAggsData) {
        this.props.onReceiveNewAggsData(aggsData, this.filter);
      }
      this.setState({ aggsData: aggsData });
    } }, { key: "handleFilterChange", value:

    function handleFilterChange(userFilterFromUserInput, accessibility) {var _this3 = this;
      var userFilter = userFilterFromUserInput;

      // Apply user filters from URL on page load. Empty out state to avoid reapplying used filters.
      if (Object.keys(userFilter).length === 0 &&
      Object.keys(this.state.userFilterFromURL).length > 0) {
        userFilter = JSON.parse(JSON.stringify(this.state.userFilterFromURL));
        this.setState({ userFilterFromURL: {} });
      }

      this.setState({ adminAppliedPreFilters: JSON.parse(this.adminPreFiltersFrozen) });
      var filter = _objectSpread({}, userFilter);
      if (Object.keys(this.state.adminAppliedPreFilters).length > 0) {
        filter = (0,_Utils_filters__WEBPACK_IMPORTED_MODULE_3__.mergeFilters)(userFilter, this.state.adminAppliedPreFilters);
      }
      if (this.props.onFilterChange) {
        this.props.onFilterChange(filter);
      }
      this.filter = filter;
      this.setState({
        filter: filter,
        accessibility: accessibility
      }, function () {
        _this3.getDataFromGuppy(_this3.state.rawDataFields, undefined, true);
      });
    }

    /**
     * Fetch data from Guppy server.
     * This function will update this.state.rawData and this.state.totalCount
     */ }, { key: "handleFetchAndUpdateRawData", value:
    function handleFetchAndUpdateRawData(_ref2) {var _ref2$offset = _ref2.offset,offset = _ref2$offset === void 0 ? 0 : _ref2$offset,_ref2$size = _ref2.size,size = _ref2$size === void 0 ? 20 : _ref2$size,_ref2$sort = _ref2.sort,sort = _ref2$sort === void 0 ? [] : _ref2$sort;
      return this.getDataFromGuppy(this.state.rawDataFields, sort, true, offset, size);
    }

    /**
     * Download all data from Guppy server and return raw data
     * This function uses current filter argument
     */ }, { key: "handleDownloadRawData", value:
    function handleDownloadRawData(_ref3) {var sort = _ref3.sort,format = _ref3.format;
      // error handling for misconfigured format types
      if (format && !(format.toUpperCase() in _Utils_const__WEBPACK_IMPORTED_MODULE_2__.FILE_FORMATS)) {
        // eslint-disable-next-line no-console
        console.error("Invalid value ".concat(format, " found for arg format!"));
      }
      return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.downloadDataFromGuppy)(
        this.props.guppyConfig.path,
        this.props.guppyConfig.type,
        this.state.totalCount,
        {
          fields: this.state.rawDataFields,
          sort: sort || [],
          filter: this.state.filter,
          accessibility: this.state.accessibility,
          format: format
        },
        this.props.csrfToken
      );
    }

    /**
     * Download all data from Guppy server and return raw data
     * For only given fields
     * This function uses current filter argument
     */ }, { key: "handleDownloadRawDataByFields", value:
    function handleDownloadRawDataByFields(_ref4) {var fields = _ref4.fields,_ref4$sort = _ref4.sort,sort = _ref4$sort === void 0 ? [] : _ref4$sort;
      var targetFields = fields;
      if (typeof fields === 'undefined') {
        targetFields = this.state.rawDataFields;
      }
      return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.downloadDataFromGuppy)(
        this.props.guppyConfig.path,
        this.props.guppyConfig.type,
        this.state.totalCount,
        {
          fields: targetFields,
          sort: sort,
          filter: this.state.filter,
          accessibility: this.state.accessibility
        },
        this.props.csrfToken
      );
    }

    /**
     * Get total count from other es type, with filter
     * @param {string} type
     * @param {object} filter
     */ }, { key: "handleAskGuppyForTotalCounts", value:
    function handleAskGuppyForTotalCounts(type, filter) {
      return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.askGuppyForTotalCounts)(
        this.props.guppyConfig.path,
        type,
        filter,
        this.state.accessibility,
        this.props.csrfToken
      );
    }

    /**
     * Get raw data from other es type, with filter
     * @param {string} type
     * @param {object} filter
     * @param {string[]} fields
     */ }, { key: "handleDownloadRawDataByTypeAndFilter", value:
    function handleDownloadRawDataByTypeAndFilter(type, filter, fields) {var _this4 = this;
      return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.askGuppyForTotalCounts)(
        this.props.guppyConfig.path,
        type,
        filter,
        this.state.accessibility,
        this.props.csrfToken
      ).
      then(function (count) {return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.downloadDataFromGuppy)(
          _this4.props.guppyConfig.path,
          type,
          count,
          {
            fields: fields,
            filter: filter
          },
          _this4.props.csrfToken
        );});
    } }, { key: "handleAccessLevelUpdate", value:

    function handleAccessLevelUpdate(accessLevel) {
      this.setState({ accessibility: accessLevel });
    }

    /**
     * This function get data with current filter (if any),
     * and update this.state.rawData and this.state.totalCount
     * @param {string[]} fields
     * @param {object} sort
     * @param {bool} updateDataWhenReceive
     * @param {number} offset
     * @param {number} size
     */ }, { key: "getDataFromGuppy", value:
    function getDataFromGuppy(fields, sort, updateDataWhenReceive, offset, size) {var _this5 = this;
      this.setState({ gettingDataFromGuppy: true });
      if (!fields || fields.length === 0) {
        this.setState({ gettingDataFromGuppy: false });
        return Promise.resolve({ data: [], totalCount: 0 });
      }

      // sub aggregations -- for DAT
      if (this.props.guppyConfig.mainField) {
        var numericAggregation = this.props.guppyConfig.mainFieldIsNumeric;
        return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.askGuppyForSubAggregationData)(
          this.props.guppyConfig.path,
          this.props.guppyConfig.type,
          this.props.guppyConfig.mainField,
          numericAggregation,
          this.props.guppyConfig.aggFields,
          [],
          this.filter,
          this.state.accessibility,
          this.props.csrfToken
        ).then(function (res) {
          if (!res || !res.data) {
            throw new Error("Error getting raw ".concat(_this5.props.guppyConfig.type, " data from Guppy server ").concat(_this5.props.guppyConfig.path, "."));
          }
          var data = res.data._aggregation[_this5.props.guppyConfig.type];
          var field = numericAggregation ? 'asTextHistogram' : 'histogram';
          var parsedData = data[_this5.props.guppyConfig.mainField][field];
          if (updateDataWhenReceive) {
            _this5.setState({
              rawData: parsedData
            });
          }
          _this5.setState({ gettingDataFromGuppy: false });
          return {
            data: res.data
          };
        });
      }

      // non-nested aggregation
      return (0,_Utils_queries__WEBPACK_IMPORTED_MODULE_1__.askGuppyForRawData)(
        this.props.guppyConfig.path,
        this.props.guppyConfig.type,
        fields,
        this.filter,
        sort,
        undefined,
        offset,
        size,
        this.state.accessibility,
        this.props.csrfToken
      ).then(function (res) {
        if (!res || !res.data) {
          throw new Error("Error getting raw ".concat(_this5.props.guppyConfig.type, " data from Guppy server ").concat(_this5.props.guppyConfig.path, "."));
        }
        var parsedData = res.data[_this5.props.guppyConfig.type];
        var totalCount = res.data._aggregation[_this5.props.guppyConfig.type]._totalCount;
        if (updateDataWhenReceive) {
          _this5.setState({
            rawData: parsedData,
            totalCount: totalCount
          });
        }
        _this5.setState({ gettingDataFromGuppy: false });
        return {
          data: parsedData,
          totalCount: totalCount
        };
      });
    } }, { key: "render", value:

    function render() {var _this6 = this;
      return (/*#__PURE__*/
        (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, { children:

          react__WEBPACK_IMPORTED_MODULE_0__.Children.map(this.props.children, function (child) {return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, {
              // pass data to children
              aggsData: _this6.state.aggsData,
              aggsDataIsLoading: _this6.state.gettingDataFromGuppy,
              filter: _this6.state.filter,
              filterConfig: _this6.props.filterConfig,
              rawData: _this6.state.rawData, // raw data (with current filter applied)
              totalCount: _this6.state.totalCount, // total count of raw data (current filter applied)
              fetchAndUpdateRawData: _this6.handleFetchAndUpdateRawData.bind(_this6),
              downloadRawData: _this6.handleDownloadRawData.bind(_this6),
              downloadRawDataByFields: _this6.handleDownloadRawDataByFields.bind(_this6),
              allRegularAggFields: _this6.state.allRegularAggFields,
              allAsTextAggFields: _this6.state.allAsTextAggFields,
              accessibleFieldObject: _this6.state.accessibleFieldObject,
              unaccessibleFieldObject: _this6.state.unaccessibleFieldObject,

              // a callback function which return total counts for any type, with any filter
              getTotalCountsByTypeAndFilter: _this6.handleAskGuppyForTotalCounts.bind(_this6),
              downloadRawDataByTypeAndFilter: _this6.handleDownloadRawDataByTypeAndFilter.bind(_this6),

              // below are just for ConnectedFilter component
              onReceiveNewAggsData: _this6.handleReceiveNewAggsData.bind(_this6),
              onFilterChange: _this6.handleFilterChange.bind(_this6),
              guppyConfig: _this6.props.guppyConfig,
              onUpdateAccessLevel: _this6.handleAccessLevelUpdate.bind(_this6),
              adminAppliedPreFilters: _this6.props.adminAppliedPreFilters,
              accessibleFieldCheckList: _this6.props.accessibleFieldCheckList,
              csrfToken: _this6.props.csrfToken
            });}) }

        ));

    } }]);}(react__WEBPACK_IMPORTED_MODULE_0__.Component);GuppyWrapper.displayName = "GuppyWrapper";


GuppyWrapper.propTypes = {
  guppyConfig: prop_types__WEBPACK_IMPORTED_MODULE_5___default().shape({
    path: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),
    type: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),
    mainField: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),
    mainFieldIsNumeric: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().bool),
    aggFields: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().array)
  }).isRequired,
  children: prop_types__WEBPACK_IMPORTED_MODULE_5___default().oneOfType([
  prop_types__WEBPACK_IMPORTED_MODULE_5___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_5___default().node)),
  (prop_types__WEBPACK_IMPORTED_MODULE_5___default().node)]
  ).isRequired,
  filterConfig: prop_types__WEBPACK_IMPORTED_MODULE_5___default().shape({
    tabs: prop_types__WEBPACK_IMPORTED_MODULE_5___default().arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_5___default().shape({
      title: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string),
      fields: prop_types__WEBPACK_IMPORTED_MODULE_5___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_5___default().string)),
      searchFields: prop_types__WEBPACK_IMPORTED_MODULE_5___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_5___default().string))
    }))
  }).isRequired,
  rawDataFields: prop_types__WEBPACK_IMPORTED_MODULE_5___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_5___default().string)),
  onReceiveNewAggsData: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().func),
  onFilterChange: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().func),
  accessibleFieldCheckList: prop_types__WEBPACK_IMPORTED_MODULE_5___default().arrayOf((prop_types__WEBPACK_IMPORTED_MODULE_5___default().string)),
  adminAppliedPreFilters: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().object),
  initialFilterFromURL: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().object),
  csrfToken: (prop_types__WEBPACK_IMPORTED_MODULE_5___default().string)
};

GuppyWrapper.defaultProps = {
  onReceiveNewAggsData: function onReceiveNewAggsData() {},
  onFilterChange: function onFilterChange() {},
  rawDataFields: [],
  accessibleFieldCheckList: undefined,
  adminAppliedPreFilters: {},
  initialFilterFromURL: {},
  csrfToken: ''
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GuppyWrapper);

/***/ })

});
//# sourceMappingURL=src_components_ConnectedFilter_index_jsx-src_components_GuppyWrapper_index_jsx-stories_conf_j-9b8fa2.5a67ea5042585cafed46.hot-update.js.map