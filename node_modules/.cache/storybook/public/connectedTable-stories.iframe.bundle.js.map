{"version":3,"file":"connectedTable-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAGA;AACA;AAjEA;AAmEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://anagine/./stories/TableExample.jsx","webpack://anagine/"],"sourcesContent":["import React from 'react';\nimport { Table } from 'antd';\nimport PropTypes from 'prop-types';\nimport { tableConfig } from './conf';\n\nclass ConnectedTableExample extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      pagination: {\n        current: 1,\n        pageSize: 20,\n        total: this.props.totalCount,\n      },\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps?.totalCount !== this.props.totalCount) {\n      this.setState({\n        pagination: {\n          current: this.state.pagination.current,\n          pageSize: this.state.pagination.pageSize,\n          total: this.props.totalCount,\n        },\n      });\n    }\n  }\n\n  render() {\n    const columnsConfig = tableConfig.map(c => ({\n      title: c.name,\n      dataIndex: c.field,\n      sorter: true,\n    }));\n\n    const handleTableChange = (pagination, filters, sorter) => {\n      const size = pagination.pageSize;\n      this.setState({ loading: true });\n      const offset = (pagination.current - 1) * size;\n      const sort = sorter?.order ? {\n        [sorter.field]: sorter.order === 'descend' ? 'desc' : 'asc',\n      } : {};\n      this.props.fetchAndUpdateRawData({\n        offset,\n        size,\n        sort,\n      }).then((res) => {\n        this.setState({\n          loading: false,\n          pagination: {\n            current: pagination.current,\n            pageSize: size,\n            total: this.props.totalCount,\n          },\n        });\n      });\n    };\n    return (\n      <Table\n        className={`connected-table-example ${this.props.className}`}\n        columns={columnsConfig}\n        dataSource={this.props.rawData || []}\n        pagination={this.state.pagination}\n        loading={this.state.loading} // Display the loading overlay when we need it\n        onChange={handleTableChange} // Request new data when things change\n      />\n    );\n  }\n}\n\nConnectedTableExample.propTypes = {\n  rawData: PropTypes.array,\n  className: PropTypes.string,\n  fetchAndUpdateRawData: PropTypes.func,\n  totalCount: PropTypes.number,\n};\n\nexport default ConnectedTableExample;\n"],"names":[],"sourceRoot":""}